/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: eV0HKBbutTtb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Checkbox from "../../Checkbox"; // plasmic-import: 8GCIwGzw7mQX/component
import ResultForAnswere from "../../ResultForAnswere"; // plasmic-import: Cf0omqPvfiVb/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicAnswereToAsignment.module.css"; // plasmic-import: eV0HKBbutTtb/css

import CloseBoldSvgrepoComSvgIcon from "./icons/PlasmicIcon__CloseBoldSvgrepoComSvg"; // plasmic-import: SJMAvzRhRhf4/icon

createPlasmicElementProxy;

export type PlasmicAnswereToAsignment__VariantMembers = {
  isColapsed: "isColapsed";
};
export type PlasmicAnswereToAsignment__VariantsArgs = {
  isColapsed?: SingleBooleanChoiceArg<"isColapsed">;
};
type VariantPropType = keyof PlasmicAnswereToAsignment__VariantsArgs;
export const PlasmicAnswereToAsignment__VariantProps =
  new Array<VariantPropType>("isColapsed");

export type PlasmicAnswereToAsignment__ArgsType = {
  answere?: any;
  finalAnswere?: string;
  bar?: number;
  result?: any;
};
type ArgPropType = keyof PlasmicAnswereToAsignment__ArgsType;
export const PlasmicAnswereToAsignment__ArgProps = new Array<ArgPropType>(
  "answere",
  "finalAnswere",
  "bar",
  "result"
);

export type PlasmicAnswereToAsignment__OverridesType = {
  root?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  svg?: Flex__<"svg">;
  resultForAnswere?: Flex__<typeof ResultForAnswere>;
};

export interface DefaultAnswereToAsignmentProps {
  answere?: any;
  finalAnswere?: string;
  bar?: number;
  result?: any;
  isColapsed?: SingleBooleanChoiceArg<"isColapsed">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAnswereToAsignment__RenderFunc(props: {
  variants: PlasmicAnswereToAsignment__VariantsArgs;
  args: PlasmicAnswereToAsignment__ArgsType;
  overrides: PlasmicAnswereToAsignment__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          bar: 0
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isColapsed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isColapsed
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root,
        { [sty.rootisColapsed]: hasVariant($state, "isColapsed", "isColapsed") }
      )}
    >
      <Checkbox
        data-plasmic-name={"checkbox"}
        data-plasmic-override={overrides.checkbox}
        children={null}
        className={classNames("__wab_instance", sty.checkbox)}
        isChecked={
          generateStateValueProp($state, ["checkbox", "isChecked"]) ?? false
        }
        isDisabled={true}
        isIndeterminate={undefined}
        onChange={async (...eventArgs: any) => {
          ((...eventArgs) => {
            generateStateOnChangeProp($state, ["checkbox", "isChecked"])(
              eventArgs[0]
            );
          }).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
      />

      <div
        className={classNames(projectcss.all, sty.freeBox__oefY, {
          [sty.freeBoxisColapsed__oefYcXoKp]: hasVariant(
            $state,
            "isColapsed",
            "isColapsed"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateIsColapsed"] = true
            ? (() => {
                const actionArgs = { vgroup: "isColapsed", operation: 6 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, false);
                  return false;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsColapsed"] != null &&
            typeof $steps["updateIsColapsed"] === "object" &&
            typeof $steps["updateIsColapsed"].then === "function"
          ) {
            $steps["updateIsColapsed"] = await $steps["updateIsColapsed"];
          }
        }}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__quxoe
          )}
        >
          {""}
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__hnxJc, {
            [sty.freeBoxisColapsed__hnxJccXoKp]: hasVariant(
              $state,
              "isColapsed",
              "isColapsed"
            )
          })}
        >
          {(
            hasVariant($state, "isColapsed", "isColapsed")
              ? (() => {
                  try {
                    return $props.answere.result.grade < $props.bar;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return (
                      $props.answeres[$props.answeres.length - 1].result
                        .grade !== undefined
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yDqZ,
                {
                  [sty.textisColapsed__yDqZCXoKp]: hasVariant(
                    $state,
                    "isColapsed",
                    "isColapsed"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.answere.result.grade;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
          {(
            hasVariant($state, "isColapsed", "isColapsed")
              ? (() => {
                  try {
                    return $props.answere.result.grade >= $props.bar;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : true
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vu4Mo,
                {
                  [sty.textisColapsed__vu4MoCXoKp]: hasVariant(
                    $state,
                    "isColapsed",
                    "isColapsed"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.answere.result.grade;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
          {(
            hasVariant($state, "isColapsed", "isColapsed")
              ? (() => {
                  try {
                    return Object.keys($props.answere.result).length === 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : true
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ujb5L,
                {
                  [sty.textisColapsed__ujb5LcXoKp]: hasVariant(
                    $state,
                    "isColapsed",
                    "isColapsed"
                  )
                }
              )}
            >
              {"\u0628\u062f\u0648\u0646 \u0646\u0645\u0631\u0647"}
            </div>
          ) : null}
        </div>
        {(hasVariant($state, "isColapsed", "isColapsed") ? true : false) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bdd5U,
              {
                [sty.textisColapsed__bdd5UCXoKp]: hasVariant(
                  $state,
                  "isColapsed",
                  "isColapsed"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.answere.desc;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Enter some text\ngoogle.com";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        ) : null}
        {(hasVariant($state, "isColapsed", "isColapsed") ? true : false) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qXPor,
              {
                [sty.textisColapsed__qXPorCXoKp]: hasVariant(
                  $state,
                  "isColapsed",
                  "isColapsed"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.answere.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        ) : null}
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__bhQln, {
          [sty.freeBoxisColapsed__bhQlnCXoKp]: hasVariant(
            $state,
            "isColapsed",
            "isColapsed"
          )
        })}
      >
        <CloseBoldSvgrepoComSvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgisColapsed]: hasVariant($state, "isColapsed", "isColapsed")
          })}
          onClick={async event => {
            const $steps = {};

            $steps["updateIsColapsed"] = true
              ? (() => {
                  const actionArgs = { vgroup: "isColapsed", operation: 4 };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, true);
                    return true;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateIsColapsed"] != null &&
              typeof $steps["updateIsColapsed"] === "object" &&
              typeof $steps["updateIsColapsed"].then === "function"
            ) {
              $steps["updateIsColapsed"] = await $steps["updateIsColapsed"];
            }
          }}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__gdKyB,
            {
              [sty.textisColapsed__gdKyBcXoKp]: hasVariant(
                $state,
                "isColapsed",
                "isColapsed"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.answere.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__y82WW,
            {
              [sty.textisColapsed__y82WWcXoKp]: hasVariant(
                $state,
                "isColapsed",
                "isColapsed"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.answere.desc;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "hjn.com";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___7V2T)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___4IJcY
            )}
          >
            {"\u0646\u062a\u06cc\u062c\u0647"}
          </div>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.result.find(
                  item => item.answere_id == $props.answere.id
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <ResultForAnswere
                data-plasmic-name={"resultForAnswere"}
                data-plasmic-override={overrides.resultForAnswere}
                className={classNames("__wab_instance", sty.resultForAnswere)}
                isCollapsed={true}
                key={currentIndex}
                result={(() => {
                  try {
                    return currentItem;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                stage={"start"}
              />
            );
          })}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "checkbox", "svg", "resultForAnswere"],
  checkbox: ["checkbox"],
  svg: ["svg"],
  resultForAnswere: ["resultForAnswere"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  checkbox: typeof Checkbox;
  svg: "svg";
  resultForAnswere: typeof ResultForAnswere;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAnswereToAsignment__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAnswereToAsignment__VariantsArgs;
    args?: PlasmicAnswereToAsignment__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAnswereToAsignment__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAnswereToAsignment__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAnswereToAsignment__ArgProps,
          internalVariantPropNames: PlasmicAnswereToAsignment__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAnswereToAsignment__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAnswereToAsignment";
  } else {
    func.displayName = `PlasmicAnswereToAsignment.${nodeName}`;
  }
  return func;
}

export const PlasmicAnswereToAsignment = Object.assign(
  // Top-level PlasmicAnswereToAsignment renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    checkbox: makeNodeComponent("checkbox"),
    svg: makeNodeComponent("svg"),
    resultForAnswere: makeNodeComponent("resultForAnswere"),

    // Metadata about props expected for PlasmicAnswereToAsignment
    internalVariantProps: PlasmicAnswereToAsignment__VariantProps,
    internalArgProps: PlasmicAnswereToAsignment__ArgProps
  }
);

export default PlasmicAnswereToAsignment;
/* prettier-ignore-end */
