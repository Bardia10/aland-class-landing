/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: WCscH0b-XY5W

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicMedalist.module.css"; // plasmic-import: WCscH0b-XY5W/css

createPlasmicElementProxy;

export type PlasmicMedalist__VariantMembers = {
  scale: "small";
};
export type PlasmicMedalist__VariantsArgs = {
  scale?: SingleChoiceArg<"small">;
};
type VariantPropType = keyof PlasmicMedalist__VariantsArgs;
export const PlasmicMedalist__VariantProps = new Array<VariantPropType>(
  "scale"
);

export type PlasmicMedalist__ArgsType = { story?: string; medallist?: any };
type ArgPropType = keyof PlasmicMedalist__ArgsType;
export const PlasmicMedalist__ArgProps = new Array<ArgPropType>(
  "story",
  "medallist"
);

export type PlasmicMedalist__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultMedalistProps {
  story?: string;
  medallist?: any;
  scale?: SingleChoiceArg<"small">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMedalist__RenderFunc(props: {
  variants: PlasmicMedalist__VariantsArgs;
  args: PlasmicMedalist__ArgsType;
  overrides: PlasmicMedalist__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "scale",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.scale
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root,
        { [sty.rootscale_small]: hasVariant($state, "scale", "small") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__i6XvP, {
          [sty.freeBoxscale_small__i6XvPa7RIb]: hasVariant(
            $state,
            "scale",
            "small"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__fYnqq, {
            [sty.freeBoxscale_small__fYnqQa7RIb]: hasVariant(
              $state,
              "scale",
              "small"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__nB33P, {
              [sty.freeBoxscale_small__nB33Pa7RIb]: hasVariant(
                $state,
                "scale",
                "small"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox___8Rag, {
                [sty.freeBoxscale_small___8Raga7RIb]: hasVariant(
                  $state,
                  "scale",
                  "small"
                )
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__bbwxz, {
                  [sty.imgscale_small__bbwxza7RIb]: hasVariant(
                    $state,
                    "scale",
                    "small"
                  )
                })}
                displayHeight={
                  hasVariant($state, "scale", "small") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "101px"
                    : hasVariant($state, "scale", "small")
                    ? "152px"
                    : "130px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={
                  hasVariant($state, "scale", "small") ? "100%" : "100%"
                }
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant($state, "scale", "small") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "78px"
                    : hasVariant($state, "scale", "small")
                    ? "114px"
                    : "130px"
                }
                height={"100"}
                loading={"eager"}
                src={(() => {
                  try {
                    return $props.medallist.profile;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {
                        src: "/plasmic/main_ui/images/untitled1Jpg3.jpg",
                        fullWidth: 479,
                        fullHeight: 494,
                        aspectRatio: undefined
                      };
                    }
                    throw e;
                  }
                })()}
                width={"75"}
              />
            </div>
            {(
              hasVariant($state, "scale", "small") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? true
                : hasVariant($state, "scale", "small")
                ? (() => {
                    try {
                      return $props.medallist.type == "طلا";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__fcnql, {
                  [sty.imgscale_small__fcnqla7RIb]: hasVariant(
                    $state,
                    "scale",
                    "small"
                  )
                })}
                displayHeight={
                  hasVariant($state, "scale", "small") ? "172px" : "auto"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={
                  hasVariant($state, "scale", "small") ? "100%" : "0"
                }
                displayWidth={
                  hasVariant($state, "scale", "small") ? "172px" : "auto"
                }
                loading={"lazy"}
                src={
                  hasVariant($state, "scale", "small")
                    ? {
                        src: "/plasmic/main_ui/images/_1739259856553Png.png",
                        fullWidth: 719,
                        fullHeight: 943,
                        aspectRatio: undefined
                      }
                    : {
                        src: "/plasmic/main_ui/images/_4Svg2.svg",
                        fullWidth: 1500,
                        fullHeight: 1500,
                        aspectRatio: 1
                      }
                }
              />
            ) : null}
            {(
              hasVariant($state, "scale", "small") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? true
                : hasVariant($state, "scale", "small")
                ? (() => {
                    try {
                      return $props.medallist.type == "برنز";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : false
            ) ? (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__i2Nuz, {
                  [sty.imgscale_small__i2Nuza7RIb]: hasVariant(
                    $state,
                    "scale",
                    "small"
                  )
                })}
                displayHeight={
                  hasVariant($state, "scale", "small") ? "150px" : "auto"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={
                  hasVariant($state, "scale", "small") ? "100%" : "0"
                }
                displayWidth={
                  hasVariant($state, "scale", "small") ? "150px" : "auto"
                }
                loading={"lazy"}
                src={
                  hasVariant($state, "scale", "small")
                    ? {
                        src: "/plasmic/main_ui/images/_1739261949354Png.png",
                        fullWidth: 717,
                        fullHeight: 899,
                        aspectRatio: undefined
                      }
                    : {
                        src: "/plasmic/main_ui/images/tala1Png.png",
                        fullWidth: 506,
                        fullHeight: 675,
                        aspectRatio: undefined
                      }
                }
              />
            ) : null}
            {(
              hasVariant($state, "scale", "small")
                ? (() => {
                    try {
                      return $props.medallist.type == "نقره";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__iuTdA, {
                  [sty.freeBoxscale_small__iuTdAa7RIb]: hasVariant(
                    $state,
                    "scale",
                    "small"
                  )
                })}
              >
                {(hasVariant($state, "scale", "small") ? true : false) ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___9VkVf, {
                      [sty.imgscale_small___9VkVFa7RIb]: hasVariant(
                        $state,
                        "scale",
                        "small"
                      )
                    })}
                    displayHeight={
                      hasVariant($state, "scale", "small") ? "100%" : "auto"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={
                      hasVariant($state, "scale", "small") ? "100%" : "0"
                    }
                    displayWidth={
                      hasVariant($state, "scale", "small") ? "100%" : "auto"
                    }
                    loading={"lazy"}
                    src={
                      hasVariant($state, "scale", "small")
                        ? {
                            src: "/plasmic/main_ui/images/_1739315160408Png.png",
                            fullWidth: 719,
                            fullHeight: 829,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/main_ui/images/_1739315160408Png.png",
                            fullWidth: 719,
                            fullHeight: 829,
                            aspectRatio: undefined
                          }
                    }
                  />
                ) : null}
              </div>
            ) : null}
            {(
              hasVariant($state, "scale", "small") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $props.medallist.type == "طلا";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : hasVariant($state, "scale", "small")
                ? (() => {
                    try {
                      return $props.medallist.type == "نقره";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : false
            ) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__rni2, {
                  [sty.freeBoxscale_small__rni2A7RIb]: hasVariant(
                    $state,
                    "scale",
                    "small"
                  )
                })}
              >
                {(hasVariant($state, "scale", "small") ? true : false) ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ms3Iq, {
                      [sty.imgscale_small__ms3Iqa7RIb]: hasVariant(
                        $state,
                        "scale",
                        "small"
                      )
                    })}
                    displayHeight={
                      hasVariant($state, "scale", "small") ? "100%" : "auto"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={
                      hasVariant($state, "scale", "small") ? "100%" : "0"
                    }
                    displayWidth={
                      hasVariant($state, "scale", "small") ? "100%" : "auto"
                    }
                    loading={"lazy"}
                    src={
                      hasVariant($state, "scale", "small") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: "/plasmic/main_ui/images/tala1Png.png",
                            fullWidth: 506,
                            fullHeight: 675,
                            aspectRatio: undefined
                          }
                        : hasVariant($state, "scale", "small")
                        ? {
                            src: "/plasmic/main_ui/images/_1739315160408Png.png",
                            fullWidth: 719,
                            fullHeight: 829,
                            aspectRatio: undefined
                          }
                        : hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: "/plasmic/main_ui/images/tala1Png.png",
                            fullWidth: 506,
                            fullHeight: 675,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/main_ui/images/_1739315160408Png.png",
                            fullWidth: 719,
                            fullHeight: 829,
                            aspectRatio: undefined
                          }
                    }
                  />
                ) : null}
              </div>
            ) : null}
            {(
              hasVariant($state, "scale", "small") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $props.medallist.type == "برنز";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : hasVariant($state, "scale", "small")
                ? (() => {
                    try {
                      return $props.medallist.type == "نقره";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $props.medallist.type == "برنز";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : false
            ) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox___07UUn, {
                  [sty.freeBoxscale_small___07UUna7RIb]: hasVariant(
                    $state,
                    "scale",
                    "small"
                  )
                })}
              >
                {(hasVariant($state, "scale", "small") ? true : false) ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__svy3D, {
                      [sty.imgscale_small__svy3Da7RIb]: hasVariant(
                        $state,
                        "scale",
                        "small"
                      )
                    })}
                    displayHeight={
                      hasVariant($state, "scale", "small") ? "100%" : "auto"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={
                      hasVariant($state, "scale", "small") ? "100%" : "0"
                    }
                    displayWidth={
                      hasVariant($state, "scale", "small") ? "100%" : "auto"
                    }
                    loading={"lazy"}
                    src={
                      hasVariant($state, "scale", "small") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: "/plasmic/main_ui/images/boronzPng.png",
                            fullWidth: 555,
                            fullHeight: 740,
                            aspectRatio: undefined
                          }
                        : hasVariant($state, "scale", "small")
                        ? {
                            src: "/plasmic/main_ui/images/_1739315160408Png.png",
                            fullWidth: 719,
                            fullHeight: 829,
                            aspectRatio: undefined
                          }
                        : hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: "/plasmic/main_ui/images/tala1Png.png",
                            fullWidth: 506,
                            fullHeight: 675,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/main_ui/images/_1739315160408Png.png",
                            fullWidth: 719,
                            fullHeight: 829,
                            aspectRatio: undefined
                          }
                    }
                  />
                ) : null}
              </div>
            ) : null}
            {(
              hasVariant($state, "scale", "small") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $props.medallist.type == "کنکور";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : hasVariant($state, "scale", "small")
                ? (() => {
                    try {
                      return $props.medallist.type == "نقره";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $props.medallist.type == "برنز";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : false
            ) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__z8Upq, {
                  [sty.freeBoxscale_small__z8Upqa7RIb]: hasVariant(
                    $state,
                    "scale",
                    "small"
                  )
                })}
              >
                {(hasVariant($state, "scale", "small") ? true : false) ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__eyEpp, {
                      [sty.imgscale_small__eyEppa7RIb]: hasVariant(
                        $state,
                        "scale",
                        "small"
                      )
                    })}
                    displayHeight={
                      hasVariant($state, "scale", "small") ? "100%" : "auto"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={
                      hasVariant($state, "scale", "small") ? "100%" : "0"
                    }
                    displayWidth={
                      hasVariant($state, "scale", "small") ? "100%" : "auto"
                    }
                    loading={"lazy"}
                    src={
                      hasVariant($state, "scale", "small") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: "/plasmic/main_ui/images/konkurPng.png",
                            fullWidth: 651,
                            fullHeight: 868,
                            aspectRatio: undefined
                          }
                        : hasVariant($state, "scale", "small")
                        ? {
                            src: "/plasmic/main_ui/images/_1739315160408Png.png",
                            fullWidth: 719,
                            fullHeight: 829,
                            aspectRatio: undefined
                          }
                        : hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: "/plasmic/main_ui/images/tala1Png.png",
                            fullWidth: 506,
                            fullHeight: 675,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/main_ui/images/_1739315160408Png.png",
                            fullWidth: 719,
                            fullHeight: 829,
                            aspectRatio: undefined
                          }
                    }
                  />
                ) : null}
              </div>
            ) : null}
            {(
              hasVariant($state, "scale", "small") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? true
                : hasVariant($state, "scale", "small")
                ? (() => {
                    try {
                      return $props.medallist.type == "کنکور";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : false
            ) ? (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___9KJlg, {
                  [sty.imgscale_small___9KJlga7RIb]: hasVariant(
                    $state,
                    "scale",
                    "small"
                  )
                })}
                displayHeight={
                  hasVariant($state, "scale", "small") ? "150px" : "auto"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={
                  hasVariant($state, "scale", "small") ? "100%" : "0"
                }
                displayWidth={
                  hasVariant($state, "scale", "small") ? "150px" : "auto"
                }
                loading={"lazy"}
                src={
                  hasVariant($state, "scale", "small")
                    ? {
                        src: "/plasmic/main_ui/images/konkurPng.png",
                        fullWidth: 651,
                        fullHeight: 868,
                        aspectRatio: undefined
                      }
                    : {
                        src: "/plasmic/main_ui/images/konkurPng.png",
                        fullWidth: 651,
                        fullHeight: 868,
                        aspectRatio: undefined
                      }
                }
              />
            ) : null}
          </div>
        </div>
        <h5
          className={classNames(
            projectcss.all,
            projectcss.h5,
            projectcss.__wab_text,
            sty.h5__xbvvn,
            {
              [sty.h5scale_small__xbvvna7RIb]: hasVariant(
                $state,
                "scale",
                "small"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.medallist.name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h5>
        <h5
          className={classNames(
            projectcss.all,
            projectcss.h5,
            projectcss.__wab_text,
            sty.h5__zWZmZ,
            {
              [sty.h5scale_small__zWZmZa7RIb]: hasVariant(
                $state,
                "scale",
                "small"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.medallist.accomplishment;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h5>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__kHGsq)}>
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.medallist.story;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMedalist__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMedalist__VariantsArgs;
    args?: PlasmicMedalist__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMedalist__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMedalist__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMedalist__ArgProps,
          internalVariantPropNames: PlasmicMedalist__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMedalist__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMedalist";
  } else {
    func.displayName = `PlasmicMedalist.${nodeName}`;
  }
  return func;
}

export const PlasmicMedalist = Object.assign(
  // Top-level PlasmicMedalist renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicMedalist
    internalVariantProps: PlasmicMedalist__VariantProps,
    internalArgProps: PlasmicMedalist__ArgProps
  }
);

export default PlasmicMedalist;
/* prettier-ignore-end */
