/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: XzJxHS8L5Tsi

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicClassVideo.module.css"; // plasmic-import: XzJxHS8L5Tsi/css

createPlasmicElementProxy;

export type PlasmicClassVideo__VariantMembers = {
  showFiles2: "showFiles2";
};
export type PlasmicClassVideo__VariantsArgs = {
  showFiles2?: SingleBooleanChoiceArg<"showFiles2">;
};
type VariantPropType = keyof PlasmicClassVideo__VariantsArgs;
export const PlasmicClassVideo__VariantProps = new Array<VariantPropType>(
  "showFiles2"
);

export type PlasmicClassVideo__ArgsType = { classInfo?: any };
type ArgPropType = keyof PlasmicClassVideo__ArgsType;
export const PlasmicClassVideo__ArgProps = new Array<ArgPropType>("classInfo");

export type PlasmicClassVideo__OverridesType = {
  root?: Flex__<"div">;
  taklif?: Flex__<"div">;
  attachments?: Flex__<"div">;
};

export interface DefaultClassVideoProps {
  classInfo?: any;
  showFiles2?: SingleBooleanChoiceArg<"showFiles2">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicClassVideo__RenderFunc(props: {
  variants: PlasmicClassVideo__VariantsArgs;
  args: PlasmicClassVideo__ArgsType;
  overrides: PlasmicClassVideo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          classInfo: {
            title: "Introduction to JavaScript Programming",
            caption: "Learn the basics of JavaScript programming language",
            teacher: "John Doe",
            date: "2024/12/31",
            attachments: [
              { title: "lecture slides", link: "google.com" },
              { title: "additional resources", link: "google.com" }
            ],
            assignments: [
              { title: "coding exercises", id: 1 },
              { title: "quiz questions", id: 2 }
            ]
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showFiles",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "showFiles2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.showFiles;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.showFiles2
      },
      {
        path: "classObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                title: "Introduction to JavaScript Programming",
                caption: "Learn the basics of JavaScript programming language",
                teacher: "John Doe",
                date: new Date().toLocaleDateString(),
                attachments: ["lecture slides", "additional resources"],
                assignments: ["coding exercises", "quiz questions"]
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root,
        { [sty.rootshowFiles2]: hasVariant($state, "showFiles2", "showFiles2") }
      )}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return {
              title: "Introduction to JavaScript Programming",
              caption: "Learn the basics of JavaScript programming language",
              teacher: "John Doe",
              date: "2024/12/31",
              attachments: [
                { title: "lecture slides", link: "google.com" },
                { title: "additional resources", link: "google.com" }
              ],

              assignments: [
                { title: "coding exercises", id: 1 },
                { title: "quiz questions", id: 2 }
              ]
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            className={classNames(projectcss.all, sty.freeBox__jtjri)}
            key={currentIndex}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yXruN
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__xSh92)}
              displayHeight={"400px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"700px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/main_ui/images/microsoftEdge4QKqDeAZfCUnsplashJpg.jpg",
                fullWidth: 1920,
                fullHeight: 1280,
                aspectRatio: undefined
              }}
            />

            <div className={classNames(projectcss.all, sty.freeBox___8FqTt)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wEqo
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return currentItem.date;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___3Kkbl)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pDm0L
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.teacher;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__zgEkg)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"54px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/main_ui/images/download1Jpg.jpg",
                    fullWidth: 160,
                    fullHeight: 160,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zhmCi
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem.caption;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__q0Z2)}>
              <div className={classNames(projectcss.all, sty.freeBox__o5Nz)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__auzB8,
                    {
                      [sty.textshowFiles2__auzB8WcSHn]: hasVariant(
                        $state,
                        "showFiles2",
                        "showFiles2"
                      )
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};
                  }}
                >
                  {"\u062a\u06a9\u0627\u0644\u06cc\u0641"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qoy8A,
                    {
                      [sty.textshowFiles2__qoy8AWcSHn]: hasVariant(
                        $state,
                        "showFiles2",
                        "showFiles2"
                      )
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};
                  }}
                >
                  {"\u0641\u0627\u06cc\u0644 \u0647\u0627"}
                </div>
              </div>
              <div
                data-plasmic-name={"taklif"}
                data-plasmic-override={overrides.taklif}
                className={classNames(projectcss.all, sty.taklif, {
                  [sty.taklifshowFiles2]: hasVariant(
                    $state,
                    "showFiles2",
                    "showFiles2"
                  )
                })}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return currentItem.assignments;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                  const currentItem = __plasmic_item_1;
                  const currentIndex = __plasmic_idx_1;
                  return (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nj3Rj
                      )}
                      key={currentIndex}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  );
                })}
              </div>
              <div
                data-plasmic-name={"attachments"}
                data-plasmic-override={overrides.attachments}
                className={classNames(projectcss.all, sty.attachments, {
                  [sty.attachmentsshowFiles2]: hasVariant(
                    $state,
                    "showFiles2",
                    "showFiles2"
                  )
                })}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return currentItem.attachments;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                  const currentItem = __plasmic_item_1;
                  const currentIndex = __plasmic_idx_1;
                  return (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nJgIu
                      )}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return undefined;
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        );
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "taklif", "attachments"],
  taklif: ["taklif"],
  attachments: ["attachments"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  taklif: "div";
  attachments: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicClassVideo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicClassVideo__VariantsArgs;
    args?: PlasmicClassVideo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicClassVideo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicClassVideo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicClassVideo__ArgProps,
          internalVariantPropNames: PlasmicClassVideo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicClassVideo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicClassVideo";
  } else {
    func.displayName = `PlasmicClassVideo.${nodeName}`;
  }
  return func;
}

export const PlasmicClassVideo = Object.assign(
  // Top-level PlasmicClassVideo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    taklif: makeNodeComponent("taklif"),
    attachments: makeNodeComponent("attachments"),

    // Metadata about props expected for PlasmicClassVideo
    internalVariantProps: PlasmicClassVideo__VariantProps,
    internalArgProps: PlasmicClassVideo__ArgProps
  }
);

export default PlasmicClassVideo;
/* prettier-ignore-end */
