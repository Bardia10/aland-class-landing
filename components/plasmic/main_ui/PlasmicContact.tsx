/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: b7xzDA2H8i1H

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: oAUVC4KlnvP5/component
import HeaderLanding from "../../HeaderLanding"; // plasmic-import: ITWOroSFH7VT/component
import HumbergerMenu from "../../HumbergerMenu"; // plasmic-import: 1LzZIhJKqT7B/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Footer from "../../Footer"; // plasmic-import: LLPl5wc7oCu-/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicContact.module.css"; // plasmic-import: b7xzDA2H8i1H/css

createPlasmicElementProxy;

export type PlasmicContact__VariantMembers = {};
export type PlasmicContact__VariantsArgs = {};
type VariantPropType = keyof PlasmicContact__VariantsArgs;
export const PlasmicContact__VariantProps = new Array<VariantPropType>();

export type PlasmicContact__ArgsType = {};
type ArgPropType = keyof PlasmicContact__ArgsType;
export const PlasmicContact__ArgProps = new Array<ArgPropType>();

export type PlasmicContact__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  headerLanding?: Flex__<typeof HeaderLanding>;
  humbergerMenu?: Flex__<typeof HumbergerMenu>;
  img?: Flex__<typeof PlasmicImg__>;
  text?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultContactProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContact__RenderFunc(props: {
  variants: PlasmicContact__VariantsArgs;
  args: PlasmicContact__ArgsType;
  overrides: PlasmicContact__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <HeaderLanding
            data-plasmic-name={"headerLanding"}
            data-plasmic-override={overrides.headerLanding}
            className={classNames("__wab_instance", sty.headerLanding)}
          />

          <HumbergerMenu
            data-plasmic-name={"humbergerMenu"}
            data-plasmic-override={overrides.humbergerMenu}
            className={classNames("__wab_instance", sty.humbergerMenu)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__pRPm0)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/main_ui/images/_4Svg.svg",
                fullWidth: 1080,
                fullHeight: 606.75,
                aspectRatio: 1.779975
              }}
            />

            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {
                "\u0628\u0631\u0627\u06cc \u0627\u0631\u0633\u0627\u0644 \u067e\u06cc\u0627\u0645 \u0628\u0647 \u0645\u0627 \u0641\u0631\u0645 \u0632\u06cc\u0631 \u0631\u0627 \u067e\u0631 \u06a9\u0646\u06cc\u062f"
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__d2UQg)}>
              <Embed
                data-plasmic-name={"embedHtml"}
                data-plasmic-override={overrides.embedHtml}
                className={classNames("__wab_instance", sty.embedHtml)}
                code={
                  "<div id=\"flhYVLQ8\" style=\"min-height: 480px; position: relative;\">\r\n    <div id=\"porsline-loading-flhYVLQ8\" style=\"position: absolute; top: 50%; left: 50%; width: auto; height: 35px; border: 4px solid rgba(0, 0, 0, 0.1); border-top: 4px solid #555; border-radius: 50%; animation: spin-flhYVLQ8 1s linear infinite;\"></div>\r\n    <script>\r\n      const styleSheet = document.createElement('style');\r\n      styleSheet.innerHTML = `@keyframes spin-flhYVLQ8 {\r\n          0% { transform: rotate(0deg); }\r\n          100% { transform: rotate(360deg); }\r\n        }`;\r\n      document.head.appendChild(styleSheet);\r\n      const loadingIndicator = document.getElementById('porsline-loading-flhYVLQ8');\r\n      const script = document.createElement('script');\r\n      script.type = 'text/javascript';\r\n      script.fetchPriority = 'high';\r\n      script.onload = function() {\r\n        loadingIndicator.style.display = 'none';\r\n      };\r\n      script.src = 'https://survey.porsline.ir/embed/eyJ3aWR0aCI6IjEwMCUiLCJoZWlnaHQiOiIxMDAlIiwiYm9yZGVyIjoibm9uZSJ9/flhYVLQ8';\r\n      document.getElementById('flhYVLQ8').appendChild(script);\r\n    </script>\r\n  </div>"
                }
              />
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "headerLanding",
    "humbergerMenu",
    "img",
    "text",
    "embedHtml",
    "footer"
  ],
  header: ["header"],
  headerLanding: ["headerLanding"],
  humbergerMenu: ["humbergerMenu"],
  img: ["img"],
  text: ["text"],
  embedHtml: ["embedHtml"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  headerLanding: typeof HeaderLanding;
  humbergerMenu: typeof HumbergerMenu;
  img: typeof PlasmicImg__;
  text: "div";
  embedHtml: typeof Embed;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContact__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContact__VariantsArgs;
    args?: PlasmicContact__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContact__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicContact__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContact__ArgProps,
          internalVariantPropNames: PlasmicContact__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContact__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContact";
  } else {
    func.displayName = `PlasmicContact.${nodeName}`;
  }
  return func;
}

export const PlasmicContact = Object.assign(
  // Top-level PlasmicContact renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    headerLanding: makeNodeComponent("headerLanding"),
    humbergerMenu: makeNodeComponent("humbergerMenu"),
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),
    embedHtml: makeNodeComponent("embedHtml"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicContact
    internalVariantProps: PlasmicContact__VariantProps,
    internalArgProps: PlasmicContact__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicContact;
/* prettier-ignore-end */
