/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: b8xhxPYLti-p

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: WXGFD0JrVuY6/component
import Select from "../../Select"; // plasmic-import: vUPQAB4Jq1TT/component
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: _MWZyCmj9Poj/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicSignUpForm.module.css"; // plasmic-import: b8xhxPYLti-p/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: 7hHqYtt8cnP_/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 2D7jq9Mtq-9Z/icon
import ArrowRightSvgIcon from "./icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: uyu4B0j5O6jt/icon

createPlasmicElementProxy;

export type PlasmicSignUpForm__VariantMembers = {
  phase:
    | "_1"
    | "_2"
    | "_3"
    | "_4"
    | "_5"
    | "_6"
    | "_7"
    | "_8"
    | "_9"
    | "_10"
    | "_11"
    | "_12"
    | "_13"
    | "_14"
    | "_15";
};
export type PlasmicSignUpForm__VariantsArgs = {
  phase?: SingleChoiceArg<
    | "_1"
    | "_2"
    | "_3"
    | "_4"
    | "_5"
    | "_6"
    | "_7"
    | "_8"
    | "_9"
    | "_10"
    | "_11"
    | "_12"
    | "_13"
    | "_14"
    | "_15"
  >;
};
type VariantPropType = keyof PlasmicSignUpForm__VariantsArgs;
export const PlasmicSignUpForm__VariantProps = new Array<VariantPropType>(
  "phase"
);

export type PlasmicSignUpForm__ArgsType = {
  onSignUpStageChange?: (val: string) => void;
  onSignUpFormChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicSignUpForm__ArgsType;
export const PlasmicSignUpForm__ArgProps = new Array<ArgPropType>(
  "onSignUpStageChange",
  "onSignUpFormChange"
);

export type PlasmicSignUpForm__OverridesType = {
  root?: Flex__<"div">;
  form?: Flex__<"div">;
  field?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  field2?: Flex__<"div">;
  textInput2?: Flex__<typeof TextInput>;
  field5?: Flex__<"div">;
  year?: Flex__<typeof Select>;
  month?: Flex__<typeof Select>;
  day?: Flex__<typeof Select>;
  form2?: Flex__<"div">;
  select?: Flex__<typeof Select>;
  form3?: Flex__<"div">;
  form4?: Flex__<"div">;
  field3?: Flex__<"div">;
  textInput3?: Flex__<typeof TextInput>;
  field4?: Flex__<"div">;
  textInput4?: Flex__<typeof TextInput>;
  field6?: Flex__<"div">;
  year2?: Flex__<typeof Select>;
  month2?: Flex__<typeof Select>;
  day2?: Flex__<typeof Select>;
  form5?: Flex__<"div">;
  field8?: Flex__<"div">;
  textInput6?: Flex__<typeof TextInput>;
  field7?: Flex__<"div">;
  textInput5?: Flex__<typeof TextInput>;
  form6?: Flex__<"div">;
  numberInput2?: Flex__<typeof AntdInputNumber>;
  numberInput3?: Flex__<typeof AntdInputNumber>;
  form7?: Flex__<"div">;
  form8?: Flex__<"div">;
  form9?: Flex__<"div">;
  form10?: Flex__<"div">;
  field13?: Flex__<"div">;
  textInput8?: Flex__<typeof TextInput>;
  form11?: Flex__<"div">;
  field9?: Flex__<"div">;
  textInput7?: Flex__<typeof TextInput>;
  field11?: Flex__<"div">;
  textInput9?: Flex__<typeof TextInput>;
  field10?: Flex__<"div">;
  textarea?: Flex__<"textarea">;
  field12?: Flex__<"div">;
  numberInput?: Flex__<typeof AntdInputNumber>;
  form12?: Flex__<"div">;
  form13?: Flex__<"div">;
  field14?: Flex__<"div">;
  textInput10?: Flex__<typeof TextInput>;
  field15?: Flex__<"div">;
  textInput11?: Flex__<typeof TextInput>;
  field16?: Flex__<"div">;
  select2?: Flex__<typeof Select>;
  field17?: Flex__<"div">;
  textInput12?: Flex__<typeof TextInput>;
  form14?: Flex__<"div">;
  field18?: Flex__<"div">;
  upload?: Flex__<typeof UploadWrapper>;
  button?: Flex__<typeof AntdButton>;
  form15?: Flex__<"div">;
  field19?: Flex__<"div">;
  textInput13?: Flex__<typeof TextInput>;
  submit?: Flex__<typeof Button>;
  backIcon?: Flex__<"svg">;
};

export interface DefaultSignUpFormProps {
  onSignUpStageChange?: (val: string) => void;
  onSignUpFormChange?: (val: string) => void;
  phase?: SingleChoiceArg<
    | "_1"
    | "_2"
    | "_3"
    | "_4"
    | "_5"
    | "_6"
    | "_7"
    | "_8"
    | "_9"
    | "_10"
    | "_11"
    | "_12"
    | "_13"
    | "_14"
    | "_15"
  >;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSignUpForm__RenderFunc(props: {
  variants: PlasmicSignUpForm__VariantsArgs;
  args: PlasmicSignUpForm__ArgsType;
  overrides: PlasmicSignUpForm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "phase",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.phase
      },
      {
        path: "signUpStage",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "_1",

        onChangeProp: "onSignUpStageChange"
      },
      {
        path: "year.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "month.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "day.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "year2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "month2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "day2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "signUpForm",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                name: "",
                ssn: "",
                birthday: "",
                province: "",
                lives_at: "",
                study_hour: ""
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })(),

        onChangeProp: "onSignUpFormChange"
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "numberInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "textInput13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root,
        {
          [sty.rootphase__10]: hasVariant($state, "phase", "_10"),
          [sty.rootphase__11]: hasVariant($state, "phase", "_11"),
          [sty.rootphase__14]: hasVariant($state, "phase", "_14"),
          [sty.rootphase__15]: hasVariant($state, "phase", "_15"),
          [sty.rootphase__1]: hasVariant($state, "phase", "_1"),
          [sty.rootphase__2]: hasVariant($state, "phase", "_2"),
          [sty.rootphase__3]: hasVariant($state, "phase", "_3"),
          [sty.rootphase__7]: hasVariant($state, "phase", "_7"),
          [sty.rootphase__9]: hasVariant($state, "phase", "_9")
        }
      )}
    >
      <div
        data-plasmic-name={"form"}
        data-plasmic-override={overrides.form}
        className={classNames(projectcss.all, sty.form, {
          [sty.formphase__1]: hasVariant($state, "phase", "_1"),
          [sty.formphase__2]: hasVariant($state, "phase", "_2"),
          [sty.formphase__4]: hasVariant($state, "phase", "_4")
        })}
      >
        <div
          data-plasmic-name={"field"}
          data-plasmic-override={overrides.field}
          className={classNames(projectcss.all, sty.field)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rgXlm
            )}
          >
            {
              "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"
            }
          </div>
          <TextInput
            data-plasmic-name={"textInput"}
            data-plasmic-override={overrides.textInput}
            className={classNames("__wab_instance", sty.textInput)}
            onChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            placeholder={
              "...\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"
            }
            value={generateStateValueProp($state, ["textInput", "value"]) ?? ""}
          />
        </div>
        <div
          data-plasmic-name={"field2"}
          data-plasmic-override={overrides.field2}
          className={classNames(projectcss.all, sty.field2)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zkYYa
            )}
          >
            {"\u06a9\u062f \u0645\u0644\u06cc"}
          </div>
          <TextInput
            data-plasmic-name={"textInput2"}
            data-plasmic-override={overrides.textInput2}
            className={classNames("__wab_instance", sty.textInput2)}
            onChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput2", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            placeholder={"...\u06a9\u062f \u0645\u0644\u06cc"}
            value={
              generateStateValueProp($state, ["textInput2", "value"]) ?? ""
            }
          />
        </div>
        <div
          data-plasmic-name={"field5"}
          data-plasmic-override={overrides.field5}
          className={classNames(projectcss.all, sty.field5, {
            [sty.field5phase__1]: hasVariant($state, "phase", "_1"),
            [sty.field5phase__2]: hasVariant($state, "phase", "_2"),
            [sty.field5phase__3]: hasVariant($state, "phase", "_3"),
            [sty.field5phase__4]: hasVariant($state, "phase", "_4"),
            [sty.field5phase__5]: hasVariant($state, "phase", "_5")
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zuQP
            )}
          >
            {"\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__qtCr6)}>
            <Select
              data-plasmic-name={"year"}
              data-plasmic-override={overrides.year}
              className={classNames("__wab_instance", sty.year)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["year", "value"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              options={(() => {
                const __composite = [
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null, label: null }
                ];
                __composite["0"]["value"] = "1386";
                __composite["0"]["label"] = "1386";
                __composite["1"]["value"] = "1387";
                __composite["1"]["label"] = "1387";
                __composite["2"]["value"] = "1388";
                __composite["2"]["label"] = "1388";
                __composite["3"]["value"] = "1389";
                __composite["3"]["label"] = "1389";
                __composite["4"]["value"] = "1390";
                __composite["4"]["label"] = "1390";
                __composite["5"]["value"] = "1391";
                __composite["5"]["label"] = "1391";
                __composite["6"]["value"] = "1392";
                __composite["6"]["label"] = "1392";
                return __composite;
              })()}
              placeholder={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g6R13
                  )}
                >
                  {"\u0633\u0627\u0644"}
                </div>
              }
              value={generateStateValueProp($state, ["year", "value"])}
            />

            <Select
              data-plasmic-name={"month"}
              data-plasmic-override={overrides.month}
              className={classNames("__wab_instance", sty.month)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["month", "value"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              options={(() => {
                try {
                  return [
                    { value: 1, label: "فروردین" },
                    { value: 2, label: "اردیبهشت" },
                    { value: 3, label: "خرداد" },
                    { value: 4, label: "تیر" },
                    { value: 5, label: "مرداد" },
                    { value: 6, label: "شهریور" },
                    { value: 7, label: "مهر" },
                    { value: 8, label: "آبان" },
                    { value: 9, label: "آذر" },
                    { value: 10, label: "دی" },
                    { value: 11, label: "بهمن" },
                    { value: 12, label: "اسفند" }
                  ];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return (() => {
                      const __composite = [
                        { value: null, label: null },
                        { value: null, label: null },
                        { value: null, label: null },
                        { label: null, value: null },
                        { label: null, value: null }
                      ];
                      __composite["0"]["value"] =
                        "\u0641\u0631\u0648\u0631\u062f\u06cc\u0646";
                      __composite["0"]["label"] = "1";
                      __composite["1"]["value"] =
                        "\u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a";
                      __composite["1"]["label"] = "2";
                      __composite["2"]["value"] =
                        "\u062e\u0631\u062f\u0627\u062f";
                      __composite["2"]["label"] = "3";
                      __composite["3"]["label"] = "11";
                      __composite["3"]["value"] = "\u0628\u0647\u0645\u0646";
                      __composite["4"]["label"] = "12";
                      __composite["4"]["value"] =
                        "\u0627\u0633\u0641\u0646\u062f";
                      return __composite;
                    })();
                  }
                  throw e;
                }
              })()}
              placeholder={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sY1G
                  )}
                >
                  {"\u0645\u0627\u0647"}
                </div>
              }
              value={generateStateValueProp($state, ["month", "value"])}
            />

            <Select
              data-plasmic-name={"day"}
              data-plasmic-override={overrides.day}
              className={classNames("__wab_instance", sty.day)}
              grid={true}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["day", "value"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              options={(() => {
                try {
                  return Array.from({ length: 31 }, (_, i) => ({
                    value: (i + 1).toString(),
                    label: (i + 1).toString()
                  }));
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [
                      { value: "option1", label: "Option 1" },
                      { value: "option2", label: "Option 2" }
                    ];
                  }
                  throw e;
                }
              })()}
              placeholder={"\u0631\u0648\u0632"}
              value={generateStateValueProp($state, ["day", "value"])}
            />
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"form2"}
        data-plasmic-override={overrides.form2}
        className={classNames(projectcss.all, sty.form2, {
          [sty.form2phase__1]: hasVariant($state, "phase", "_1"),
          [sty.form2phase__2]: hasVariant($state, "phase", "_2"),
          [sty.form2phase__5]: hasVariant($state, "phase", "_5")
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__pJk1P, {
            [sty.freeBoxphase__5__pJk1PNw1Oh]: hasVariant($state, "phase", "_5")
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___04VsO,
              {
                [sty.textphase__3___04VsOeFs0S]: hasVariant(
                  $state,
                  "phase",
                  "_3"
                )
              }
            )}
          >
            {
              "\u0627\u0633\u062a\u0627\u0646 \u0645\u062d\u0644 \u0632\u0646\u062f\u06af\u06cc"
            }
          </div>
          <Select
            data-plasmic-name={"select"}
            data-plasmic-override={overrides.select}
            className={classNames("__wab_instance", sty.select)}
            onChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["select", "value"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            options={(() => {
              try {
                return [
                  { value: "آذربایجان شرقی", label: "آذربایجان شرقی" },
                  { value: "آذربایجان غربی", label: "آذربایجان غربی" },
                  { value: "اردبیل", label: "اردبیل" },
                  { value: "اصفهان", label: "اصفهان" },
                  { value: "البرز", label: "البرز" },
                  { value: "ایلام", label: "ایلام" },
                  { value: "بوشهر", label: "بوشهر" },
                  { value: "تهران", label: "تهران" },
                  { value: "چهارمحال و بختیاری", label: "چهارمحال و بختیاری" },
                  { value: "خراسان جنوبی", label: "خراسان جنوبی" },
                  { value: "خراسان رضوی", label: "خراسان رضوی" },
                  { value: "خراسان شمالی", label: "خراسان شمالی" },
                  { value: "خوزستان", label: "خوزستان" },
                  { value: "زنجان", label: "زنجان" },
                  { value: "سمنان", label: "سمنان" },
                  { value: "سیستان و بلوچستان", label: "سیستان و بلوچستان" },
                  { value: "فارس", label: "فارس" },
                  { value: "قزوین", label: "قزوین" },
                  { value: "قم", label: "قم" },
                  { value: "کردستان", label: "کردستان" },
                  { value: "کرمان", label: "کرمان" },
                  { value: "کرمانشاه", label: "کرمانشاه" },
                  {
                    value: "کهگیلویه و بویراحمد",
                    label: "کهگیلویه و بویراحمد"
                  },
                  { value: "گلستان", label: "گلستان" },
                  { value: "گیلان", label: "گیلان" },
                  { value: "لرستان", label: "لرستان" },
                  { value: "مازندران", label: "مازندران" },
                  { value: "مرکزی", label: "مرکزی" },
                  { value: "هرمزگان", label: "هرمزگان" },
                  { value: "همدان", label: "همدان" },
                  { value: "یزد", label: "یزد" }
                ];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [
                    { value: "option1", label: "Option 1" },
                    { value: "option2", label: "Option 2" }
                  ];
                }
                throw e;
              }
            })()}
            value={generateStateValueProp($state, ["select", "value"])}
          />
        </div>
      </div>
      <div
        data-plasmic-name={"form3"}
        data-plasmic-override={overrides.form3}
        className={classNames(projectcss.all, sty.form3, {
          [sty.form3phase__1]: hasVariant($state, "phase", "_1"),
          [sty.form3phase__2]: hasVariant($state, "phase", "_2"),
          [sty.form3phase__3]: hasVariant($state, "phase", "_3"),
          [sty.form3phase__4]: hasVariant($state, "phase", "_4"),
          [sty.form3phase__5]: hasVariant($state, "phase", "_5")
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__xz3Ls)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cDqZn,
              {
                [sty.textphase__3__cDqZNeFs0S]: hasVariant(
                  $state,
                  "phase",
                  "_3"
                )
              }
            )}
          >
            {
              "\u06a9\u062c\u0627 \u0632\u0646\u062f\u06af\u06cc \u0645\u06cc\u06a9\u0646\u06cc\u0646\u061f"
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ajtE9)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zCAey,
                {
                  [sty.textphase__4__zCAeyaU2R]: hasVariant(
                    $state,
                    "phase",
                    "_4"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateSignUpFormLivesAt"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpForm", "lives_at"]
                        },
                        operation: 0,
                        value: "روستا"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpFormLivesAt"] != null &&
                  typeof $steps["updateSignUpFormLivesAt"] === "object" &&
                  typeof $steps["updateSignUpFormLivesAt"].then === "function"
                ) {
                  $steps["updateSignUpFormLivesAt"] = await $steps[
                    "updateSignUpFormLivesAt"
                  ];
                }

                $steps["updateSignUpStage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpStage"]
                        },
                        operation: 0,
                        value: (() => {
                          const currentStage = parseInt(
                            $state.signUpStage.split("_")[1]
                          );
                          const nextStage = `_` + (currentStage + 1);
                          return nextStage;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpStage"] != null &&
                  typeof $steps["updateSignUpStage"] === "object" &&
                  typeof $steps["updateSignUpStage"].then === "function"
                ) {
                  $steps["updateSignUpStage"] = await $steps[
                    "updateSignUpStage"
                  ];
                }
              }}
            >
              {"\u0631\u0648\u0633\u062a\u0627"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oedTr,
                {
                  [sty.textphase__3__oedTreFs0S]: hasVariant(
                    $state,
                    "phase",
                    "_3"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateSignUpStage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpStage"]
                        },
                        operation: 0,
                        value: (() => {
                          const currentStage = parseInt(
                            $state.signUpStage.split("_")[1]
                          );
                          const nextStage = `_` + (currentStage + 1);
                          return nextStage;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpStage"] != null &&
                  typeof $steps["updateSignUpStage"] === "object" &&
                  typeof $steps["updateSignUpStage"].then === "function"
                ) {
                  $steps["updateSignUpStage"] = await $steps[
                    "updateSignUpStage"
                  ];
                }

                $steps["updateSignUpFormLivesAt"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpForm", "lives_at"]
                        },
                        operation: 0,
                        value: "شهر"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpFormLivesAt"] != null &&
                  typeof $steps["updateSignUpFormLivesAt"] === "object" &&
                  typeof $steps["updateSignUpFormLivesAt"].then === "function"
                ) {
                  $steps["updateSignUpFormLivesAt"] = await $steps[
                    "updateSignUpFormLivesAt"
                  ];
                }
              }}
            >
              {"\u0634\u0647\u0631"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1DTlV,
                {
                  [sty.textphase__2___1DTlVWNF]: hasVariant(
                    $state,
                    "phase",
                    "_2"
                  ),
                  [sty.textphase__3___1DTlVeFs0S]: hasVariant(
                    $state,
                    "phase",
                    "_3"
                  ),
                  [sty.textphase__4___1DTlVaU2R]: hasVariant(
                    $state,
                    "phase",
                    "_4"
                  ),
                  [sty.textphase__5___1DTlVNw1Oh]: hasVariant(
                    $state,
                    "phase",
                    "_5"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateSignUpStage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpStage"]
                        },
                        operation: 0,
                        value: (() => {
                          const currentStage = parseInt(
                            $state.signUpStage.split("_")[1]
                          );
                          const nextStage = `_` + (currentStage + 2);
                          return nextStage;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpStage"] != null &&
                  typeof $steps["updateSignUpStage"] === "object" &&
                  typeof $steps["updateSignUpStage"].then === "function"
                ) {
                  $steps["updateSignUpStage"] = await $steps[
                    "updateSignUpStage"
                  ];
                }

                $steps["updateSignUpFormLivesAt"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpForm", "lives_at"]
                        },
                        operation: 0,
                        value: "مرکز استان"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpFormLivesAt"] != null &&
                  typeof $steps["updateSignUpFormLivesAt"] === "object" &&
                  typeof $steps["updateSignUpFormLivesAt"].then === "function"
                ) {
                  $steps["updateSignUpFormLivesAt"] = await $steps[
                    "updateSignUpFormLivesAt"
                  ];
                }
              }}
            >
              {"\u0645\u0631\u06a9\u0632 \u0627\u0633\u062a\u0627\u0646"}
            </div>
          </div>
        </div>
      </div>
      {(
        hasVariant($state, "phase", "_4")
          ? true
          : hasVariant($state, "phase", "_2")
          ? true
          : false
      ) ? (
        <div
          data-plasmic-name={"form4"}
          data-plasmic-override={overrides.form4}
          className={classNames(projectcss.all, sty.form4, {
            [sty.form4phase__2]: hasVariant($state, "phase", "_2"),
            [sty.form4phase__4]: hasVariant($state, "phase", "_4")
          })}
        >
          <div
            data-plasmic-name={"field3"}
            data-plasmic-override={overrides.field3}
            className={classNames(projectcss.all, sty.field3)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__k2Uyr
              )}
            >
              {"\u0634\u0647\u0631"}
            </div>
            <TextInput
              data-plasmic-name={"textInput3"}
              data-plasmic-override={overrides.textInput3}
              className={classNames("__wab_instance", sty.textInput3)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput3", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={
                "...\u0634\u0647\u0631 \u0645\u062d\u0644 \u0632\u0646\u062f\u06af\u06cc"
              }
              value={
                generateStateValueProp($state, ["textInput3", "value"]) ?? ""
              }
            />
          </div>
          {(
            hasVariant($state, "phase", "_4")
              ? (() => {
                  try {
                    return $state.signUpForm.lives_at === "روستا";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : true
          ) ? (
            <div
              data-plasmic-name={"field4"}
              data-plasmic-override={overrides.field4}
              className={classNames(projectcss.all, sty.field4, {
                [sty.field4phase__3]: hasVariant($state, "phase", "_3"),
                [sty.field4phase__4]: hasVariant($state, "phase", "_4")
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vNer1
                )}
              >
                {"\u0631\u0648\u0633\u062a\u0627"}
              </div>
              <TextInput
                data-plasmic-name={"textInput4"}
                data-plasmic-override={overrides.textInput4}
                className={classNames("__wab_instance", sty.textInput4)}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["textInput4", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={
                  "...\u0646\u0627\u0645 \u0631\u0648\u0633\u062a\u0627"
                }
                value={
                  generateStateValueProp($state, ["textInput4", "value"]) ?? ""
                }
              />
            </div>
          ) : null}
          <div
            data-plasmic-name={"field6"}
            data-plasmic-override={overrides.field6}
            className={classNames(projectcss.all, sty.field6, {
              [sty.field6phase__4]: hasVariant($state, "phase", "_4"),
              [sty.field6phase__5]: hasVariant($state, "phase", "_5")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___290JJ
              )}
            >
              {"\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__k9I8J)}>
              <Select
                data-plasmic-name={"year2"}
                data-plasmic-override={overrides.year2}
                className={classNames("__wab_instance", sty.year2)}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["year2", "value"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                options={(() => {
                  const __composite = [
                    { value: null, label: null },
                    { value: null, label: null },
                    { value: null, label: null },
                    { value: null, label: null },
                    { value: null, label: null },
                    { value: null, label: null },
                    { value: null, label: null }
                  ];
                  __composite["0"]["value"] = "1386";
                  __composite["0"]["label"] = "1386";
                  __composite["1"]["value"] = "1387";
                  __composite["1"]["label"] = "1387";
                  __composite["2"]["value"] = "1388";
                  __composite["2"]["label"] = "1388";
                  __composite["3"]["value"] = "1389";
                  __composite["3"]["label"] = "1389";
                  __composite["4"]["value"] = "1390";
                  __composite["4"]["label"] = "1390";
                  __composite["5"]["value"] = "1391";
                  __composite["5"]["label"] = "1391";
                  __composite["6"]["value"] = "1392";
                  __composite["6"]["label"] = "1392";
                  return __composite;
                })()}
                placeholder={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fxz3E
                    )}
                  >
                    {"\u0633\u0627\u0644"}
                  </div>
                }
                value={generateStateValueProp($state, ["year2", "value"])}
              />

              <Select
                data-plasmic-name={"month2"}
                data-plasmic-override={overrides.month2}
                className={classNames("__wab_instance", sty.month2)}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["month2", "value"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                options={(() => {
                  try {
                    return [
                      {
                        value: 1,
                        label: "فروردین"
                      },
                      {
                        value: 2,
                        label: "اردیبهشت"
                      },
                      {
                        value: 3,
                        label: "خرداد"
                      },
                      {
                        value: 4,
                        label: "تیر"
                      },
                      {
                        value: 5,
                        label: "مرداد"
                      },
                      {
                        value: 6,
                        label: "شهریور"
                      },
                      {
                        value: 7,
                        label: "مهر"
                      },
                      {
                        value: 8,
                        label: "آبان"
                      },
                      {
                        value: 9,
                        label: "آذر"
                      },
                      {
                        value: 10,
                        label: "دی"
                      },
                      {
                        value: 11,
                        label: "بهمن"
                      },
                      {
                        value: 12,
                        label: "اسفند"
                      }
                    ];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return (() => {
                        const __composite = [
                          { value: null, label: null },
                          { value: null, label: null },
                          { value: null, label: null },
                          { label: null, value: null },
                          { label: null, value: null }
                        ];
                        __composite["0"]["value"] =
                          "\u0641\u0631\u0648\u0631\u062f\u06cc\u0646";
                        __composite["0"]["label"] = "1";
                        __composite["1"]["value"] =
                          "\u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a";
                        __composite["1"]["label"] = "2";
                        __composite["2"]["value"] =
                          "\u062e\u0631\u062f\u0627\u062f";
                        __composite["2"]["label"] = "3";
                        __composite["3"]["label"] = "11";
                        __composite["3"]["value"] = "\u0628\u0647\u0645\u0646";
                        __composite["4"]["label"] = "12";
                        __composite["4"]["value"] =
                          "\u0627\u0633\u0641\u0646\u062f";
                        return __composite;
                      })();
                    }
                    throw e;
                  }
                })()}
                placeholder={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1XmyW
                    )}
                  >
                    {"\u0645\u0627\u0647"}
                  </div>
                }
                value={generateStateValueProp($state, ["month2", "value"])}
              />

              <Select
                data-plasmic-name={"day2"}
                data-plasmic-override={overrides.day2}
                className={classNames("__wab_instance", sty.day2)}
                grid={true}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["day2", "value"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                options={(() => {
                  try {
                    return Array.from({ length: 31 }, (_, i) => ({
                      value: (i + 1).toString(),
                      label: (i + 1).toString()
                    }));
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [
                        { value: "option1", label: "Option 1" },
                        { value: "option2", label: "Option 2" }
                      ];
                    }
                    throw e;
                  }
                })()}
                placeholder={"\u0631\u0648\u0632"}
                value={generateStateValueProp($state, ["day2", "value"])}
              />
            </div>
          </div>
        </div>
      ) : null}
      <div
        data-plasmic-name={"form5"}
        data-plasmic-override={overrides.form5}
        className={classNames(projectcss.all, sty.form5, {
          [sty.form5phase__2]: hasVariant($state, "phase", "_2"),
          [sty.form5phase__4]: hasVariant($state, "phase", "_4"),
          [sty.form5phase__5]: hasVariant($state, "phase", "_5")
        })}
      >
        {(
          hasVariant($state, "phase", "_4")
            ? (() => {
                try {
                  return $state.signUpForm.lives_at === "روستا";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"field8"}
            data-plasmic-override={overrides.field8}
            className={classNames(projectcss.all, sty.field8, {
              [sty.field8phase__3]: hasVariant($state, "phase", "_3"),
              [sty.field8phase__4]: hasVariant($state, "phase", "_4")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dnVeP
              )}
            >
              {"\u0646\u0627\u0645 \u0645\u062f\u0631\u0633\u0647"}
            </div>
            <TextInput
              data-plasmic-name={"textInput6"}
              data-plasmic-override={overrides.textInput6}
              className={classNames("__wab_instance", sty.textInput6)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput6", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={
                "...\u0646\u0627\u0645 \u0645\u062f\u0631\u0633\u0647"
              }
              value={
                generateStateValueProp($state, ["textInput6", "value"]) ?? ""
              }
            />
          </div>
        ) : null}
        <div
          data-plasmic-name={"field7"}
          data-plasmic-override={overrides.field7}
          className={classNames(projectcss.all, sty.field7)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mUTvb
            )}
          >
            {
              "\u0645\u0646\u0637\u0642\u0647 \u0622\u0645\u0648\u0632\u0634\u06cc"
            }
          </div>
          <TextInput
            data-plasmic-name={"textInput5"}
            data-plasmic-override={overrides.textInput5}
            className={classNames("__wab_instance", sty.textInput5)}
            onChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput5", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            placeholder={
              "...\u0645\u0646\u0637\u0642\u0647 \u0622\u0645\u0648\u0632\u0634\u06cc"
            }
            value={
              generateStateValueProp($state, ["textInput5", "value"]) ?? ""
            }
          />
        </div>
      </div>
      <div
        data-plasmic-name={"form6"}
        data-plasmic-override={overrides.form6}
        className={classNames(projectcss.all, sty.form6, {
          [sty.form6phase__1]: hasVariant($state, "phase", "_1"),
          [sty.form6phase__2]: hasVariant($state, "phase", "_2"),
          [sty.form6phase__5]: hasVariant($state, "phase", "_5"),
          [sty.form6phase__6]: hasVariant($state, "phase", "_6"),
          [sty.form6phase__7]: hasVariant($state, "phase", "_7")
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__y0HjY, {
            [sty.freeBoxphase__2__y0HjYWNF]: hasVariant($state, "phase", "_2"),
            [sty.freeBoxphase__5__y0HjYNw1Oh]: hasVariant($state, "phase", "_5")
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__a33GR,
              {
                [sty.textphase__5__a33GRNw1Oh]: hasVariant(
                  $state,
                  "phase",
                  "_5"
                ),
                [sty.textphase__6__a33GR9Ppft]: hasVariant(
                  $state,
                  "phase",
                  "_6"
                )
              }
            )}
          >
            {hasVariant($state, "phase", "_6")
              ? "\u0645\u0639\u062f\u0644 \u067e\u0627\u06cc\u0647 \u0647\u0634\u062a\u0645"
              : hasVariant($state, "phase", "_5")
              ? "\u0645\u0639\u062f\u0644 \u067e\u0627\u06cc\u0647 \u0647\u0634\u062a\u0645"
              : "\u0686\u0646\u062f \u0633\u0627\u0639\u062a \u062f\u0631 \u0631\u0648\u0632 \u0628\u0631\u0627\u06cc \u0645\u062f\u0631\u0633\u0647 \u0645\u0637\u0627\u0644\u0639\u0647 \u0645\u06cc\u06a9\u0646\u06cc\u0646\u061f"}
          </div>
          <AntdInputNumber
            data-plasmic-name={"numberInput2"}
            data-plasmic-override={overrides.numberInput2}
            className={classNames("__wab_instance", sty.numberInput2, {
              [sty.numberInput2phase__2]: hasVariant($state, "phase", "_2"),
              [sty.numberInput2phase__5]: hasVariant($state, "phase", "_5"),
              [sty.numberInput2phase__6]: hasVariant($state, "phase", "_6")
            })}
            controls={hasVariant($state, "phase", "_5") ? true : undefined}
            max={hasVariant($state, "phase", "_5") ? 24 : 20}
            min={hasVariant($state, "phase", "_5") ? 0 : 0}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "numberInput2",
                "value"
              ]).apply(null, eventArgs);
            }}
            placeholder={hasVariant($state, "phase", "_5") ? "1" : "18.75"}
            step={0.05}
            type={"number"}
            value={generateStateValueProp($state, ["numberInput2", "value"])}
          />
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__lhmYa, {
            [sty.freeBoxphase__2__lhmYaWNF]: hasVariant($state, "phase", "_2"),
            [sty.freeBoxphase__5__lhmYaNw1Oh]: hasVariant($state, "phase", "_5")
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__t8Svj,
              {
                [sty.textphase__5__t8SvjNw1Oh]: hasVariant(
                  $state,
                  "phase",
                  "_5"
                )
              }
            )}
          >
            {
              "\u0686\u0646\u062f \u0633\u0627\u0639\u062a \u062f\u0631 \u0631\u0648\u0632 \u0628\u0631\u0627\u06cc \u0645\u062f\u0631\u0633\u0647 \u0645\u0637\u0627\u0644\u0639\u0647 \u0645\u06cc\u06a9\u0646\u06cc\u0646\u061f"
            }
          </div>
          <AntdInputNumber
            data-plasmic-name={"numberInput3"}
            data-plasmic-override={overrides.numberInput3}
            className={classNames("__wab_instance", sty.numberInput3, {
              [sty.numberInput3phase__2]: hasVariant($state, "phase", "_2"),
              [sty.numberInput3phase__5]: hasVariant($state, "phase", "_5")
            })}
            controls={hasVariant($state, "phase", "_5") ? true : undefined}
            max={hasVariant($state, "phase", "_5") ? 24 : undefined}
            min={hasVariant($state, "phase", "_5") ? 0 : undefined}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "numberInput3",
                "value"
              ]).apply(null, eventArgs);
            }}
            placeholder={hasVariant($state, "phase", "_5") ? "1" : undefined}
            type={"number"}
            value={generateStateValueProp($state, ["numberInput3", "value"])}
          />
        </div>
      </div>
      <div
        data-plasmic-name={"form7"}
        data-plasmic-override={overrides.form7}
        className={classNames(projectcss.all, sty.form7, {
          [sty.form7phase__1]: hasVariant($state, "phase", "_1"),
          [sty.form7phase__2]: hasVariant($state, "phase", "_2"),
          [sty.form7phase__3]: hasVariant($state, "phase", "_3"),
          [sty.form7phase__4]: hasVariant($state, "phase", "_4"),
          [sty.form7phase__5]: hasVariant($state, "phase", "_5"),
          [sty.form7phase__6]: hasVariant($state, "phase", "_6"),
          [sty.form7phase__7]: hasVariant($state, "phase", "_7")
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox___1WiuN)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nqLk,
              {
                [sty.textphase__3__nqLkeFs0S]: hasVariant($state, "phase", "_3")
              }
            )}
          >
            {
              "\u0622\u06cc\u0627 \u062f\u0631 \u0622\u0632\u0645\u0648\u0646 \u0647\u0627\u06cc \u0645\u0648\u0633\u0633\u0627\u062a \u0645\u062e\u062a\u0644\u0641 \u0645\u0627\u0646\u0646\u062f \u0642\u0644\u0645\u0686\u06cc \u0634\u0631\u06a9\u062a \u0645\u06cc\u06a9\u0646\u06cc\u062f\u061f"
            }
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__qawcx, {
              [sty.freeBoxphase__6__qawcx9Ppft]: hasVariant(
                $state,
                "phase",
                "_6"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pxV1G,
                {
                  [sty.textphase__4__pxV1GaU2R]: hasVariant(
                    $state,
                    "phase",
                    "_4"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateSignUpFormLivesAt"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpForm", "lives_at"]
                        },
                        operation: 0,
                        value: "روستا"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpFormLivesAt"] != null &&
                  typeof $steps["updateSignUpFormLivesAt"] === "object" &&
                  typeof $steps["updateSignUpFormLivesAt"].then === "function"
                ) {
                  $steps["updateSignUpFormLivesAt"] = await $steps[
                    "updateSignUpFormLivesAt"
                  ];
                }

                $steps["updateSignUpStage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpStage"]
                        },
                        operation: 0,
                        value: (() => {
                          const currentStage = parseInt(
                            $state.signUpStage.split("_")[1]
                          );
                          const nextStage = `_` + (currentStage + 2);
                          return nextStage;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpStage"] != null &&
                  typeof $steps["updateSignUpStage"] === "object" &&
                  typeof $steps["updateSignUpStage"].then === "function"
                ) {
                  $steps["updateSignUpStage"] = await $steps[
                    "updateSignUpStage"
                  ];
                }
              }}
            >
              {"\u062e\u06cc\u0631"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ofyZb,
                {
                  [sty.textphase__3__ofyZbeFs0S]: hasVariant(
                    $state,
                    "phase",
                    "_3"
                  ),
                  [sty.textphase__8__ofyZbGpcXp]: hasVariant(
                    $state,
                    "phase",
                    "_8"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateSignUpStage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpStage"]
                        },
                        operation: 0,
                        value: (() => {
                          const currentStage = parseInt(
                            $state.signUpStage.split("_")[1]
                          );
                          const nextStage = `_` + (currentStage + 1);
                          return nextStage;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpStage"] != null &&
                  typeof $steps["updateSignUpStage"] === "object" &&
                  typeof $steps["updateSignUpStage"].then === "function"
                ) {
                  $steps["updateSignUpStage"] = await $steps[
                    "updateSignUpStage"
                  ];
                }

                $steps["updateSignUpFormLivesAt"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpForm", "lives_at"]
                        },
                        operation: 0,
                        value: "شهر"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpFormLivesAt"] != null &&
                  typeof $steps["updateSignUpFormLivesAt"] === "object" &&
                  typeof $steps["updateSignUpFormLivesAt"].then === "function"
                ) {
                  $steps["updateSignUpFormLivesAt"] = await $steps[
                    "updateSignUpFormLivesAt"
                  ];
                }
              }}
            >
              {"\u0628\u0644\u0647"}
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"form8"}
        data-plasmic-override={overrides.form8}
        className={classNames(projectcss.all, sty.form8, {
          [sty.form8phase__1]: hasVariant($state, "phase", "_1"),
          [sty.form8phase__2]: hasVariant($state, "phase", "_2"),
          [sty.form8phase__3]: hasVariant($state, "phase", "_3"),
          [sty.form8phase__4]: hasVariant($state, "phase", "_4"),
          [sty.form8phase__5]: hasVariant($state, "phase", "_5"),
          [sty.form8phase__6]: hasVariant($state, "phase", "_6"),
          [sty.form8phase__7]: hasVariant($state, "phase", "_7"),
          [sty.form8phase__8]: hasVariant($state, "phase", "_8"),
          [sty.form8phase__9]: hasVariant($state, "phase", "_9")
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__viPav)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xfqLw,
              {
                [sty.textphase__3__xfqLweFs0S]: hasVariant(
                  $state,
                  "phase",
                  "_3"
                )
              }
            )}
          >
            {
              "\u0627\u0632 \u06a9\u062f\u0627\u0645 \u0645\u0648\u0633\u0633\u0647 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc\u06a9\u0646\u06cc\u0646\u061f"
            }
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___88PWs, {
              [sty.freeBoxphase__6___88PWs9Ppft]: hasVariant(
                $state,
                "phase",
                "_6"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rpLjv,
                {
                  [sty.textphase__4__rpLjvaU2R]: hasVariant(
                    $state,
                    "phase",
                    "_4"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateSignUpFormLivesAt"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpForm", "lives_at"]
                        },
                        operation: 0,
                        value: "روستا"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpFormLivesAt"] != null &&
                  typeof $steps["updateSignUpFormLivesAt"] === "object" &&
                  typeof $steps["updateSignUpFormLivesAt"].then === "function"
                ) {
                  $steps["updateSignUpFormLivesAt"] = await $steps[
                    "updateSignUpFormLivesAt"
                  ];
                }

                $steps["updateSignUpStage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpStage"]
                        },
                        operation: 0,
                        value: (() => {
                          const currentStage = parseInt(
                            $state.signUpStage.split("_")[1]
                          );
                          const nextStage = `_` + (currentStage + 1);
                          return nextStage;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpStage"] != null &&
                  typeof $steps["updateSignUpStage"] === "object" &&
                  typeof $steps["updateSignUpStage"].then === "function"
                ) {
                  $steps["updateSignUpStage"] = await $steps[
                    "updateSignUpStage"
                  ];
                }
              }}
            >
              {"\u06af\u0627\u062c"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__r5TdD,
                {
                  [sty.textphase__3__r5TdDeFs0S]: hasVariant(
                    $state,
                    "phase",
                    "_3"
                  ),
                  [sty.textphase__8__r5TdDGpcXp]: hasVariant(
                    $state,
                    "phase",
                    "_8"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateSignUpStage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpStage"]
                        },
                        operation: 0,
                        value: (() => {
                          const currentStage = parseInt(
                            $state.signUpStage.split("_")[1]
                          );
                          const nextStage = `_` + (currentStage + 1);
                          return nextStage;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpStage"] != null &&
                  typeof $steps["updateSignUpStage"] === "object" &&
                  typeof $steps["updateSignUpStage"].then === "function"
                ) {
                  $steps["updateSignUpStage"] = await $steps[
                    "updateSignUpStage"
                  ];
                }

                $steps["updateSignUpFormLivesAt"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpForm", "lives_at"]
                        },
                        operation: 0,
                        value: "شهر"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpFormLivesAt"] != null &&
                  typeof $steps["updateSignUpFormLivesAt"] === "object" &&
                  typeof $steps["updateSignUpFormLivesAt"].then === "function"
                ) {
                  $steps["updateSignUpFormLivesAt"] = await $steps[
                    "updateSignUpFormLivesAt"
                  ];
                }
              }}
            >
              {"\u0642\u0644\u0645\u0686\u06cc"}
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__lK0Sh, {
              [sty.freeBoxphase__6__lK0Sh9Ppft]: hasVariant(
                $state,
                "phase",
                "_6"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__r5Ty,
                {
                  [sty.textphase__4__r5TYaU2R]: hasVariant(
                    $state,
                    "phase",
                    "_4"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateSignUpFormLivesAt"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpForm", "lives_at"]
                        },
                        operation: 0,
                        value: "روستا"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpFormLivesAt"] != null &&
                  typeof $steps["updateSignUpFormLivesAt"] === "object" &&
                  typeof $steps["updateSignUpFormLivesAt"].then === "function"
                ) {
                  $steps["updateSignUpFormLivesAt"] = await $steps[
                    "updateSignUpFormLivesAt"
                  ];
                }

                $steps["updateSignUpStage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpStage"]
                        },
                        operation: 0,
                        value: (() => {
                          const currentStage = parseInt(
                            $state.signUpStage.split("_")[1]
                          );
                          const nextStage = `_` + (currentStage + 1);
                          return nextStage;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpStage"] != null &&
                  typeof $steps["updateSignUpStage"] === "object" &&
                  typeof $steps["updateSignUpStage"].then === "function"
                ) {
                  $steps["updateSignUpStage"] = await $steps[
                    "updateSignUpStage"
                  ];
                }
              }}
            >
              {"\u0633\u0627\u06cc\u0631"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bQ0DL,
                {
                  [sty.textphase__4__bQ0DLaU2R]: hasVariant(
                    $state,
                    "phase",
                    "_4"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateSignUpFormLivesAt"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpForm", "lives_at"]
                        },
                        operation: 0,
                        value: "روستا"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpFormLivesAt"] != null &&
                  typeof $steps["updateSignUpFormLivesAt"] === "object" &&
                  typeof $steps["updateSignUpFormLivesAt"].then === "function"
                ) {
                  $steps["updateSignUpFormLivesAt"] = await $steps[
                    "updateSignUpFormLivesAt"
                  ];
                }

                $steps["updateSignUpStage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpStage"]
                        },
                        operation: 0,
                        value: (() => {
                          const currentStage = parseInt(
                            $state.signUpStage.split("_")[1]
                          );
                          const nextStage = `_` + (currentStage + 1);
                          return nextStage;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpStage"] != null &&
                  typeof $steps["updateSignUpStage"] === "object" &&
                  typeof $steps["updateSignUpStage"].then === "function"
                ) {
                  $steps["updateSignUpStage"] = await $steps[
                    "updateSignUpStage"
                  ];
                }
              }}
            >
              {"\u0645\u0627\u0632"}
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"form9"}
        data-plasmic-override={overrides.form9}
        className={classNames(projectcss.all, sty.form9, {
          [sty.form9phase__1]: hasVariant($state, "phase", "_1"),
          [sty.form9phase__2]: hasVariant($state, "phase", "_2"),
          [sty.form9phase__3]: hasVariant($state, "phase", "_3"),
          [sty.form9phase__4]: hasVariant($state, "phase", "_4"),
          [sty.form9phase__5]: hasVariant($state, "phase", "_5"),
          [sty.form9phase__6]: hasVariant($state, "phase", "_6"),
          [sty.form9phase__7]: hasVariant($state, "phase", "_7"),
          [sty.form9phase__9]: hasVariant($state, "phase", "_9")
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox___5BcZu)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fj1E6,
              {
                [sty.textphase__3__fj1E6EFs0S]: hasVariant(
                  $state,
                  "phase",
                  "_3"
                )
              }
            )}
          >
            {
              "\u0622\u06cc\u0627 \u06a9\u0644\u0627\u0633\u06cc \u0628\u062c\u0632 \u0627\u0644\u0645\u067e\u06cc\u0627\u062f \u0645\u06cc\u0631\u06cc\u0646\u061f"
            }
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__lhdwM, {
              [sty.freeBoxphase__6__lhdwM9Ppft]: hasVariant(
                $state,
                "phase",
                "_6"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9VlQr,
                {
                  [sty.textphase__4___9VlQRaU2R]: hasVariant(
                    $state,
                    "phase",
                    "_4"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateSignUpFormLivesAt"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpForm", "lives_at"]
                        },
                        operation: 0,
                        value: "روستا"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpFormLivesAt"] != null &&
                  typeof $steps["updateSignUpFormLivesAt"] === "object" &&
                  typeof $steps["updateSignUpFormLivesAt"].then === "function"
                ) {
                  $steps["updateSignUpFormLivesAt"] = await $steps[
                    "updateSignUpFormLivesAt"
                  ];
                }

                $steps["updateSignUpStage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpStage"]
                        },
                        operation: 0,
                        value: (() => {
                          const currentStage = parseInt(
                            $state.signUpStage.split("_")[1]
                          );
                          const nextStage = `_` + (currentStage + 2);
                          return nextStage;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpStage"] != null &&
                  typeof $steps["updateSignUpStage"] === "object" &&
                  typeof $steps["updateSignUpStage"].then === "function"
                ) {
                  $steps["updateSignUpStage"] = await $steps[
                    "updateSignUpStage"
                  ];
                }
              }}
            >
              {"\u062e\u06cc\u0631"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7AOcv,
                {
                  [sty.textphase__3___7AOcveFs0S]: hasVariant(
                    $state,
                    "phase",
                    "_3"
                  ),
                  [sty.textphase__8___7AOcvGpcXp]: hasVariant(
                    $state,
                    "phase",
                    "_8"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateSignUpStage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpStage"]
                        },
                        operation: 0,
                        value: (() => {
                          const currentStage = parseInt(
                            $state.signUpStage.split("_")[1]
                          );
                          const nextStage = `_` + (currentStage + 1);
                          return nextStage;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpStage"] != null &&
                  typeof $steps["updateSignUpStage"] === "object" &&
                  typeof $steps["updateSignUpStage"].then === "function"
                ) {
                  $steps["updateSignUpStage"] = await $steps[
                    "updateSignUpStage"
                  ];
                }

                $steps["updateSignUpFormLivesAt"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpForm", "lives_at"]
                        },
                        operation: 0,
                        value: "شهر"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpFormLivesAt"] != null &&
                  typeof $steps["updateSignUpFormLivesAt"] === "object" &&
                  typeof $steps["updateSignUpFormLivesAt"].then === "function"
                ) {
                  $steps["updateSignUpFormLivesAt"] = await $steps[
                    "updateSignUpFormLivesAt"
                  ];
                }
              }}
            >
              {"\u0628\u0644\u0647"}
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"form10"}
        data-plasmic-override={overrides.form10}
        className={classNames(projectcss.all, sty.form10, {
          [sty.form10phase__10]: hasVariant($state, "phase", "_10"),
          [sty.form10phase__1]: hasVariant($state, "phase", "_1"),
          [sty.form10phase__2]: hasVariant($state, "phase", "_2"),
          [sty.form10phase__3]: hasVariant($state, "phase", "_3"),
          [sty.form10phase__4]: hasVariant($state, "phase", "_4"),
          [sty.form10phase__5]: hasVariant($state, "phase", "_5"),
          [sty.form10phase__6]: hasVariant($state, "phase", "_6"),
          [sty.form10phase__7]: hasVariant($state, "phase", "_7"),
          [sty.form10phase__8]: hasVariant($state, "phase", "_8"),
          [sty.form10phase__9]: hasVariant($state, "phase", "_9")
        })}
      >
        {(
          hasVariant($state, "phase", "_7")
            ? true
            : hasVariant($state, "phase", "_4")
            ? (() => {
                try {
                  return $state.signUpForm.lives_at === "روستا";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"field13"}
            data-plasmic-override={overrides.field13}
            className={classNames(projectcss.all, sty.field13, {
              [sty.field13phase__3]: hasVariant($state, "phase", "_3"),
              [sty.field13phase__4]: hasVariant($state, "phase", "_4"),
              [sty.field13phase__7]: hasVariant($state, "phase", "_7")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ub4S
              )}
            >
              {
                "\u0646\u0627\u0645 \u06a9\u0644\u0627\u0633 \u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0645\u06cc\u0631\u06cc\u0646 \u0631\u0648 \u0628\u0646\u0648\u06cc\u0633\u06cc\u0646"
              }
            </div>
            <TextInput
              data-plasmic-name={"textInput8"}
              data-plasmic-override={overrides.textInput8}
              className={classNames("__wab_instance", sty.textInput8)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput8", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={
                "...\u06a9\u0644\u0627\u0633 1 , \u06a9\u0644\u0627\u0633 2, \u06a9\u0644\u0627\u0633 3"
              }
              value={
                generateStateValueProp($state, ["textInput8", "value"]) ?? ""
              }
            />
          </div>
        ) : null}
      </div>
      <div
        data-plasmic-name={"form11"}
        data-plasmic-override={overrides.form11}
        className={classNames(projectcss.all, sty.form11, {
          [sty.form11phase__10]: hasVariant($state, "phase", "_10"),
          [sty.form11phase__11]: hasVariant($state, "phase", "_11"),
          [sty.form11phase__1]: hasVariant($state, "phase", "_1"),
          [sty.form11phase__2]: hasVariant($state, "phase", "_2"),
          [sty.form11phase__3]: hasVariant($state, "phase", "_3"),
          [sty.form11phase__4]: hasVariant($state, "phase", "_4"),
          [sty.form11phase__5]: hasVariant($state, "phase", "_5"),
          [sty.form11phase__6]: hasVariant($state, "phase", "_6"),
          [sty.form11phase__7]: hasVariant($state, "phase", "_7"),
          [sty.form11phase__8]: hasVariant($state, "phase", "_8"),
          [sty.form11phase__9]: hasVariant($state, "phase", "_9")
        })}
      >
        {(
          hasVariant($state, "phase", "_7")
            ? true
            : hasVariant($state, "phase", "_4")
            ? (() => {
                try {
                  return $state.signUpForm.lives_at === "روستا";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"field9"}
            data-plasmic-override={overrides.field9}
            className={classNames(projectcss.all, sty.field9, {
              [sty.field9phase__3]: hasVariant($state, "phase", "_3"),
              [sty.field9phase__4]: hasVariant($state, "phase", "_4"),
              [sty.field9phase__7]: hasVariant($state, "phase", "_7")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ywrA3
              )}
            >
              {
                "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc \u067e\u062f\u0631"
              }
            </div>
            <TextInput
              data-plasmic-name={"textInput7"}
              data-plasmic-override={overrides.textInput7}
              className={classNames("__wab_instance", sty.textInput7)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput7", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={``}
              value={
                generateStateValueProp($state, ["textInput7", "value"]) ?? ""
              }
            />
          </div>
        ) : null}
        {(
          hasVariant($state, "phase", "_4")
            ? (() => {
                try {
                  return $state.signUpForm.lives_at === "روستا";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"field11"}
            data-plasmic-override={overrides.field11}
            className={classNames(projectcss.all, sty.field11, {
              [sty.field11phase__3]: hasVariant($state, "phase", "_3"),
              [sty.field11phase__4]: hasVariant($state, "phase", "_4")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mD7E
              )}
            >
              {
                "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc \u0645\u0627\u062f\u0631"
              }
            </div>
            <TextInput
              data-plasmic-name={"textInput9"}
              data-plasmic-override={overrides.textInput9}
              className={classNames("__wab_instance", sty.textInput9)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput9", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={``}
              value={
                generateStateValueProp($state, ["textInput9", "value"]) ?? ""
              }
            />
          </div>
        ) : null}
        <div
          data-plasmic-name={"field10"}
          data-plasmic-override={overrides.field10}
          className={classNames(projectcss.all, sty.field10)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zKhhJ
            )}
          >
            {
              "\u0622\u062f\u0631\u0633 \u062f\u0642\u06cc\u0642 \u0645\u062d\u0644 \u0633\u06a9\u0648\u0646\u062a"
            }
          </div>
          <textarea
            data-plasmic-name={"textarea"}
            data-plasmic-override={overrides.textarea}
            className={classNames(
              projectcss.all,
              projectcss.textarea,
              sty.textarea
            )}
            onChange={async (...eventArgs: any) => {
              (e => {
                generateStateOnChangeProp($state, ["textarea", "value"])(
                  e.target.value
                );
              }).apply(null, eventArgs);
            }}
            placeholder={
              "\u0622\u062f\u0631\u0633 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
            }
            ref={ref => {
              $refs["textarea"] = ref;
            }}
            value={generateStateValueProp($state, ["textarea", "value"]) ?? ""}
          />
        </div>
        <div
          data-plasmic-name={"field12"}
          data-plasmic-override={overrides.field12}
          className={classNames(projectcss.all, sty.field12)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mlp2E
            )}
          >
            {
              "\u062a\u0639\u062f\u0627\u062f \u062e\u0648\u0627\u0647\u0631 \u0648 \u0628\u0631\u0627\u062f\u0631"
            }
          </div>
          <AntdInputNumber
            data-plasmic-name={"numberInput"}
            data-plasmic-override={overrides.numberInput}
            className={classNames("__wab_instance", sty.numberInput, {
              [sty.numberInputphase__6]: hasVariant($state, "phase", "_6"),
              [sty.numberInputphase__7]: hasVariant($state, "phase", "_7")
            })}
            controls={true}
            min={0}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["numberInput", "value"]).apply(
                null,
                eventArgs
              );
            }}
            type={"number"}
            value={generateStateValueProp($state, ["numberInput", "value"])}
          />
        </div>
      </div>
      <div
        data-plasmic-name={"form12"}
        data-plasmic-override={overrides.form12}
        className={classNames(projectcss.all, sty.form12, {
          [sty.form12phase__12]: hasVariant($state, "phase", "_12"),
          [sty.form12phase__1]: hasVariant($state, "phase", "_1"),
          [sty.form12phase__2]: hasVariant($state, "phase", "_2"),
          [sty.form12phase__3]: hasVariant($state, "phase", "_3"),
          [sty.form12phase__4]: hasVariant($state, "phase", "_4"),
          [sty.form12phase__5]: hasVariant($state, "phase", "_5"),
          [sty.form12phase__6]: hasVariant($state, "phase", "_6"),
          [sty.form12phase__7]: hasVariant($state, "phase", "_7"),
          [sty.form12phase__9]: hasVariant($state, "phase", "_9")
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__tvu4I)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___9TgVk,
              {
                [sty.textphase__3___9TgVkeFs0S]: hasVariant(
                  $state,
                  "phase",
                  "_3"
                ),
                [sty.textphase__9___9TgVk15OUr]: hasVariant(
                  $state,
                  "phase",
                  "_9"
                )
              }
            )}
          >
            {
              "\u0622\u06cc\u0627 \u0645\u06cc\u062e\u0648\u0627\u06cc\u0646 \u0628\u0631\u0627\u06cc \u0628\u0648\u0631\u0633\u06cc\u0647 \u06cc\u0627 \u062a\u062e\u0641\u06cc\u0641 \u0627\u0642\u062f\u0627\u0645 \u06a9\u0646\u06cc\u0646\u061f"
            }
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__rsHir, {
              [sty.freeBoxphase__6__rsHir9Ppft]: hasVariant(
                $state,
                "phase",
                "_6"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xwcbL,
                {
                  [sty.textphase__4__xwcbLaU2R]: hasVariant(
                    $state,
                    "phase",
                    "_4"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateSignUpFormLivesAt"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpForm", "lives_at"]
                        },
                        operation: 0,
                        value: "روستا"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpFormLivesAt"] != null &&
                  typeof $steps["updateSignUpFormLivesAt"] === "object" &&
                  typeof $steps["updateSignUpFormLivesAt"].then === "function"
                ) {
                  $steps["updateSignUpFormLivesAt"] = await $steps[
                    "updateSignUpFormLivesAt"
                  ];
                }

                $steps["updateSignUpStage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpStage"]
                        },
                        operation: 0,
                        value: (() => {
                          const currentStage = parseInt(
                            $state.signUpStage.split("_")[1]
                          );
                          const nextStage = `_` + (currentStage + 2);
                          return nextStage;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpStage"] != null &&
                  typeof $steps["updateSignUpStage"] === "object" &&
                  typeof $steps["updateSignUpStage"].then === "function"
                ) {
                  $steps["updateSignUpStage"] = await $steps[
                    "updateSignUpStage"
                  ];
                }
              }}
            >
              {"\u062e\u06cc\u0631"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8Tsb,
                {
                  [sty.textphase__3___8TsbeFs0S]: hasVariant(
                    $state,
                    "phase",
                    "_3"
                  ),
                  [sty.textphase__8___8TsbGpcXp]: hasVariant(
                    $state,
                    "phase",
                    "_8"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateSignUpStage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpStage"]
                        },
                        operation: 0,
                        value: (() => {
                          const currentStage = parseInt(
                            $state.signUpStage.split("_")[1]
                          );
                          const nextStage = `_` + (currentStage + 1);
                          return nextStage;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpStage"] != null &&
                  typeof $steps["updateSignUpStage"] === "object" &&
                  typeof $steps["updateSignUpStage"].then === "function"
                ) {
                  $steps["updateSignUpStage"] = await $steps[
                    "updateSignUpStage"
                  ];
                }

                $steps["updateSignUpFormLivesAt"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["signUpForm", "lives_at"]
                        },
                        operation: 0,
                        value: "شهر"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSignUpFormLivesAt"] != null &&
                  typeof $steps["updateSignUpFormLivesAt"] === "object" &&
                  typeof $steps["updateSignUpFormLivesAt"].then === "function"
                ) {
                  $steps["updateSignUpFormLivesAt"] = await $steps[
                    "updateSignUpFormLivesAt"
                  ];
                }
              }}
            >
              {"\u0628\u0644\u0647"}
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"form13"}
        data-plasmic-override={overrides.form13}
        className={classNames(projectcss.all, sty.form13, {
          [sty.form13phase__10]: hasVariant($state, "phase", "_10"),
          [sty.form13phase__11]: hasVariant($state, "phase", "_11"),
          [sty.form13phase__13]: hasVariant($state, "phase", "_13"),
          [sty.form13phase__1]: hasVariant($state, "phase", "_1"),
          [sty.form13phase__2]: hasVariant($state, "phase", "_2"),
          [sty.form13phase__3]: hasVariant($state, "phase", "_3"),
          [sty.form13phase__4]: hasVariant($state, "phase", "_4"),
          [sty.form13phase__5]: hasVariant($state, "phase", "_5"),
          [sty.form13phase__6]: hasVariant($state, "phase", "_6"),
          [sty.form13phase__7]: hasVariant($state, "phase", "_7"),
          [sty.form13phase__8]: hasVariant($state, "phase", "_8"),
          [sty.form13phase__9]: hasVariant($state, "phase", "_9")
        })}
      >
        {(
          hasVariant($state, "phase", "_7")
            ? true
            : hasVariant($state, "phase", "_4")
            ? (() => {
                try {
                  return $state.signUpForm.lives_at === "روستا";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"field14"}
            data-plasmic-override={overrides.field14}
            className={classNames(projectcss.all, sty.field14, {
              [sty.field14phase__3]: hasVariant($state, "phase", "_3"),
              [sty.field14phase__4]: hasVariant($state, "phase", "_4"),
              [sty.field14phase__7]: hasVariant($state, "phase", "_7")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bKuK
              )}
            >
              {"\u0634\u063a\u0644 \u067e\u062f\u0631"}
            </div>
            <TextInput
              data-plasmic-name={"textInput10"}
              data-plasmic-override={overrides.textInput10}
              className={classNames("__wab_instance", sty.textInput10)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput10", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={``}
              value={
                generateStateValueProp($state, ["textInput10", "value"]) ?? ""
              }
            />
          </div>
        ) : null}
        {(
          hasVariant($state, "phase", "_4")
            ? (() => {
                try {
                  return $state.signUpForm.lives_at === "روستا";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"field15"}
            data-plasmic-override={overrides.field15}
            className={classNames(projectcss.all, sty.field15, {
              [sty.field15phase__3]: hasVariant($state, "phase", "_3"),
              [sty.field15phase__4]: hasVariant($state, "phase", "_4")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qj3Op
              )}
            >
              {"\u0634\u063a\u0644 \u0645\u0627\u062f\u0631"}
            </div>
            <TextInput
              data-plasmic-name={"textInput11"}
              data-plasmic-override={overrides.textInput11}
              className={classNames("__wab_instance", sty.textInput11)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput11", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={``}
              value={
                generateStateValueProp($state, ["textInput11", "value"]) ?? ""
              }
            />
          </div>
        ) : null}
        <div
          data-plasmic-name={"field16"}
          data-plasmic-override={overrides.field16}
          className={classNames(projectcss.all, sty.field16)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xFrwz
            )}
          >
            {"\u0648\u0636\u0639\u06cc\u062a \u0645\u0633\u06a9\u0646"}
          </div>
          <Select
            data-plasmic-name={"select2"}
            data-plasmic-override={overrides.select2}
            className={classNames("__wab_instance", sty.select2)}
            onChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["select2", "value"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            options={(() => {
              const __composite = [
                { value: null, label: null },
                { value: null, label: null }
              ];
              __composite["0"]["value"] =
                "\u0627\u0633\u062a\u06cc\u062c\u0627\u0631\u06cc";
              __composite["0"]["label"] =
                "\u0627\u0633\u062a\u06cc\u062c\u0627\u0631\u06cc";
              __composite["1"]["value"] = "\u0634\u062e\u0635\u06cc";
              __composite["1"]["label"] = "\u0634\u062e\u0635\u06cc";
              return __composite;
            })()}
            value={generateStateValueProp($state, ["select2", "value"])}
          />
        </div>
        {(
          hasVariant($state, "phase", "_4")
            ? (() => {
                try {
                  return $state.signUpForm.lives_at === "روستا";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"field17"}
            data-plasmic-override={overrides.field17}
            className={classNames(projectcss.all, sty.field17, {
              [sty.field17phase__3]: hasVariant($state, "phase", "_3"),
              [sty.field17phase__4]: hasVariant($state, "phase", "_4")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fPqgy
              )}
            >
              {
                "\u0627\u06af\u0631 \u062a\u062d\u062a \u067e\u0648\u0634\u0634 \u0627\u0631\u06af\u0627\u0646 \u062e\u0627\u0635\u06cc \u0647\u0633\u062a\u06cc\u062f \u0646\u0627\u0645 \u0622\u0646 \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f"
              }
            </div>
            <TextInput
              data-plasmic-name={"textInput12"}
              data-plasmic-override={overrides.textInput12}
              className={classNames("__wab_instance", sty.textInput12)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput12", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={``}
              value={
                generateStateValueProp($state, ["textInput12", "value"]) ?? ""
              }
            />
          </div>
        ) : null}
      </div>
      <div
        data-plasmic-name={"form14"}
        data-plasmic-override={overrides.form14}
        className={classNames(projectcss.all, sty.form14, {
          [sty.form14phase__10]: hasVariant($state, "phase", "_10"),
          [sty.form14phase__11]: hasVariant($state, "phase", "_11"),
          [sty.form14phase__13]: hasVariant($state, "phase", "_13"),
          [sty.form14phase__14]: hasVariant($state, "phase", "_14"),
          [sty.form14phase__1]: hasVariant($state, "phase", "_1"),
          [sty.form14phase__2]: hasVariant($state, "phase", "_2"),
          [sty.form14phase__3]: hasVariant($state, "phase", "_3"),
          [sty.form14phase__4]: hasVariant($state, "phase", "_4"),
          [sty.form14phase__5]: hasVariant($state, "phase", "_5"),
          [sty.form14phase__6]: hasVariant($state, "phase", "_6"),
          [sty.form14phase__7]: hasVariant($state, "phase", "_7"),
          [sty.form14phase__8]: hasVariant($state, "phase", "_8"),
          [sty.form14phase__9]: hasVariant($state, "phase", "_9")
        })}
      >
        {(
          hasVariant($state, "phase", "_7")
            ? true
            : hasVariant($state, "phase", "_4")
            ? (() => {
                try {
                  return $state.signUpForm.lives_at === "روستا";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"field18"}
            data-plasmic-override={overrides.field18}
            className={classNames(projectcss.all, sty.field18, {
              [sty.field18phase__3]: hasVariant($state, "phase", "_3"),
              [sty.field18phase__4]: hasVariant($state, "phase", "_4"),
              [sty.field18phase__7]: hasVariant($state, "phase", "_7")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iIs5
              )}
            >
              {
                "\u06cc\u06a9 \u0639\u06a9\u0633 \u067e\u0631\u0633\u0646\u0644\u06cc 4*3 \u0622\u067e\u0644\u0648\u062f \u06a9\u0646\u06cc\u062f"
              }
            </div>
            <UploadWrapper
              data-plasmic-name={"upload"}
              data-plasmic-override={overrides.upload}
              accept={"image/*"}
              className={classNames("__wab_instance", sty.upload, {
                [sty.uploadphase__13]: hasVariant($state, "phase", "_13"),
                [sty.uploadphase__14]: hasVariant($state, "phase", "_14")
              })}
              dragAndDropFiles={true}
              files={generateStateValueProp($state, ["upload", "files"])}
              listType={
                hasVariant($state, "phase", "_14") ? "picture" : undefined
              }
              onFilesChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["upload", "files"]).apply(
                  null,
                  eventArgs
                );
              }}
              showUploadList={true}
            >
              <AntdButton
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pbU
                  )}
                >
                  {"Upload"}
                </div>
              </AntdButton>
            </UploadWrapper>
          </div>
        ) : null}
      </div>
      <div
        data-plasmic-name={"form15"}
        data-plasmic-override={overrides.form15}
        className={classNames(projectcss.all, sty.form15, {
          [sty.form15phase__10]: hasVariant($state, "phase", "_10"),
          [sty.form15phase__11]: hasVariant($state, "phase", "_11"),
          [sty.form15phase__13]: hasVariant($state, "phase", "_13"),
          [sty.form15phase__14]: hasVariant($state, "phase", "_14"),
          [sty.form15phase__15]: hasVariant($state, "phase", "_15"),
          [sty.form15phase__1]: hasVariant($state, "phase", "_1"),
          [sty.form15phase__2]: hasVariant($state, "phase", "_2"),
          [sty.form15phase__3]: hasVariant($state, "phase", "_3"),
          [sty.form15phase__4]: hasVariant($state, "phase", "_4"),
          [sty.form15phase__5]: hasVariant($state, "phase", "_5"),
          [sty.form15phase__6]: hasVariant($state, "phase", "_6"),
          [sty.form15phase__7]: hasVariant($state, "phase", "_7"),
          [sty.form15phase__8]: hasVariant($state, "phase", "_8"),
          [sty.form15phase__9]: hasVariant($state, "phase", "_9")
        })}
      >
        {(
          hasVariant($state, "phase", "_7")
            ? true
            : hasVariant($state, "phase", "_4")
            ? (() => {
                try {
                  return $state.signUpForm.lives_at === "روستا";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            data-plasmic-name={"field19"}
            data-plasmic-override={overrides.field19}
            className={classNames(projectcss.all, sty.field19, {
              [sty.field19phase__3]: hasVariant($state, "phase", "_3"),
              [sty.field19phase__4]: hasVariant($state, "phase", "_4"),
              [sty.field19phase__7]: hasVariant($state, "phase", "_7")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2Qzh
              )}
            >
              {
                "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647 \u062e\u0648\u062f\u062a\u0648\u0646 (\u0627\u06cc\u0646 \u0634\u0645\u0627\u0631\u0647 \u062f\u0631 \u06af\u0631\u0648\u0647 \u0647\u0627\u06cc \u06a9\u0644\u0627\u0633\u06cc \u0627\u0636\u0627\u0641\u0647 \u0645\u06cc\u0634\u0648\u062f)"
              }
            </div>
            <TextInput
              data-plasmic-name={"textInput13"}
              data-plasmic-override={overrides.textInput13}
              className={classNames("__wab_instance", sty.textInput13)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput13", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={``}
              type={"tel"}
              value={
                generateStateValueProp($state, ["textInput13", "value"]) ?? ""
              }
            />
          </div>
        ) : null}
      </div>
      <Button
        data-plasmic-name={"submit"}
        data-plasmic-override={overrides.submit}
        className={classNames("__wab_instance", sty.submit, {
          [sty.submitphase__12]: hasVariant($state, "phase", "_12"),
          [sty.submitphase__15]: hasVariant($state, "phase", "_15"),
          [sty.submitphase__1]: hasVariant($state, "phase", "_1"),
          [sty.submitphase__3]: hasVariant($state, "phase", "_3"),
          [sty.submitphase__5]: hasVariant($state, "phase", "_5"),
          [sty.submitphase__6]: hasVariant($state, "phase", "_6"),
          [sty.submitphase__7]: hasVariant($state, "phase", "_7"),
          [sty.submitphase__8]: hasVariant($state, "phase", "_8"),
          [sty.submitphase__9]: hasVariant($state, "phase", "_9")
        })}
        color={"blue"}
        onClick={async event => {
          const $steps = {};

          $steps["updateSignUpStage"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["signUpStage"]
                  },
                  operation: 0,
                  value: (() => {
                    const currentStage = parseInt(
                      $state.signUpStage.split("_")[1]
                    );
                    const nextStage = `_` + (currentStage + 1);
                    return nextStage;
                  })()
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateSignUpStage"] != null &&
            typeof $steps["updateSignUpStage"] === "object" &&
            typeof $steps["updateSignUpStage"].then === "function"
          ) {
            $steps["updateSignUpStage"] = await $steps["updateSignUpStage"];
          }

          $steps["goToStudPanel"] =
            $state.signUpStage == "_16"
              ? (() => {
                  const actionArgs = { destination: `/spanel` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["goToStudPanel"] != null &&
            typeof $steps["goToStudPanel"] === "object" &&
            typeof $steps["goToStudPanel"].then === "function"
          ) {
            $steps["goToStudPanel"] = await $steps["goToStudPanel"];
          }

          $steps["updateTextInputValue"] =
            $state.signUpStage == "_1"
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["textInput", "value"]
                    },
                    operation: 0
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["updateTextInputValue"] != null &&
            typeof $steps["updateTextInputValue"] === "object" &&
            typeof $steps["updateTextInputValue"].then === "function"
          ) {
            $steps["updateTextInputValue"] = await $steps[
              "updateTextInputValue"
            ];
          }
        }}
      >
        {"\u062a\u0627\u06cc\u06cc\u062f"}
      </Button>
      <ArrowRightSvgIcon
        data-plasmic-name={"backIcon"}
        data-plasmic-override={overrides.backIcon}
        className={classNames(projectcss.all, sty.backIcon, {
          [sty.backIconphase__1]: hasVariant($state, "phase", "_1"),
          [sty.backIconphase__2]: hasVariant($state, "phase", "_2")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateSignUpStage"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["signUpStage"]
                  },
                  operation: 0,
                  value: (() => {
                    const currentStage = parseInt(
                      $state.signUpStage.split("_")[1]
                    );
                    const nextStage = `_` + (currentStage - 1);
                    return nextStage;
                  })()
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateSignUpStage"] != null &&
            typeof $steps["updateSignUpStage"] === "object" &&
            typeof $steps["updateSignUpStage"].then === "function"
          ) {
            $steps["updateSignUpStage"] = await $steps["updateSignUpStage"];
          }
        }}
        role={"img"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "form",
    "field",
    "textInput",
    "field2",
    "textInput2",
    "field5",
    "year",
    "month",
    "day",
    "form2",
    "select",
    "form3",
    "form4",
    "field3",
    "textInput3",
    "field4",
    "textInput4",
    "field6",
    "year2",
    "month2",
    "day2",
    "form5",
    "field8",
    "textInput6",
    "field7",
    "textInput5",
    "form6",
    "numberInput2",
    "numberInput3",
    "form7",
    "form8",
    "form9",
    "form10",
    "field13",
    "textInput8",
    "form11",
    "field9",
    "textInput7",
    "field11",
    "textInput9",
    "field10",
    "textarea",
    "field12",
    "numberInput",
    "form12",
    "form13",
    "field14",
    "textInput10",
    "field15",
    "textInput11",
    "field16",
    "select2",
    "field17",
    "textInput12",
    "form14",
    "field18",
    "upload",
    "button",
    "form15",
    "field19",
    "textInput13",
    "submit",
    "backIcon"
  ],
  form: [
    "form",
    "field",
    "textInput",
    "field2",
    "textInput2",
    "field5",
    "year",
    "month",
    "day"
  ],
  field: ["field", "textInput"],
  textInput: ["textInput"],
  field2: ["field2", "textInput2"],
  textInput2: ["textInput2"],
  field5: ["field5", "year", "month", "day"],
  year: ["year"],
  month: ["month"],
  day: ["day"],
  form2: ["form2", "select"],
  select: ["select"],
  form3: ["form3"],
  form4: [
    "form4",
    "field3",
    "textInput3",
    "field4",
    "textInput4",
    "field6",
    "year2",
    "month2",
    "day2"
  ],
  field3: ["field3", "textInput3"],
  textInput3: ["textInput3"],
  field4: ["field4", "textInput4"],
  textInput4: ["textInput4"],
  field6: ["field6", "year2", "month2", "day2"],
  year2: ["year2"],
  month2: ["month2"],
  day2: ["day2"],
  form5: ["form5", "field8", "textInput6", "field7", "textInput5"],
  field8: ["field8", "textInput6"],
  textInput6: ["textInput6"],
  field7: ["field7", "textInput5"],
  textInput5: ["textInput5"],
  form6: ["form6", "numberInput2", "numberInput3"],
  numberInput2: ["numberInput2"],
  numberInput3: ["numberInput3"],
  form7: ["form7"],
  form8: ["form8"],
  form9: ["form9"],
  form10: ["form10", "field13", "textInput8"],
  field13: ["field13", "textInput8"],
  textInput8: ["textInput8"],
  form11: [
    "form11",
    "field9",
    "textInput7",
    "field11",
    "textInput9",
    "field10",
    "textarea",
    "field12",
    "numberInput"
  ],
  field9: ["field9", "textInput7"],
  textInput7: ["textInput7"],
  field11: ["field11", "textInput9"],
  textInput9: ["textInput9"],
  field10: ["field10", "textarea"],
  textarea: ["textarea"],
  field12: ["field12", "numberInput"],
  numberInput: ["numberInput"],
  form12: ["form12"],
  form13: [
    "form13",
    "field14",
    "textInput10",
    "field15",
    "textInput11",
    "field16",
    "select2",
    "field17",
    "textInput12"
  ],
  field14: ["field14", "textInput10"],
  textInput10: ["textInput10"],
  field15: ["field15", "textInput11"],
  textInput11: ["textInput11"],
  field16: ["field16", "select2"],
  select2: ["select2"],
  field17: ["field17", "textInput12"],
  textInput12: ["textInput12"],
  form14: ["form14", "field18", "upload", "button"],
  field18: ["field18", "upload", "button"],
  upload: ["upload", "button"],
  button: ["button"],
  form15: ["form15", "field19", "textInput13"],
  field19: ["field19", "textInput13"],
  textInput13: ["textInput13"],
  submit: ["submit"],
  backIcon: ["backIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  form: "div";
  field: "div";
  textInput: typeof TextInput;
  field2: "div";
  textInput2: typeof TextInput;
  field5: "div";
  year: typeof Select;
  month: typeof Select;
  day: typeof Select;
  form2: "div";
  select: typeof Select;
  form3: "div";
  form4: "div";
  field3: "div";
  textInput3: typeof TextInput;
  field4: "div";
  textInput4: typeof TextInput;
  field6: "div";
  year2: typeof Select;
  month2: typeof Select;
  day2: typeof Select;
  form5: "div";
  field8: "div";
  textInput6: typeof TextInput;
  field7: "div";
  textInput5: typeof TextInput;
  form6: "div";
  numberInput2: typeof AntdInputNumber;
  numberInput3: typeof AntdInputNumber;
  form7: "div";
  form8: "div";
  form9: "div";
  form10: "div";
  field13: "div";
  textInput8: typeof TextInput;
  form11: "div";
  field9: "div";
  textInput7: typeof TextInput;
  field11: "div";
  textInput9: typeof TextInput;
  field10: "div";
  textarea: "textarea";
  field12: "div";
  numberInput: typeof AntdInputNumber;
  form12: "div";
  form13: "div";
  field14: "div";
  textInput10: typeof TextInput;
  field15: "div";
  textInput11: typeof TextInput;
  field16: "div";
  select2: typeof Select;
  field17: "div";
  textInput12: typeof TextInput;
  form14: "div";
  field18: "div";
  upload: typeof UploadWrapper;
  button: typeof AntdButton;
  form15: "div";
  field19: "div";
  textInput13: typeof TextInput;
  submit: typeof Button;
  backIcon: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignUpForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignUpForm__VariantsArgs;
    args?: PlasmicSignUpForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignUpForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSignUpForm__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSignUpForm__ArgProps,
          internalVariantPropNames: PlasmicSignUpForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignUpForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignUpForm";
  } else {
    func.displayName = `PlasmicSignUpForm.${nodeName}`;
  }
  return func;
}

export const PlasmicSignUpForm = Object.assign(
  // Top-level PlasmicSignUpForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    field: makeNodeComponent("field"),
    textInput: makeNodeComponent("textInput"),
    field2: makeNodeComponent("field2"),
    textInput2: makeNodeComponent("textInput2"),
    field5: makeNodeComponent("field5"),
    year: makeNodeComponent("year"),
    month: makeNodeComponent("month"),
    day: makeNodeComponent("day"),
    form2: makeNodeComponent("form2"),
    select: makeNodeComponent("select"),
    form3: makeNodeComponent("form3"),
    form4: makeNodeComponent("form4"),
    field3: makeNodeComponent("field3"),
    textInput3: makeNodeComponent("textInput3"),
    field4: makeNodeComponent("field4"),
    textInput4: makeNodeComponent("textInput4"),
    field6: makeNodeComponent("field6"),
    year2: makeNodeComponent("year2"),
    month2: makeNodeComponent("month2"),
    day2: makeNodeComponent("day2"),
    form5: makeNodeComponent("form5"),
    field8: makeNodeComponent("field8"),
    textInput6: makeNodeComponent("textInput6"),
    field7: makeNodeComponent("field7"),
    textInput5: makeNodeComponent("textInput5"),
    form6: makeNodeComponent("form6"),
    numberInput2: makeNodeComponent("numberInput2"),
    numberInput3: makeNodeComponent("numberInput3"),
    form7: makeNodeComponent("form7"),
    form8: makeNodeComponent("form8"),
    form9: makeNodeComponent("form9"),
    form10: makeNodeComponent("form10"),
    field13: makeNodeComponent("field13"),
    textInput8: makeNodeComponent("textInput8"),
    form11: makeNodeComponent("form11"),
    field9: makeNodeComponent("field9"),
    textInput7: makeNodeComponent("textInput7"),
    field11: makeNodeComponent("field11"),
    textInput9: makeNodeComponent("textInput9"),
    field10: makeNodeComponent("field10"),
    textarea: makeNodeComponent("textarea"),
    field12: makeNodeComponent("field12"),
    numberInput: makeNodeComponent("numberInput"),
    form12: makeNodeComponent("form12"),
    form13: makeNodeComponent("form13"),
    field14: makeNodeComponent("field14"),
    textInput10: makeNodeComponent("textInput10"),
    field15: makeNodeComponent("field15"),
    textInput11: makeNodeComponent("textInput11"),
    field16: makeNodeComponent("field16"),
    select2: makeNodeComponent("select2"),
    field17: makeNodeComponent("field17"),
    textInput12: makeNodeComponent("textInput12"),
    form14: makeNodeComponent("form14"),
    field18: makeNodeComponent("field18"),
    upload: makeNodeComponent("upload"),
    button: makeNodeComponent("button"),
    form15: makeNodeComponent("form15"),
    field19: makeNodeComponent("field19"),
    textInput13: makeNodeComponent("textInput13"),
    submit: makeNodeComponent("submit"),
    backIcon: makeNodeComponent("backIcon"),

    // Metadata about props expected for PlasmicSignUpForm
    internalVariantProps: PlasmicSignUpForm__VariantProps,
    internalArgProps: PlasmicSignUpForm__ArgProps
  }
);

export default PlasmicSignUpForm;
/* prettier-ignore-end */
