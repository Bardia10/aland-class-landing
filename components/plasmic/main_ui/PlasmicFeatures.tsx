/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: zEaZ7f4CVToW

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: oAUVC4KlnvP5/component
import Notifications from "../../Notifications"; // plasmic-import: ApkJKfS0zS--/component
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import NotificationsChat from "../../NotificationsChat"; // plasmic-import: AM5P5F23XiMl/component
import OnlineSession from "../../OnlineSession"; // plasmic-import: 7XZkErEnzB5a/component
import ClassVideo from "../../ClassVideo"; // plasmic-import: XzJxHS8L5Tsi/component
import AsignmentWindow from "../../AsignmentWindow"; // plasmic-import: g6CcMWX_lL1M/component
import AsignmentComponent from "../../AsignmentComponent"; // plasmic-import: Q97ZpLH0wHko/component
import ProfileSetting from "../../ProfileSetting"; // plasmic-import: 8xToqxWNlbq1/component
import Modal from "../../Modal"; // plasmic-import: hKNxfDzuqFgr/component
import Button2 from "../../Button2"; // plasmic-import: Fb7s1STRvbwA/component
import ProfileButton from "../../ProfileButton"; // plasmic-import: aHqxJIgozron/component
import TextInput2 from "../../TextInput2"; // plasmic-import: xjB-u-wyg1N3/component
import SignUpForm from "../../SignUpForm"; // plasmic-import: b8xhxPYLti-p/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import Medalist from "../../Medalist"; // plasmic-import: WCscH0b-XY5W/component
import Medallists from "../../Medallists"; // plasmic-import: hP0FtLhVuQB7/component
import Button from "../../Button"; // plasmic-import: _MWZyCmj9Poj/component
import HeroSection from "../../HeroSection"; // plasmic-import: pYkQWFvcCKWf/component
import Footer from "../../Footer"; // plasmic-import: LLPl5wc7oCu-/component
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicFeatures.module.css"; // plasmic-import: zEaZ7f4CVToW/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: sPH8u4ShjXez/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: NHCNIBkgv78M/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: _k8Atrha9Mjb/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 2D7jq9Mtq-9Z/icon
import ArrowRightSvgIcon from "./icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: uyu4B0j5O6jt/icon

createPlasmicElementProxy;

export type PlasmicFeatures__VariantMembers = {};
export type PlasmicFeatures__VariantsArgs = {};
type VariantPropType = keyof PlasmicFeatures__VariantsArgs;
export const PlasmicFeatures__VariantProps = new Array<VariantPropType>();

export type PlasmicFeatures__ArgsType = {};
type ArgPropType = keyof PlasmicFeatures__ArgsType;
export const PlasmicFeatures__ArgProps = new Array<ArgPropType>();

export type PlasmicFeatures__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  notifications?: Flex__<typeof Notifications>;
  collapse?: Flex__<typeof AntdSingleCollapse>;
  notificationsChat2?: Flex__<typeof NotificationsChat>;
  onlineSession?: Flex__<typeof OnlineSession>;
  classVideo?: Flex__<typeof ClassVideo>;
  asignmentWindow?: Flex__<typeof AsignmentWindow>;
  asignmentComponent?: Flex__<typeof AsignmentComponent>;
  profileSetting?: Flex__<typeof ProfileSetting>;
  modal?: Flex__<typeof Modal>;
  profileButton?: Flex__<typeof ProfileButton>;
  textInput2?: Flex__<typeof TextInput2>;
  signUpForm?: Flex__<typeof SignUpForm>;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  medalist?: Flex__<typeof Medalist>;
  medallists?: Flex__<typeof Medallists>;
  pageBanner?: Flex__<"div">;
  columns?: Flex__<"div">;
  h1?: Flex__<"h1">;
  section?: Flex__<"section">;
  foreground?: Flex__<"div">;
  copy?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  art?: Flex__<"div">;
  heroSection?: Flex__<typeof HeroSection>;
  footer?: Flex__<typeof Footer>;
  iframe?: Flex__<typeof Iframe>;
};

export interface DefaultFeaturesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFeatures__RenderFunc(props: {
  variants: PlasmicFeatures__VariantsArgs;
  args: PlasmicFeatures__ArgsType;
  overrides: PlasmicFeatures__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "signUpForm.signUpStage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "showMessages",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "collapse.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "notificationsChat2.messages3",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                old: {
                  "jan 18": [
                    {
                      title: "Old Message 3",
                      text: "Yet another old message Yet another old message Yet another old message Yet another old message Yet another old message Yet another old message",
                      time: "9:00 AM",
                      date: "jan 18",
                      from: {
                        name: "Old Sender 3",
                        image:
                          "https://cdn.ilna.ir/thumbnail/rsXVSYdsMqFA/XWHCw76VBsxziNocTLLHoesUW68OoqO1axxWWNC-1_29u4R4x8JTWBcfKP1V5I-i_ZE77bzt8EA,/589493_222.jpg"
                      }
                    },
                    {
                      title: "Old Message 4",
                      text: "Last old message",
                      time: "12:00 PM",
                      date: "jan 18",
                      from: {
                        name: "Old Sender 4",
                        image:
                          "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRz8OOBH4_GhI5thrqiU9iexGD47rpzsykyCQ&s"
                      }
                    }
                  ]
                },
                new: {
                  "jan 20": [
                    {
                      title: "New Message 3",
                      text: "Yet another new messageYet another new messageYet another new messageYet another new messageYet another new messageYet another new messageYet another new messageYet another new messageYet another new messageYet another new messageYet another new messageYet another new message",
                      time: "3:00 PM",
                      date: "jan 20",
                      from: {
                        name: "New Sender 3",
                        image:
                          "https://cdn.ilna.ir/thumbnail/rsXVSYdsMqFA/XWHCw76VBsxziNocTLLHoesUW68OoqO1axxWWNC-1_29u4R4x8JTWBcfKP1V5I-i_ZE77bzt8EA,/589493_222.jpg"
                      }
                    },
                    {
                      title: "New Message 4",
                      text: "Last new message",
                      time: "5:30 PM",
                      date: "jan 20",
                      from: {
                        name: "New Sender 4",
                        image:
                          "https://cdn.ilna.ir/thumbnail/rsXVSYdsMqFA/XWHCw76VBsxziNocTLLHoesUW68OoqO1axxWWNC-1_29u4R4x8JTWBcfKP1V5I-i_ZE77bzt8EA,/589493_222.jpg"
                      }
                    }
                  ],

                  "jan 22": [
                    {
                      title: "New Message 3",
                      text: "Yet another new message Yet another new message Yet another new message",
                      time: "3:00 PM",
                      date: "jan 22",
                      from: {
                        name: "New Sender 3",
                        image:
                          "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRz8OOBH4_GhI5thrqiU9iexGD47rpzsykyCQ&s"
                      }
                    },
                    {
                      title: "New Message 4",
                      text: "Last new messageLast new messageLast new message Last new message Last new message Last new message",
                      time: "5:30 PM",
                      date: "jan 22",
                      from: {
                        name: "New Sender 4",
                        image:
                          "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRz8OOBH4_GhI5thrqiU9iexGD47rpzsykyCQ&s"
                      }
                    }
                  ]
                }
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "textInput2.textInputField",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "profileSetting.profileInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "signUpForm.signUpForm",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "asignmentComponent.asignment",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {};
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Notifications
            data-plasmic-name={"notifications"}
            data-plasmic-override={overrides.notifications}
            className={classNames("__wab_instance", sty.notifications)}
          />

          {(() => {
            const child$Props = {
              bordered: true,
              className: classNames("__wab_instance", sty.collapse),
              label2: "Collapse Header",
              onChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "open",
                  ["collapse", "open"],
                  AntdSingleCollapse_Helpers
                ).apply(null, eventArgs);
              },
              open: generateStateValueProp($state, ["collapse", "open"]),
              showArrow: true
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "open",
                  plasmicStateName: "collapse.open"
                }
              ],
              [],
              AntdSingleCollapse_Helpers ?? {},
              child$Props
            );

            return (
              <AntdSingleCollapse
                data-plasmic-name={"collapse"}
                data-plasmic-override={overrides.collapse}
                {...child$Props}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xT6Xk
                  )}
                >
                  {"Collapsible text..."}
                </div>
                <NotificationsChat
                  data-plasmic-name={"notificationsChat2"}
                  data-plasmic-override={overrides.notificationsChat2}
                  className={classNames(
                    "__wab_instance",
                    sty.notificationsChat2
                  )}
                  messages3={generateStateValueProp($state, [
                    "notificationsChat2",
                    "messages3"
                  ])}
                  onMessages3Change={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "notificationsChat2",
                      "messages3"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                />
              </AntdSingleCollapse>
            );
          })()}
          <OnlineSession
            data-plasmic-name={"onlineSession"}
            data-plasmic-override={overrides.onlineSession}
            className={classNames("__wab_instance", sty.onlineSession)}
          />

          <ClassVideo
            data-plasmic-name={"classVideo"}
            data-plasmic-override={overrides.classVideo}
            className={classNames("__wab_instance", sty.classVideo)}
          />

          <AsignmentWindow
            data-plasmic-name={"asignmentWindow"}
            data-plasmic-override={overrides.asignmentWindow}
            className={classNames("__wab_instance", sty.asignmentWindow)}
          />

          <AsignmentComponent
            data-plasmic-name={"asignmentComponent"}
            data-plasmic-override={overrides.asignmentComponent}
            asignment={generateStateValueProp($state, [
              "asignmentComponent",
              "asignment"
            ])}
            className={classNames("__wab_instance", sty.asignmentComponent)}
            onAsignmentChange2={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "asignmentComponent",
                "asignment"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            stage={"colapsed"}
          />

          <ProfileSetting
            data-plasmic-name={"profileSetting"}
            data-plasmic-override={overrides.profileSetting}
            className={classNames("__wab_instance", sty.profileSetting)}
            onProfileInfoChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "profileSetting",
                "profileInfo"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          />

          <Modal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            isOpen={generateStateValueProp($state, ["modal", "isOpen"])}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          />

          <ProfileButton
            data-plasmic-name={"profileButton"}
            data-plasmic-override={overrides.profileButton}
            className={classNames("__wab_instance", sty.profileButton)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__wi9Wu)}>
            <div className={classNames(projectcss.all, sty.freeBox__zMmw8)}>
              <div className={classNames(projectcss.all, sty.freeBox__atKuq)}>
                <div className={classNames(projectcss.all, sty.freeBox__v7Frg)}>
                  <TextInput2
                    data-plasmic-name={"textInput2"}
                    data-plasmic-override={overrides.textInput2}
                    className={classNames("__wab_instance", sty.textInput2)}
                    onTextInputFieldChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textInput2",
                        "textInputField"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    value={"tcg"}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ts3Fc
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.textInput2.textInputField;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
          </div>
          <SignUpForm
            data-plasmic-name={"signUpForm"}
            data-plasmic-override={overrides.signUpForm}
            className={classNames("__wab_instance", sty.signUpForm)}
            onSignUpFormChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "signUpForm",
                "signUpForm"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onSignUpStageChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "signUpForm",
                "signUpStage"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            phase={(() => {
              try {
                return $state.signUpForm.signUpStage;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "_1";
                }
                throw e;
              }
            })()}
          />

          <div className={classNames(projectcss.all, sty.freeBox__trDjg)}>
            <div className={classNames(projectcss.all, sty.freeBox__dBrsk)}>
              {(() => {
                const child$Props = {
                  arrows: false,
                  autoplay: true,
                  autoplaySpeed: 0,
                  beforeChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "currentSlide",
                      ["sliderCarousel", "currentSlide"],
                      SliderWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  centerMode: true,
                  centerPadding: "50",
                  className: classNames("__wab_instance", sty.sliderCarousel),
                  cssEase: "linear",
                  focusOnSelect: true,
                  initialSlide: generateStateValueProp($state, [
                    "sliderCarousel",
                    "currentSlide"
                  ]),
                  ref: ref => {
                    $refs["sliderCarousel"] = ref;
                  },
                  sliderScopeClassName: sty["sliderCarousel__slider"],
                  slidesToShow: 4,
                  speed: 10000,
                  swipe: true,
                  swipeToSlide: false
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "currentSlide",
                      plasmicStateName: "sliderCarousel.currentSlide"
                    }
                  ],
                  [],
                  SliderWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <SliderWrapper
                    data-plasmic-name={"sliderCarousel"}
                    data-plasmic-override={overrides.sliderCarousel}
                    {...child$Props}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [2, 3, 4, 4, 5, 6, 7, 8];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__c0Sse
                          )}
                          key={currentIndex}
                        >
                          <Medalist
                            data-plasmic-name={"medalist"}
                            data-plasmic-override={overrides.medalist}
                            className={classNames(
                              "__wab_instance",
                              sty.medalist
                            )}
                            scale={"small"}
                            story={(() => {
                              try {
                                return currentIndex;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      );
                    })}
                  </SliderWrapper>
                );
              })()}
            </div>
          </div>
          <Medallists
            data-plasmic-name={"medallists"}
            data-plasmic-override={overrides.medallists}
            className={classNames("__wab_instance", sty.medallists)}
          />

          <div
            data-plasmic-name={"pageBanner"}
            data-plasmic-override={overrides.pageBanner}
            className={classNames(projectcss.all, sty.pageBanner)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ydeJs)}>
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__twu00)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wCuvS)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Our Features "}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jn1Mv
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,"
                      }
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__s0Rt)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__iamwi)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "lazy"
                        : "lazy"
                    }
                    src={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: "/plasmic/main_ui/images/_3ThumbJpg.jpg",
                            fullWidth: 700,
                            fullHeight: 466,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/main_ui/images/williamHook9E9Pd9BlAtoUnsplashJpg.jpg",
                            fullWidth: 1920,
                            fullHeight: 1280,
                            aspectRatio: undefined
                          }
                    }
                  />
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__bDJnk)}>
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              <div
                data-plasmic-name={"foreground"}
                data-plasmic-override={overrides.foreground}
                className={classNames(projectcss.all, sty.foreground)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___3EhpX)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__p7AQg
                    )}
                  >
                    {"The standard Lorem Ipsum passage"}
                  </h3>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0MLlL
                    )}
                  >
                    {
                      "Vitae sed sem a justo mauris potenti a primis vivamus justo tempor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies."
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0RZgr
                    )}
                  >
                    {
                      "Vitae sed sem a justo mauris potenti a primis vivamus justo tempor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies."
                    }
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___2QkTe)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dvPS)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__d6ZjQ
                      )}
                    >
                      {"Built on capability"}
                    </h5>
                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg__unRoL)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___3YD03)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__xquxF
                      )}
                    >
                      {"Highly energetic"}
                    </h5>
                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg__uvaWq)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pYjc0)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__rzXru
                      )}
                    >
                      {"100% transparency and accountability"}
                    </h5>
                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg__xh9Hw)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__t84Gg)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5___2WHho
                      )}
                    >
                      {"Refreshing clarity"}
                    </h5>
                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg__arXm)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4BhBw)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__fxfvT
                      )}
                    >
                      {"Modern results"}
                    </h5>
                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg__cSfui)}
                      role={"img"}
                    />
                  </div>
                </div>
              </div>
            </section>
            <div className={classNames(projectcss.all, sty.freeBox___9Jvw)}>
              <div className={classNames(projectcss.all, sty.freeBox__cuhGb)}>
                <div className={classNames(projectcss.all, sty.freeBox__eHeI1)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__q0G8H)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zmscv)}
                    >
                      <div
                        data-plasmic-name={"copy"}
                        data-plasmic-override={overrides.copy}
                        className={classNames(projectcss.all, sty.copy)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7NYhw
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sD19G
                            )}
                          >
                            {"Welcome"}
                          </div>
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__sq22K
                            )}
                          >
                            {"The standard Lorem "}
                          </h3>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gx9Dy
                            )}
                          >
                            {
                              "Vitae sed sem a justo mauris potenti a primis vivamus justo tempor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies."
                            }
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oXytk
                          )}
                        >
                          <Button
                            data-plasmic-name={"button"}
                            data-plasmic-override={overrides.button}
                            className={classNames("__wab_instance", sty.button)}
                            color={"blue"}
                            endIcon={
                              <ArrowRightSvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___58V6I
                                )}
                                role={"img"}
                              />
                            }
                            shape={"rounded"}
                            showEndIcon={true}
                            submitsForm={true}
                          >
                            {"Start Now"}
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"art"}
                    data-plasmic-override={overrides.art}
                    className={classNames(projectcss.all, sty.art)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__w6MAr)}
                      displayHeight={"100%"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={
                        "https://images.unsplash.com/photo-1520333789090-1afc82db536a?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2851&q=80"
                      }
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__dgU3C)}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
          <HeroSection
            data-plasmic-name={"heroSection"}
            data-plasmic-override={overrides.heroSection}
            className={classNames("__wab_instance", sty.heroSection)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <Iframe
            data-plasmic-name={"iframe"}
            data-plasmic-override={overrides.iframe}
            className={classNames("__wab_instance", sty.iframe)}
            preview={true}
            src={
              "https://www.aparat.com/video/video/embed/videohash/resjk08/vt/frame\ufeff"
            }
            srcDoc={"<div><h3>Heading</h3><p>Example text...</p></div>"}
            useHtml={false}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "notifications",
    "collapse",
    "notificationsChat2",
    "onlineSession",
    "classVideo",
    "asignmentWindow",
    "asignmentComponent",
    "profileSetting",
    "modal",
    "profileButton",
    "textInput2",
    "signUpForm",
    "sliderCarousel",
    "medalist",
    "medallists",
    "pageBanner",
    "columns",
    "h1",
    "section",
    "foreground",
    "copy",
    "button",
    "art",
    "heroSection",
    "footer",
    "iframe"
  ],
  header: ["header"],
  notifications: ["notifications"],
  collapse: ["collapse", "notificationsChat2"],
  notificationsChat2: ["notificationsChat2"],
  onlineSession: ["onlineSession"],
  classVideo: ["classVideo"],
  asignmentWindow: ["asignmentWindow"],
  asignmentComponent: ["asignmentComponent"],
  profileSetting: ["profileSetting"],
  modal: ["modal"],
  profileButton: ["profileButton"],
  textInput2: ["textInput2"],
  signUpForm: ["signUpForm"],
  sliderCarousel: ["sliderCarousel", "medalist"],
  medalist: ["medalist"],
  medallists: ["medallists"],
  pageBanner: ["pageBanner", "columns", "h1"],
  columns: ["columns", "h1"],
  h1: ["h1"],
  section: ["section", "foreground"],
  foreground: ["foreground"],
  copy: ["copy", "button"],
  button: ["button"],
  art: ["art"],
  heroSection: ["heroSection"],
  footer: ["footer"],
  iframe: ["iframe"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  notifications: typeof Notifications;
  collapse: typeof AntdSingleCollapse;
  notificationsChat2: typeof NotificationsChat;
  onlineSession: typeof OnlineSession;
  classVideo: typeof ClassVideo;
  asignmentWindow: typeof AsignmentWindow;
  asignmentComponent: typeof AsignmentComponent;
  profileSetting: typeof ProfileSetting;
  modal: typeof Modal;
  profileButton: typeof ProfileButton;
  textInput2: typeof TextInput2;
  signUpForm: typeof SignUpForm;
  sliderCarousel: typeof SliderWrapper;
  medalist: typeof Medalist;
  medallists: typeof Medallists;
  pageBanner: "div";
  columns: "div";
  h1: "h1";
  section: "section";
  foreground: "div";
  copy: "div";
  button: typeof Button;
  art: "div";
  heroSection: typeof HeroSection;
  footer: typeof Footer;
  iframe: typeof Iframe;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeatures__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeatures__VariantsArgs;
    args?: PlasmicFeatures__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFeatures__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFeatures__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFeatures__ArgProps,
          internalVariantPropNames: PlasmicFeatures__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFeatures__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeatures";
  } else {
    func.displayName = `PlasmicFeatures.${nodeName}`;
  }
  return func;
}

export const PlasmicFeatures = Object.assign(
  // Top-level PlasmicFeatures renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    notifications: makeNodeComponent("notifications"),
    collapse: makeNodeComponent("collapse"),
    notificationsChat2: makeNodeComponent("notificationsChat2"),
    onlineSession: makeNodeComponent("onlineSession"),
    classVideo: makeNodeComponent("classVideo"),
    asignmentWindow: makeNodeComponent("asignmentWindow"),
    asignmentComponent: makeNodeComponent("asignmentComponent"),
    profileSetting: makeNodeComponent("profileSetting"),
    modal: makeNodeComponent("modal"),
    profileButton: makeNodeComponent("profileButton"),
    textInput2: makeNodeComponent("textInput2"),
    signUpForm: makeNodeComponent("signUpForm"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    medalist: makeNodeComponent("medalist"),
    medallists: makeNodeComponent("medallists"),
    pageBanner: makeNodeComponent("pageBanner"),
    columns: makeNodeComponent("columns"),
    h1: makeNodeComponent("h1"),
    section: makeNodeComponent("section"),
    foreground: makeNodeComponent("foreground"),
    copy: makeNodeComponent("copy"),
    button: makeNodeComponent("button"),
    art: makeNodeComponent("art"),
    heroSection: makeNodeComponent("heroSection"),
    footer: makeNodeComponent("footer"),
    iframe: makeNodeComponent("iframe"),

    // Metadata about props expected for PlasmicFeatures
    internalVariantProps: PlasmicFeatures__VariantProps,
    internalArgProps: PlasmicFeatures__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFeatures;
/* prettier-ignore-end */
