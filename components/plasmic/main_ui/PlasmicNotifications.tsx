/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: ApkJKfS0zS--

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import NotificationsChat from "../../NotificationsChat"; // plasmic-import: AM5P5F23XiMl/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicNotifications.module.css"; // plasmic-import: ApkJKfS0zS--/css

import MessageSvgrepoComSvgIcon from "./icons/PlasmicIcon__MessageSvgrepoComSvg"; // plasmic-import: gEsv-1BZMr3l/icon

createPlasmicElementProxy;

export type PlasmicNotifications__VariantMembers = {};
export type PlasmicNotifications__VariantsArgs = {};
type VariantPropType = keyof PlasmicNotifications__VariantsArgs;
export const PlasmicNotifications__VariantProps = new Array<VariantPropType>();

export type PlasmicNotifications__ArgsType = {
  messages?: any;
  notifications?: any;
};
type ArgPropType = keyof PlasmicNotifications__ArgsType;
export const PlasmicNotifications__ArgProps = new Array<ArgPropType>(
  "messages",
  "notifications"
);

export type PlasmicNotifications__OverridesType = {
  modal?: Flex__<typeof AntdModal>;
  notificationsChat?: Flex__<typeof NotificationsChat>;
  svg?: Flex__<"svg">;
};

export interface DefaultNotificationsProps {
  messages?: any;
  notifications?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNotifications__RenderFunc(props: {
  variants: PlasmicNotifications__VariantsArgs;
  args: PlasmicNotifications__ArgsType;
  overrides: PlasmicNotifications__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "notificationsChat.messages3",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.messages;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <AntdModal
      data-plasmic-name={"modal"}
      data-plasmic-override={overrides.modal}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.modal
      )}
      defaultStylesClassName={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless
      )}
      hideFooter={true}
      modalContentClassName={classNames({ [sty["pcls_3SzDxnVENN3W"]]: true })}
      modalScopeClassName={sty["modal__modal"]}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["modal", "open"]).apply(
          null,
          eventArgs
        );
      }}
      open={generateStateValueProp($state, ["modal", "open"])}
      title={
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__hrcli
          )}
        >
          {"Modal title"}
        </div>
      }
      trigger={
        <div className={classNames(projectcss.all, sty.freeBox__xfvzI)}>
          <MessageSvgrepoComSvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />

          {(() => {
            try {
              return (
                Object.values($props.notifications.messages["new"]).flat()
                  .length > 0
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__clMh)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cayVd
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return Object.values(
                        $props.notifications.messages["new"]
                      ).flat().length;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "13";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          ) : null}
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tKjtN
            )}
          >
            {"\u0627\u0639\u0644\u0627\u0646 \u0647\u0627"}
          </div>
        </div>
      }
      width={"600px"}
      wrapClassName={classNames({ [sty["pcls_BvKlwcHP4GiS"]]: true })}
    >
      <div className={classNames(projectcss.all, sty.freeBox___5NT3L)}>
        <NotificationsChat
          data-plasmic-name={"notificationsChat"}
          data-plasmic-override={overrides.notificationsChat}
          className={classNames("__wab_instance", sty.notificationsChat)}
          messages3={generateStateValueProp($state, [
            "notificationsChat",
            "messages3"
          ])}
          notifications={(() => {
            try {
              return $props.notifications;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          onMessages3Change={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "notificationsChat",
              "messages3"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        />
      </div>
    </AntdModal>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  modal: ["modal", "notificationsChat", "svg"],
  notificationsChat: ["notificationsChat"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  modal: typeof AntdModal;
  notificationsChat: typeof NotificationsChat;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNotifications__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNotifications__VariantsArgs;
    args?: PlasmicNotifications__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNotifications__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNotifications__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNotifications__ArgProps,
          internalVariantPropNames: PlasmicNotifications__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNotifications__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "modal") {
    func.displayName = "PlasmicNotifications";
  } else {
    func.displayName = `PlasmicNotifications.${nodeName}`;
  }
  return func;
}

export const PlasmicNotifications = Object.assign(
  // Top-level PlasmicNotifications renders the root element
  makeNodeComponent("modal"),
  {
    // Helper components rendering sub-elements
    notificationsChat: makeNodeComponent("notificationsChat"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicNotifications
    internalVariantProps: PlasmicNotifications__VariantProps,
    internalArgProps: PlasmicNotifications__ArgProps
  }
);

export default PlasmicNotifications;
/* prettier-ignore-end */
