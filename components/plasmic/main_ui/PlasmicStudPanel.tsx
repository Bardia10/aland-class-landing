/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: THRfYoq2nz6N

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Button from "../../Button"; // plasmic-import: _MWZyCmj9Poj/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import SelectableButton from "../../SelectableButton"; // plasmic-import: 1R_zNrvMbv4B/component
import OnlineSession from "../../OnlineSession"; // plasmic-import: 7XZkErEnzB5a/component
import AsignmentComponent from "../../AsignmentComponent"; // plasmic-import: Q97ZpLH0wHko/component
import Notifications from "../../Notifications"; // plasmic-import: ApkJKfS0zS--/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import TabBar from "../../TabBar"; // plasmic-import: DRWAgBf27_tG/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicStudPanel.module.css"; // plasmic-import: THRfYoq2nz6N/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 2D7jq9Mtq-9Z/icon
import IconIcon from "../radix_ui/icons/PlasmicIcon__Icon"; // plasmic-import: MbDRsJU0e3bw/icon
import RefreshCwAlt3SvgrepoComSvgIcon from "./icons/PlasmicIcon__RefreshCwAlt3SvgrepoComSvg"; // plasmic-import: USDwnGlxdT-0/icon
import ArrowRightSvgIcon from "./icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: uyu4B0j5O6jt/icon

createPlasmicElementProxy;

export type PlasmicStudPanel__VariantMembers = {};
export type PlasmicStudPanel__VariantsArgs = {};
type VariantPropType = keyof PlasmicStudPanel__VariantsArgs;
export const PlasmicStudPanel__VariantProps = new Array<VariantPropType>();

export type PlasmicStudPanel__ArgsType = {};
type ArgPropType = keyof PlasmicStudPanel__ArgsType;
export const PlasmicStudPanel__ArgProps = new Array<ArgPropType>();

export type PlasmicStudPanel__OverridesType = {
  root?: Flex__<"div">;
  loginError?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  loading?: Flex__<"div">;
  pageContent?: Flex__<"div">;
  darsHa?: Flex__<"div">;
  darsha?: Flex__<"div">;
  mabahes?: Flex__<"div">;
  jalasat2?: Flex__<"div">;
  jalase?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  taklif?: Flex__<"div">;
  attachments?: Flex__<"div">;
  kelasHa?: Flex__<"div">;
  rooms?: Flex__<"div">;
  kelas2?: Flex__<"div">;
  onlineSession?: Flex__<typeof OnlineSession>;
  karname?: Flex__<"div">;
  darsha2?: Flex__<"div">;
  overview?: Flex__<"div">;
  term?: Flex__<"div">;
  barname?: Flex__<"div">;
  barname3?: Flex__<"div">;
  currentWeek?: Flex__<"div">;
  taklif3?: Flex__<"div">;
  kelas4?: Flex__<"div">;
  general3?: Flex__<"div">;
  taklif17?: Flex__<"div">;
  kelas18?: Flex__<"div">;
  general17?: Flex__<"div">;
  taklif4?: Flex__<"div">;
  kelas5?: Flex__<"div">;
  general4?: Flex__<"div">;
  taklif5?: Flex__<"div">;
  kelas6?: Flex__<"div">;
  general5?: Flex__<"div">;
  nextWeek2?: Flex__<"div">;
  taklif6?: Flex__<"div">;
  kelas7?: Flex__<"div">;
  general6?: Flex__<"div">;
  taklif18?: Flex__<"div">;
  kelas19?: Flex__<"div">;
  general18?: Flex__<"div">;
  taklif7?: Flex__<"div">;
  kelas8?: Flex__<"div">;
  general7?: Flex__<"div">;
  taklif8?: Flex__<"div">;
  kelas9?: Flex__<"div">;
  general8?: Flex__<"div">;
  nextWeek?: Flex__<"div">;
  taklif10?: Flex__<"div">;
  kelas11?: Flex__<"div">;
  general10?: Flex__<"div">;
  taklif11?: Flex__<"div">;
  kelas12?: Flex__<"div">;
  general11?: Flex__<"div">;
  taklif12?: Flex__<"div">;
  kelas13?: Flex__<"div">;
  general12?: Flex__<"div">;
  taklif13?: Flex__<"div">;
  kelas14?: Flex__<"div">;
  general13?: Flex__<"div">;
  taklif14?: Flex__<"div">;
  kelas15?: Flex__<"div">;
  general14?: Flex__<"div">;
  taklif15?: Flex__<"div">;
  kelas16?: Flex__<"div">;
  general15?: Flex__<"div">;
  taklif16?: Flex__<"div">;
  kelas17?: Flex__<"div">;
  general16?: Flex__<"div">;
  generic?: Flex__<"div">;
  takalif?: Flex__<"div">;
  listTakalif?: Flex__<"div">;
  takllif?: Flex__<"div">;
  asignmentComponent?: Flex__<typeof AsignmentComponent>;
  notifications?: Flex__<typeof Notifications>;
  modal?: Flex__<typeof AntdModal>;
  tabBar?: Flex__<typeof TabBar>;
  theWall?: Flex__<"div">;
};

export interface DefaultStudPanelProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStudPanel__RenderFunc(props: {
  variants: PlasmicStudPanel__VariantsArgs;
  args: PlasmicStudPanel__ArgsType;
  overrides: PlasmicStudPanel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "currentPage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Barname"
      },
      {
        path: "fields",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.queryDarsha.data.response.darsha;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "currentDarsHaSection",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "darsha"
      },
      {
        path: "currentDars",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "mabahes2",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                // {
                //   title: "مبحث اول شیمی",
                //   id: "1",
                //   dars: "1"
                // },
                // {
                //   title: "مبحث دوم شیمی",
                //   id: "2",
                //   dars: "1"
                // },
                // {
                //   title: "مبحث اول زیست",
                //   id: "1",
                //   dars: "2"
                // },
                // {
                //   title: "مبحث دوم زیست",
                //   id: "2",
                //   dars: "2"
                // }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "jalasat",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                // {
                //   title: "جلسه اول شیمی",
                //   id: "1",
                //   mabhas: "1"
                // },
                // {
                //   title: "جلسه دوم شیمی",
                //   id: "2",
                //   mabhas: "2"
                // },
                // {
                //   title: "جلسه اول زیست",
                //   id: "3",
                //   mabhas: "3"
                // },
                // {
                //   title: "جلسه دوم زیست",
                //   id: "4",
                //   mabhas: "4"
                // }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "currentMabhas",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "barname2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                currentWeek: {
                  sat: [
                    {
                      id: 1,
                      title: "کلاس ریاضی",
                      time: "16:00",
                      type: "kelas"
                    },
                    {
                      id: 1,
                      title: "تکلیف شیمی",
                      time: "18:00",
                      type: "taklif"
                    },
                    {
                      id: 2,
                      title: "امتحان ریاضی",
                      time: "18:00",
                      type: "general"
                    }
                  ],

                  sun: [
                    {
                      id: 1,
                      title: "کلاس زیست",
                      time: "16:00",
                      type: "kelas"
                    },
                    {
                      id: 1,
                      title: "تکلیف ریاضی",
                      time: "17:00",
                      type: "taklif"
                    },
                    {
                      id: 1,
                      title: "امتحان شیمی",
                      time: "18:00",
                      type: "general"
                    }
                  ],

                  mon: [
                    {
                      id: 1,
                      title: "کلاس زیست",
                      time: "16:00",
                      type: "kelas"
                    },
                    {
                      id: 1,
                      title: "تکلیف شیمی",
                      time: "18:00",
                      type: "taklif"
                    }
                  ],

                  tue: [
                    {
                      id: 1,
                      title: "کلاس زیست",
                      time: "16:00",
                      type: "kelas"
                    },
                    {
                      id: 1,
                      title: "تکلیف شیمی",
                      time: "18:00",
                      type: "taklif"
                    }
                  ],

                  wed: [
                    {
                      id: 1,
                      title: "کلاس زیست",
                      time: "16:00",
                      type: "kelas"
                    },
                    {
                      id: 1,
                      title: "تکلیف شیمی",
                      time: "18:00",
                      type: "taklif"
                    }
                  ],

                  thu: [
                    {
                      id: 1,
                      title: "کلاس زیست",
                      time: "16:00",
                      type: "kelas"
                    },
                    {
                      id: 1,
                      title: "تکلیف شیمی",
                      time: "18:00",
                      type: "taklif"
                    }
                  ],

                  fri: [
                    {
                      id: 1,
                      title: "کلاس زیست",
                      time: "16:00",
                      type: "kelas"
                    },
                    {
                      id: 1,
                      title: "تکلیف شیمی",
                      time: "18:00",
                      type: "taklif"
                    }
                  ]
                },
                nextWeek: {
                  sat: [
                    {
                      id: 1,
                      title: "کلاس ریاضی",
                      time: "16:00",
                      type: "kelas"
                    },
                    {
                      id: 1,
                      title: "تکلیف شیمی",
                      time: "18:00",
                      type: "taklif"
                    },
                    {
                      id: 2,
                      title: "امتحان ریاضی",
                      time: "18:00",
                      type: "general"
                    }
                  ],

                  sun: [
                    {
                      id: 1,
                      title: "کلاس زیست",
                      time: "16:00",
                      type: "kelas"
                    },
                    {
                      id: 1,
                      title: "تکلیف ریاضی",
                      time: "17:00",
                      type: "taklif"
                    },
                    {
                      id: 1,
                      title: "امتحان شیمی",
                      time: "18:00",
                      type: "general"
                    }
                  ],

                  mon: [
                    {
                      id: 1,
                      title: "کلاس زیست",
                      time: "16:00",
                      type: "kelas"
                    },
                    {
                      id: 1,
                      title: "تکلیف شیمی",
                      time: "18:00",
                      type: "taklif"
                    }
                  ],

                  tue: [
                    {
                      id: 1,
                      title: "کلاس زیست",
                      time: "16:00",
                      type: "kelas"
                    },
                    {
                      id: 1,
                      title: "تکلیف شیمی",
                      time: "18:00",
                      type: "taklif"
                    }
                  ],

                  wed: [
                    {
                      id: 1,
                      title: "کلاس زیست",
                      time: "16:00",
                      type: "kelas"
                    },
                    {
                      id: 1,
                      title: "تکلیف شیمی",
                      time: "18:00",
                      type: "taklif"
                    }
                  ],

                  thu: [
                    {
                      id: 1,
                      title: "کلاس زیست",
                      time: "16:00",
                      type: "kelas"
                    },
                    {
                      id: 1,
                      title: "تکلیف شیمی",
                      time: "18:00",
                      type: "taklif"
                    }
                  ],

                  fri: [
                    {
                      id: 1,
                      title: "کلاس زیست",
                      time: "16:00",
                      type: "kelas"
                    },
                    {
                      id: 1,
                      title: "تکلیف شیمی",
                      time: "18:00",
                      type: "taklif"
                    }
                  ]
                }
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "currentBarname",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "today"
      },
      {
        path: "takalif2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                "jan 20": [
                  {
                    id: 0,
                    title: "تمرین ریاضی",
                    time: "2 روز",
                    date: "jan 20",
                    link: "https://olympiad.plasmic.run/"
                  }
                ],
                "jan 22": [
                  {
                    id: 1,
                    title: "تکلیف زیست",
                    time: "5 روز",
                    date: "jan 22",
                    link: "https://olympiad.plasmic.run/"
                  }
                ]
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "notifications",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                old: {
                  "jan 18": [
                    {
                      title: "Old Message 3",
                      text: "Yet another old message Yet another old message Yet another old message Yet another old message Yet another old message Yet another old message",
                      time: "9:00 AM",
                      date: "jan 18",
                      from: {
                        name: "Old Sender 3",
                        image:
                          "https://cdn.ilna.ir/thumbnail/rsXVSYdsMqFA/XWHCw76VBsxziNocTLLHoesUW68OoqO1axxWWNC-1_29u4R4x8JTWBcfKP1V5I-i_ZE77bzt8EA,/589493_222.jpg"
                      }
                    },
                    {
                      title: "Old Message 4",
                      text: "Last old message",
                      time: "12:00 PM",
                      date: "jan 18",
                      from: {
                        name: "Old Sender 4",
                        image:
                          "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRz8OOBH4_GhI5thrqiU9iexGD47rpzsykyCQ&s"
                      }
                    }
                  ]
                },
                new: {
                  "jan 20": [
                    {
                      title: "New Message 3",
                      text: "Yet another new messageYet another new messageYet another new messageYet another new messageYet another new messageYet another new messageYet another new messageYet another new messageYet another new messageYet another new messageYet another new messageYet another new message",
                      time: "3:00 PM",
                      date: "jan 20",
                      from: {
                        name: "New Sender 3",
                        image:
                          "https://cdn.ilna.ir/thumbnail/rsXVSYdsMqFA/XWHCw76VBsxziNocTLLHoesUW68OoqO1axxWWNC-1_29u4R4x8JTWBcfKP1V5I-i_ZE77bzt8EA,/589493_222.jpg"
                      }
                    },
                    {
                      title: "New Message 4",
                      text: "Last new message",
                      time: "5:30 PM",
                      date: "jan 20",
                      from: {
                        name: "New Sender 4",
                        image:
                          "https://cdn.ilna.ir/thumbnail/rsXVSYdsMqFA/XWHCw76VBsxziNocTLLHoesUW68OoqO1axxWWNC-1_29u4R4x8JTWBcfKP1V5I-i_ZE77bzt8EA,/589493_222.jpg"
                      }
                    }
                  ],

                  "jan 22": [
                    {
                      title: "New Message 3",
                      text: "Yet another new message Yet another new message Yet another new message",
                      time: "3:00 PM",
                      date: "jan 22",
                      from: {
                        name: "New Sender 3",
                        image:
                          "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRz8OOBH4_GhI5thrqiU9iexGD47rpzsykyCQ&s"
                      }
                    },
                    {
                      title: "New Message 4",
                      text: "Last new messageLast new messageLast new message Last new message Last new message Last new message",
                      time: "5:30 PM",
                      date: "jan 22",
                      from: {
                        name: "New Sender 4",
                        image:
                          "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRz8OOBH4_GhI5thrqiU9iexGD47rpzsykyCQ&s"
                      }
                    }
                  ]
                }
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "currentJalase",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "currentClassInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {})();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "currentTakalifSection",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "takalif"
      },
      {
        path: "currentTaklifId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "asignment",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                id: 1,
                title: "Math Assignment",
                date: "2023-06-30",
                deadline: "2023-07-07",
                text: "Coomplete the exercises on pagesmpletoomplete the exercises on pagesmpletoomplete the exercises on pagesmplet",
                teacher: 1,
                session: {
                  id: 1,
                  title: "جلسه سوم",
                  mabhas: 1,
                  dars: 1
                },
                links: ["google.com", "amazon.com"],

                final_answere: 1,
                status: 1,
                bar: 70
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "answeres",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                {
                  id: 1,
                  student: 1,
                  asignment: 1,
                  title: "answere title",
                  desc: "a longer text describing the answere",
                  link: "additionallink.com",
                  date: "2023/12/12",
                  time: "23:49",
                  result: {
                    text: "a text that is the result",
                    grade: 65,
                    type: "try again"
                  }
                },
                {
                  id: 2,
                  student: 1,
                  asignment: 1,
                  title: "answere title",
                  desc: "a longer text describing the answere",
                  link: "additionallink.com",
                  date: "2023/12/12",
                  time: "23:49",
                  result: {
                    text: "a text that is the result",
                    grade: 65,
                    type: "try again"
                  }
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "currentKelashaSection",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "rooms"
      },
      {
        path: "rooms2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.queryRooms.data.response.rooms;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "currentKelas",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "session",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.queryRooms.data.response.rooms.find(
                room => room.room_id == $state.currentKelas
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "buttons",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                {
                  label: "درس ها",
                  value: "Dars Ha"
                },
                {
                  label: "برنامه",
                  value: "Barname"
                },
                {
                  label: "تکالیف",
                  value: "Takalif"
                },
                {
                  label: "کلاس ها",
                  value: "Kelas Ha"
                },
                {
                  label: "کارنامه",
                  value: "Karname"
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "currentBarnameSection",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "barname"
      },
      {
        path: "currrentGeneral",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "general",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                id: 1,
                title: "title of article",
                desc: "desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc desc ",
                links: ["google.com"]
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "currentKarnameSection",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "darsha"
      },
      {
        path: "gradesReport",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                terms: $state.termsOveralls,
                overall: 75
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "currentTerm",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "termInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                title: "ترم اول",
                overal: 78,
                grades: [
                  {
                    title: "تکلیف شیمی",
                    grade: 65,
                    factor: 2,
                    date: "2025-01-11"
                  },
                  {
                    title: "امتحان شیمی",
                    grade: 78,
                    factor: 3,
                    date: "2025-01-12"
                  }
                ],

                title: "ترم دوم",
                overal: 82,
                grades: [
                  {
                    title: "2 تکلیف شیمی",
                    grade: 65,
                    factor: 2,
                    date: "2025-01-11"
                  },
                  {
                    title: "2 امتحان شیمی",
                    grade: 78,
                    factor: 3,
                    date: "2025-01-12"
                  }
                ]
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "showAsignmentsInClass",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          '<div id="36657086919"><script type="text/JavaScript" src="https://www.aparat.com/embed/lexvq68?data[rnddiv]=36657086919&data[responsive]=yes"></script></div>'
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("token");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "oldNotifs",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                notifs = $queries.queryNotifs.data.response.NOTIFS.filter(
                  notif => notif.notif_id <= $state.highNotif
                );
                notifs = notifs.filter(
                  (notif, index, self) =>
                    index === self.findIndex(t => t.id === notif.id)
                );
                notifs.sort((a, b) => a.sent_at - b.sent_at);
                const results = notifs.reduce((acc, curr) => {
                  if (!acc[curr.month + " " + curr.day]) {
                    acc[curr.month + " " + curr.day] = [];
                  }
                  acc[curr.month + " " + curr.day].push(curr);
                  return acc;
                }, {});
                return results;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "newNotifs",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                notifs = $queries.queryNotifs.data.response.NOTIFS.filter(
                  notif => notif.notif_id > $state.highNotif
                );
                notifs = notifs.filter(
                  (notif, index, self) =>
                    index === self.findIndex(t => t.id === notif.id)
                );
                notifs.sort((a, b) => a.sent_at - b.sent_at);
                const results = notifs.reduce((acc, curr) => {
                  if (!acc[curr.month + " " + curr.day]) {
                    acc[curr.month + " " + curr.day] = [];
                  }
                  acc[curr.month + " " + curr.day].push(curr);
                  return acc;
                }, {});
                return results;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "notifs",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                old: $state.oldNotifs,
                new: $state.newNotifs
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "currentKarnameDars",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "termsOveralls",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "overallGrade",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const data = $state.termsOveralls;
                const weightedSum = data.reduce(
                  (acc, curr) => acc + curr.overall * curr.units,
                  0
                );
                const totalUnits = data.reduce(
                  (acc, curr) => acc + curr.units,
                  0
                );
                const weightedAverage = weightedSum / totalUnits;
                return Math.round(weightedAverage * 100) / 100;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "schedule",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const list3 = $queries.querySchedule.data.response.weeklies;
                const list2 = $queries.querySchedule.data.response.events;
                const dateObjects = [...list2];
                const now = new Date();
                const startOfWeek = new Date(now);
                const dayOfWeek = now.getDay();
                startOfWeek.setDate(now.getDate() - ((dayOfWeek + 1) % 7));
                startOfWeek.setHours(0, 0, 0, 0);
                const endOfWeek = new Date(startOfWeek);
                endOfWeek.setDate(startOfWeek.getDate() + 6);
                endOfWeek.setHours(23, 59, 59, 999);
                const startOfNextWeek = new Date(endOfWeek);
                startOfNextWeek.setDate(endOfWeek.getDate());
                const endOfNextWeek = new Date(startOfNextWeek);
                endOfNextWeek.setDate(startOfNextWeek.getDate() + 6);
                endOfNextWeek.setHours(23, 59, 59, 999);
                const categorized = {
                  currentWeek: {
                    Sat: [],
                    Sun: [],
                    Mon: [],
                    Tue: [],
                    Wed: [],
                    Thu: [],
                    Fri: []
                  },
                  nextWeek: {
                    Sat: [],
                    Sun: [],
                    Mon: [],
                    Tue: [],
                    Wed: [],
                    Thu: [],
                    Fri: []
                  },
                  notInWeeks: {
                    Sat: [],
                    Sun: [],
                    Mon: [],
                    Tue: [],
                    Wed: [],
                    Thu: [],
                    Fri: []
                  }
                };
                function getDayOfWeek(date) {
                  const days = [
                    "Sat",
                    "Sun",
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thu",
                    "Fri"
                  ];

                  const dayIndex = (new Date(date).getDay() + 1) % 7;
                  return days[dayIndex];
                }
                dateObjects.forEach(obj => {
                  const timestamp = new Date(obj.date).getTime();
                  const day = getDayOfWeek(obj.date);
                  if (
                    timestamp >= startOfWeek.getTime() &&
                    timestamp <= endOfWeek.getTime()
                  ) {
                    categorized.currentWeek[day].push(obj);
                  } else if (
                    timestamp >= startOfNextWeek.getTime() &&
                    timestamp <= endOfNextWeek.getTime()
                  ) {
                    categorized.nextWeek[day].push(obj);
                  } else {
                    categorized.notInWeeks[day].push(obj);
                  }
                });
                list3.forEach(obj => {
                  const day =
                    obj.day.charAt(0).toUpperCase() + obj.day.slice(1);
                  const newObj = {
                    ...obj,
                    type: "classes"
                  };
                  if (categorized.currentWeek[day]) {
                    categorized.currentWeek[day].push(newObj);
                  }
                  if (categorized.nextWeek[day]) {
                    categorized.nextWeek[day].push(newObj);
                  }
                });
                Object.keys(categorized).forEach(week => {
                  Object.keys(categorized[week]).forEach(day => {
                    categorized[week][day].sort((a, b) => {
                      const timeA = a.time.split(":").map(Number);
                      const timeB = b.time.split(":").map(Number);
                      return timeA[0] - timeB[0] || timeA[1] - timeB[1];
                    });
                  });
                });
                return categorized;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "tokenStatus",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return !(
                $state.lastRequest.data.response.status == 401 ||
                $state.lastRequest.data.response.status == 403 ||
                $state.lastRequest.data.statusCode == 403
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "asignmentComponent.asignment",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {};
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "showWall",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "lastRequest",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.queryStart;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "highNotif",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.queryNotifs.data.response.NOTIFS[0].high_notif;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "lastNotif",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return Math.max(
                ...$queries.queryNotifs.data.response.NOTIFS.map(
                  notif => notif.notif_id
                )
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    queryStart: usePlasmicDataOp(() => {
      return {
        sourceId: "oFGo9etX3UbW3vpYoEjNm1",
        opId: "a873befc-a299-48d3-9246-1489dc2a03db",
        userArgs: {
          headers: [$state.token]
        },
        cacheKey: `plasmic.$.a873befc-a299-48d3-9246-1489dc2a03db.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryNotifs: usePlasmicDataOp(() => {
      return {
        sourceId: "oFGo9etX3UbW3vpYoEjNm1",
        opId: "67688ffe-2f6d-43fc-9043-74a1e3ca25d2",
        userArgs: {
          headers: [$state.token]
        },
        cacheKey: `plasmic.$.67688ffe-2f6d-43fc-9043-74a1e3ca25d2.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryDarsha: usePlasmicDataOp(() => {
      return {
        sourceId: "oFGo9etX3UbW3vpYoEjNm1",
        opId: "4a723ff9-de7a-4e55-81ff-7f27f0a1b0e7",
        userArgs: {
          headers: [$state.token]
        },
        cacheKey: `plasmic.$.4a723ff9-de7a-4e55-81ff-7f27f0a1b0e7.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryRooms: usePlasmicDataOp(() => {
      return {
        sourceId: "oFGo9etX3UbW3vpYoEjNm1",
        opId: "8b2df723-9d66-465b-8c74-f642b38cfe5e",
        userArgs: {
          headers: [$state.token]
        },
        cacheKey: `plasmic.$.8b2df723-9d66-465b-8c74-f642b38cfe5e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryTakalif: usePlasmicDataOp(() => {
      return {
        sourceId: "oFGo9etX3UbW3vpYoEjNm1",
        opId: "b93ca4b0-41a0-40a2-ae10-1b213beafe12",
        userArgs: {
          headers: [$state.token]
        },
        cacheKey: `plasmic.$.b93ca4b0-41a0-40a2-ae10-1b213beafe12.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    querySchedule: usePlasmicDataOp(() => {
      return {
        sourceId: "oFGo9etX3UbW3vpYoEjNm1",
        opId: "d0b8a0fe-cc0b-49b5-a585-9ec36557b580",
        userArgs: {
          headers: [$state.token]
        },
        cacheKey: `plasmic.$.d0b8a0fe-cc0b-49b5-a585-9ec36557b580.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          styleTokensClassNames_antd_5_hostless,
          sty.root
        )}
      >
        {(() => {
          try {
            return !$queries.queryStart.isLoading && !$state.tokenStatus;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"loginError"}
            data-plasmic-override={overrides.loginError}
            className={classNames(projectcss.all, sty.loginError)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___004Wr
              )}
            >
              {
                "\u0646\u06cc\u0627\u0632 \u0628\u0647 \u0644\u0627\u06af\u06cc\u0646 \u062f\u0627\u0631\u06cc\u062f"
              }
            </div>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              onClick={async event => {
                const $steps = {};

                $steps["goToLogin"] = true
                  ? (() => {
                      const actionArgs = { destination: `/login/[from]` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToLogin"] != null &&
                  typeof $steps["goToLogin"] === "object" &&
                  typeof $steps["goToLogin"].then === "function"
                ) {
                  $steps["goToLogin"] = await $steps["goToLogin"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lKzBg
                )}
              >
                {"\u0648\u0631\u0648\u062f"}
              </div>
            </Button>
          </div>
        ) : null}
        {(() => {
          try {
            return $queries.queryStart.isLoading;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"loading"}
            data-plasmic-override={overrides.loading}
            className={classNames(projectcss.all, sty.loading)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dcy7V
              )}
            >
              {"Loading..."}
            </div>
          </div>
        ) : null}
        {(() => {
          try {
            return !$queries.queryStart.isLoading && $state.tokenStatus;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__viqpz)}
            dir={"rtl"}
          >
            {(() => {
              try {
                return $queries.queryNotifs.data.response.status == 200;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"pageContent"}
                data-plasmic-override={overrides.pageContent}
                className={classNames(projectcss.all, sty.pageContent)}
              >
                {(() => {
                  try {
                    return $state.currentPage === "Dars Ha";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"darsHa"}
                    data-plasmic-override={overrides.darsHa}
                    className={classNames(projectcss.all, sty.darsHa)}
                  >
                    {(() => {
                      try {
                        return $state.currentDarsHaSection === "darsha";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"darsha"}
                        data-plasmic-override={overrides.darsha}
                        className={classNames(projectcss.all, sty.darsha)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1AUps
                          )}
                        >
                          {"\u062f\u0631\u0633 \u0647\u0627"}
                        </div>
                        {(() => {
                          try {
                            return $state.fields.length > 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                          ? (_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.fields;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__wy6Hz
                                  )}
                                  key={currentIndex}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateShowWall"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["showWall"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateShowWall"] != null &&
                                      typeof $steps["updateShowWall"] ===
                                        "object" &&
                                      typeof $steps["updateShowWall"].then ===
                                        "function"
                                    ) {
                                      $steps["updateShowWall"] = await $steps[
                                        "updateShowWall"
                                      ];
                                    }

                                    $steps["updateCurrentDars"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["currentDars"]
                                            },
                                            operation: 0,
                                            value: currentItem.dars_id
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateCurrentDars"] != null &&
                                      typeof $steps["updateCurrentDars"] ===
                                        "object" &&
                                      typeof $steps["updateCurrentDars"]
                                        .then === "function"
                                    ) {
                                      $steps["updateCurrentDars"] =
                                        await $steps["updateCurrentDars"];
                                    }

                                    $steps["updateCurrentDarsHaSection"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "currentDarsHaSection"
                                              ]
                                            },
                                            operation: 0,
                                            value: "mabahes"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateCurrentDarsHaSection"] !=
                                        null &&
                                      typeof $steps[
                                        "updateCurrentDarsHaSection"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateCurrentDarsHaSection"
                                      ].then === "function"
                                    ) {
                                      $steps["updateCurrentDarsHaSection"] =
                                        await $steps[
                                          "updateCurrentDarsHaSection"
                                        ];
                                    }

                                    $steps["httpGet"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "oFGo9etX3UbW3vpYoEjNm1",
                                              opId: "0d7fb31d-4268-4f13-ac99-d972f8a62ea4",
                                              userArgs: {
                                                headers: [$state.token],

                                                params: [currentItem.dars_id]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: null,
                                              roleId: null
                                            },
                                            continueOnError: true
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["httpGet"] != null &&
                                      typeof $steps["httpGet"] === "object" &&
                                      typeof $steps["httpGet"].then ===
                                        "function"
                                    ) {
                                      $steps["httpGet"] = await $steps[
                                        "httpGet"
                                      ];
                                    }

                                    $steps["updateLastRequest"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["lastRequest"]
                                            },
                                            operation: 0,
                                            value: $steps.httpGet
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateLastRequest"] != null &&
                                      typeof $steps["updateLastRequest"] ===
                                        "object" &&
                                      typeof $steps["updateLastRequest"]
                                        .then === "function"
                                    ) {
                                      $steps["updateLastRequest"] =
                                        await $steps["updateLastRequest"];
                                    }

                                    $steps["updateMabahes2"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["mabahes2"]
                                            },
                                            operation: 0,
                                            value:
                                              $steps.httpGet.data.response
                                                .mabahes
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateMabahes2"] != null &&
                                      typeof $steps["updateMabahes2"] ===
                                        "object" &&
                                      typeof $steps["updateMabahes2"].then ===
                                        "function"
                                    ) {
                                      $steps["updateMabahes2"] = await $steps[
                                        "updateMabahes2"
                                      ];
                                    }

                                    $steps["updateShowWall2"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["showWall"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateShowWall2"] != null &&
                                      typeof $steps["updateShowWall2"] ===
                                        "object" &&
                                      typeof $steps["updateShowWall2"].then ===
                                        "function"
                                    ) {
                                      $steps["updateShowWall2"] = await $steps[
                                        "updateShowWall2"
                                      ];
                                    }
                                  }}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__jl7Gn
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.title;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              );
                            })
                          : null}
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $state.currentDarsHaSection === "mabahes";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"mabahes"}
                        data-plasmic-override={overrides.mabahes}
                        className={classNames(projectcss.all, sty.mabahes)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4Qg3W
                          )}
                        >
                          {"\u0645\u0628\u0627\u062d\u062b"}
                        </div>
                        {(() => {
                          try {
                            return $state.mabahes2.length > 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                          ? (_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.mabahes2;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___2USMy
                                  )}
                                  key={currentIndex}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateShowWall"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["showWall"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateShowWall"] != null &&
                                      typeof $steps["updateShowWall"] ===
                                        "object" &&
                                      typeof $steps["updateShowWall"].then ===
                                        "function"
                                    ) {
                                      $steps["updateShowWall"] = await $steps[
                                        "updateShowWall"
                                      ];
                                    }

                                    $steps["updateCurrentMabhas"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["currentMabhas"]
                                            },
                                            operation: 0,
                                            value: currentItem.id
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateCurrentMabhas"] != null &&
                                      typeof $steps["updateCurrentMabhas"] ===
                                        "object" &&
                                      typeof $steps["updateCurrentMabhas"]
                                        .then === "function"
                                    ) {
                                      $steps["updateCurrentMabhas"] =
                                        await $steps["updateCurrentMabhas"];
                                    }

                                    $steps["updateCurrentDarsHaSection"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "currentDarsHaSection"
                                              ]
                                            },
                                            operation: 0,
                                            value: "jalasat"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateCurrentDarsHaSection"] !=
                                        null &&
                                      typeof $steps[
                                        "updateCurrentDarsHaSection"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateCurrentDarsHaSection"
                                      ].then === "function"
                                    ) {
                                      $steps["updateCurrentDarsHaSection"] =
                                        await $steps[
                                          "updateCurrentDarsHaSection"
                                        ];
                                    }

                                    $steps["httpGet"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            continueOnError: true,
                                            dataOp: {
                                              sourceId:
                                                "oFGo9etX3UbW3vpYoEjNm1",
                                              opId: "625278a0-dfaa-4050-bf6a-b6c814ba7107",
                                              userArgs: {
                                                headers: [$state.token],

                                                params: [currentItem.id]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: null,
                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["httpGet"] != null &&
                                      typeof $steps["httpGet"] === "object" &&
                                      typeof $steps["httpGet"].then ===
                                        "function"
                                    ) {
                                      $steps["httpGet"] = await $steps[
                                        "httpGet"
                                      ];
                                    }

                                    $steps["updateLastRequest"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["lastRequest"]
                                            },
                                            operation: 0,
                                            value: $steps.httpGet
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateLastRequest"] != null &&
                                      typeof $steps["updateLastRequest"] ===
                                        "object" &&
                                      typeof $steps["updateLastRequest"]
                                        .then === "function"
                                    ) {
                                      $steps["updateLastRequest"] =
                                        await $steps["updateLastRequest"];
                                    }

                                    $steps["updateJalasat"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["jalasat"]
                                            },
                                            operation: 0,
                                            value:
                                              $steps.httpGet.data.response
                                                .jalasat
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateJalasat"] != null &&
                                      typeof $steps["updateJalasat"] ===
                                        "object" &&
                                      typeof $steps["updateJalasat"].then ===
                                        "function"
                                    ) {
                                      $steps["updateJalasat"] = await $steps[
                                        "updateJalasat"
                                      ];
                                    }

                                    $steps["updateShowWall2"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["showWall"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateShowWall2"] != null &&
                                      typeof $steps["updateShowWall2"] ===
                                        "object" &&
                                      typeof $steps["updateShowWall2"].then ===
                                        "function"
                                    ) {
                                      $steps["updateShowWall2"] = await $steps[
                                        "updateShowWall2"
                                      ];
                                    }
                                  }}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__njBv2
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.title;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              );
                            })
                          : null}
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__llPQ)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateCurrentDarsHaSection"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["currentDarsHaSection"]
                                    },
                                    operation: 0,
                                    value: "darsha"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCurrentDarsHaSection"] != null &&
                              typeof $steps["updateCurrentDarsHaSection"] ===
                                "object" &&
                              typeof $steps["updateCurrentDarsHaSection"]
                                .then === "function"
                            ) {
                              $steps["updateCurrentDarsHaSection"] =
                                await $steps["updateCurrentDarsHaSection"];
                            }
                          }}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $state.currentDarsHaSection === "jalasat";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"jalasat2"}
                        data-plasmic-override={overrides.jalasat2}
                        className={classNames(projectcss.all, sty.jalasat2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tUH5
                          )}
                        >
                          {"\u062c\u0633\u0644\u0647 \u0647\u0627"}
                        </div>
                        {(() => {
                          try {
                            return true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                          ? (_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.jalasat;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ikQx1
                                  )}
                                  key={currentIndex}
                                >
                                  {(() => {
                                    try {
                                      return currentItem.title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__c6WH7
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateShowWall"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["showWall"]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateShowWall"] != null &&
                                          typeof $steps["updateShowWall"] ===
                                            "object" &&
                                          typeof $steps["updateShowWall"]
                                            .then === "function"
                                        ) {
                                          $steps["updateShowWall"] =
                                            await $steps["updateShowWall"];
                                        }

                                        $steps["updateCurrentDarsHaSection"] =
                                          true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "currentDarsHaSection"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: "jalase"
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps[
                                            "updateCurrentDarsHaSection"
                                          ] != null &&
                                          typeof $steps[
                                            "updateCurrentDarsHaSection"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateCurrentDarsHaSection"
                                          ].then === "function"
                                        ) {
                                          $steps["updateCurrentDarsHaSection"] =
                                            await $steps[
                                              "updateCurrentDarsHaSection"
                                            ];
                                        }

                                        $steps["updateCurrentJalase"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "currentJalase"
                                                  ]
                                                },
                                                operation: 0,
                                                value: $state.jalasat
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateCurrentJalase"] !=
                                            null &&
                                          typeof $steps[
                                            "updateCurrentJalase"
                                          ] === "object" &&
                                          typeof $steps["updateCurrentJalase"]
                                            .then === "function"
                                        ) {
                                          $steps["updateCurrentJalase"] =
                                            await $steps["updateCurrentJalase"];
                                        }

                                        $steps["httpGet"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "oFGo9etX3UbW3vpYoEjNm1",
                                                  opId: "10b4c817-61f9-472d-b203-a66747e54487",
                                                  userArgs: {
                                                    params: [currentItem.id],

                                                    headers: [$state.token]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: null,
                                                  roleId: null
                                                },
                                                continueOnError: true
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["httpGet"] != null &&
                                          typeof $steps["httpGet"] ===
                                            "object" &&
                                          typeof $steps["httpGet"].then ===
                                            "function"
                                        ) {
                                          $steps["httpGet"] = await $steps[
                                            "httpGet"
                                          ];
                                        }

                                        $steps["updateLastRequest"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["lastRequest"]
                                                },
                                                operation: 0,
                                                value: $steps.httpGet
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateLastRequest"] != null &&
                                          typeof $steps["updateLastRequest"] ===
                                            "object" &&
                                          typeof $steps["updateLastRequest"]
                                            .then === "function"
                                        ) {
                                          $steps["updateLastRequest"] =
                                            await $steps["updateLastRequest"];
                                        }

                                        $steps["updateCurrentClassInfo"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "currentClassInfo"
                                                  ]
                                                },
                                                operation: 0,
                                                value:
                                                  $steps.httpGet.data.response
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateCurrentClassInfo"] !=
                                            null &&
                                          typeof $steps[
                                            "updateCurrentClassInfo"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateCurrentClassInfo"
                                          ].then === "function"
                                        ) {
                                          $steps["updateCurrentClassInfo"] =
                                            await $steps[
                                              "updateCurrentClassInfo"
                                            ];
                                        }

                                        $steps["updateShowWall2"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["showWall"]
                                                },
                                                operation: 0,
                                                value: false
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateShowWall2"] != null &&
                                          typeof $steps["updateShowWall2"] ===
                                            "object" &&
                                          typeof $steps["updateShowWall2"]
                                            .then === "function"
                                        ) {
                                          $steps["updateShowWall2"] =
                                            await $steps["updateShowWall2"];
                                        }
                                      }}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.title;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  ) : null}
                                </div>
                              );
                            })
                          : null}
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__adLkh)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateCurrentDarsHaSection"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["currentDarsHaSection"]
                                    },
                                    operation: 0,
                                    value: "mabahes"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCurrentDarsHaSection"] != null &&
                              typeof $steps["updateCurrentDarsHaSection"] ===
                                "object" &&
                              typeof $steps["updateCurrentDarsHaSection"]
                                .then === "function"
                            ) {
                              $steps["updateCurrentDarsHaSection"] =
                                await $steps["updateCurrentDarsHaSection"];
                            }
                          }}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $state.currentDarsHaSection === "jalase";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"jalase"}
                        data-plasmic-override={overrides.jalase}
                        className={classNames(projectcss.all, sty.jalase)}
                      >
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__qUZ)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateCurrentDarsHaSection"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["currentDarsHaSection"]
                                    },
                                    operation: 0,
                                    value: "jalasat"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCurrentDarsHaSection"] != null &&
                              typeof $steps["updateCurrentDarsHaSection"] ===
                                "object" &&
                              typeof $steps["updateCurrentDarsHaSection"]
                                .then === "function"
                            ) {
                              $steps["updateCurrentDarsHaSection"] =
                                await $steps["updateCurrentDarsHaSection"];
                            }
                          }}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pzzDy
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $state.currentClassInfo;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__sSpd
                                )}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lBaG8
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.jalase.title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__fqpl6)}
                                  displayHeight={"400px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"700px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/main_ui/images/microsoftEdge4QKqDeAZfCUnsplashJpg.jpg",
                                    fullWidth: 1920,
                                    fullHeight: 1280,
                                    aspectRatio: undefined
                                  }}
                                />

                                <Embed
                                  data-plasmic-name={"embedHtml"}
                                  data-plasmic-override={overrides.embedHtml}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.embedHtml
                                  )}
                                  code={(() => {
                                    try {
                                      return currentItem.jalase.video;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "<div><h1>hi</h1></div>";
                                      }
                                      throw e;
                                    }
                                  })()}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__fqtt8
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__c27Fp
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.jalase.date;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__bOp2Z
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__th2Mp
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              currentItem.jalase["first name"] +
                                              " " +
                                              currentItem.jalase["last name"]
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__cFJiD)}
                                      displayHeight={"50px"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"50px"}
                                      loading={"lazy"}
                                      src={(() => {
                                        try {
                                          return currentItem.jalase.profile;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              src: "/plasmic/main_ui/images/download1Jpg.jpg",
                                              fullWidth: 160,
                                              fullHeight: 160,
                                              aspectRatio: undefined
                                            };
                                          }
                                          throw e;
                                        }
                                      })()}
                                    />
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fhgN1
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.jalase.desc;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___7XYxw
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___0IOoV
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__ejK7E
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateShowAsignmentsInClass"] =
                                          true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "showAsignmentsInClass"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: true
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps[
                                            "updateShowAsignmentsInClass"
                                          ] != null &&
                                          typeof $steps[
                                            "updateShowAsignmentsInClass"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateShowAsignmentsInClass"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "updateShowAsignmentsInClass"
                                          ] = await $steps[
                                            "updateShowAsignmentsInClass"
                                          ];
                                        }
                                      }}
                                    >
                                      <SelectableButton
                                        className={classNames(
                                          "__wab_instance",
                                          sty.selectableButton__hbPft
                                        )}
                                        content={
                                          "\u062a\u06a9\u0644\u06cc\u0641 \u0647\u0627"
                                        }
                                        isSelected={(() => {
                                          try {
                                            return $state.showAsignmentsInClass;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__myRjb
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateShowAsignmentsInClass"] =
                                          true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "showAsignmentsInClass"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: false
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps[
                                            "updateShowAsignmentsInClass"
                                          ] != null &&
                                          typeof $steps[
                                            "updateShowAsignmentsInClass"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateShowAsignmentsInClass"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "updateShowAsignmentsInClass"
                                          ] = await $steps[
                                            "updateShowAsignmentsInClass"
                                          ];
                                        }
                                      }}
                                    >
                                      <SelectableButton
                                        className={classNames(
                                          "__wab_instance",
                                          sty.selectableButton___4NY7V
                                        )}
                                        content={
                                          "\u0641\u0627\u06cc\u0644 \u0647\u0627"
                                        }
                                        isSelected={(() => {
                                          try {
                                            return !$state.showAsignmentsInClass;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />
                                    </div>
                                  </div>
                                  {(() => {
                                    try {
                                      return $state.showAsignmentsInClass;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      data-plasmic-name={"taklif"}
                                      data-plasmic-override={overrides.taklif}
                                      className={classNames(
                                        projectcss.all,
                                        sty.taklif
                                      )}
                                    >
                                      {(() => {
                                        try {
                                          return currentItem.takalif.length > 0;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })()
                                        ? (_par =>
                                            !_par
                                              ? []
                                              : Array.isArray(_par)
                                              ? _par
                                              : [_par])(
                                            (() => {
                                              try {
                                                return currentItem.takalif;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()
                                          ).map(
                                            (
                                              __plasmic_item_1,
                                              __plasmic_idx_1
                                            ) => {
                                              const currentItem =
                                                __plasmic_item_1;
                                              const currentIndex =
                                                __plasmic_idx_1;
                                              return (
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__pivoF
                                                  )}
                                                  key={currentIndex}
                                                  onClick={async event => {
                                                    const $steps = {};

                                                    $steps["wallcurrentPage4"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "showWall"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value: true
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "wallcurrentPage4"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "wallcurrentPage4"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "wallcurrentPage4"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "wallcurrentPage4"
                                                      ] = await $steps[
                                                        "wallcurrentPage4"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateCurrentTaklifId"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "currentTaklifId"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value:
                                                              currentItem.id
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCurrentTaklifId"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCurrentTaklifId"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCurrentTaklifId"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCurrentTaklifId"
                                                      ] = await $steps[
                                                        "updateCurrentTaklifId"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateCurrentPage"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "currentPage"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: "Takalif"
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCurrentPage"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCurrentPage"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCurrentPage"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCurrentPage"
                                                      ] = await $steps[
                                                        "updateCurrentPage"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateCurrentPage2"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "currentTakalifSection"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: "taklif"
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCurrentPage2"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCurrentPage2"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCurrentPage2"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCurrentPage2"
                                                      ] = await $steps[
                                                        "updateCurrentPage2"
                                                      ];
                                                    }

                                                    $steps["httpTaklif"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            dataOp: {
                                                              sourceId:
                                                                "oFGo9etX3UbW3vpYoEjNm1",
                                                              opId: "309d4c4e-c317-4882-b06b-178e546fa7e8",
                                                              userArgs: {
                                                                params: [
                                                                  currentItem.id
                                                                ],

                                                                headers: [
                                                                  $state.token
                                                                ]
                                                              },
                                                              cacheKey: null,
                                                              invalidatedKeys:
                                                                null,
                                                              roleId: null
                                                            },
                                                            continueOnError:
                                                              true
                                                          };
                                                          return (async ({
                                                            dataOp,
                                                            continueOnError
                                                          }) => {
                                                            try {
                                                              const response =
                                                                await executePlasmicDataOp(
                                                                  dataOp,
                                                                  {
                                                                    userAuthToken:
                                                                      dataSourcesCtx?.userAuthToken,
                                                                    user: dataSourcesCtx?.user
                                                                  }
                                                                );
                                                              await plasmicInvalidate(
                                                                dataOp.invalidatedKeys
                                                              );
                                                              return response;
                                                            } catch (e) {
                                                              if (
                                                                !continueOnError
                                                              ) {
                                                                throw e;
                                                              }
                                                              return e;
                                                            }
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["httpTaklif"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "httpTaklif"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "httpTaklif"
                                                      ].then === "function"
                                                    ) {
                                                      $steps["httpTaklif"] =
                                                        await $steps[
                                                          "httpTaklif"
                                                        ];
                                                    }

                                                    $steps[
                                                      "updateCurrentPage4"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "lastRequest"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value:
                                                              $steps.httpTaklif
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCurrentPage4"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCurrentPage4"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCurrentPage4"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCurrentPage4"
                                                      ] = await $steps[
                                                        "updateCurrentPage4"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateCurrentPage3"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "asignmentComponent",
                                                                "asignment"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value:
                                                              $steps.httpTaklif
                                                                .data.response
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCurrentPage3"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCurrentPage3"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCurrentPage3"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCurrentPage3"
                                                      ] = await $steps[
                                                        "updateCurrentPage3"
                                                      ];
                                                    }

                                                    $steps["wallcurrentPage5"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "showWall"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value: false
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "wallcurrentPage5"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "wallcurrentPage5"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "wallcurrentPage5"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "wallcurrentPage5"
                                                      ] = await $steps[
                                                        "wallcurrentPage5"
                                                      ];
                                                    }
                                                  }}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.title;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              );
                                            }
                                          )
                                        : null}
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return !$state.showAsignmentsInClass;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      data-plasmic-name={"attachments"}
                                      data-plasmic-override={
                                        overrides.attachments
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.attachments
                                      )}
                                    >
                                      {(_par =>
                                        !_par
                                          ? []
                                          : Array.isArray(_par)
                                          ? _par
                                          : [_par])(
                                        (() => {
                                          try {
                                            return currentItem.attachments;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      ).map(
                                        (__plasmic_item_1, __plasmic_idx_1) => {
                                          const currentItem = __plasmic_item_1;
                                          const currentIndex = __plasmic_idx_1;
                                          return (
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link__gfETy
                                              )}
                                              component={Link}
                                              href={(() => {
                                                try {
                                                  return currentItem.link;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              key={currentIndex}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["runCode"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        customFunction:
                                                          async () => {
                                                            return undefined;
                                                          }
                                                      };
                                                      return (({
                                                        customFunction
                                                      }) => {
                                                        return customFunction();
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["runCode"] != null &&
                                                  typeof $steps["runCode"] ===
                                                    "object" &&
                                                  typeof $steps["runCode"]
                                                    .then === "function"
                                                ) {
                                                  $steps["runCode"] =
                                                    await $steps["runCode"];
                                                }
                                              }}
                                              platform={"nextjs"}
                                              target={"_blank"}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return currentItem.title;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </PlasmicLink__>
                                          );
                                        }
                                      )}
                                    </div>
                                  ) : null}
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
                <div
                  data-plasmic-name={"kelasHa"}
                  data-plasmic-override={overrides.kelasHa}
                  className={classNames(projectcss.all, sty.kelasHa)}
                >
                  <div
                    data-plasmic-name={"rooms"}
                    data-plasmic-override={overrides.rooms}
                    className={classNames(projectcss.all, sty.rooms)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__n36K
                      )}
                    >
                      {"\u0627\u062a\u0627\u0642 \u0647\u0627"}
                    </div>
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.rooms2;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pimKm
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateCurrentKelas"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["currentKelas"]
                                    },
                                    operation: 0,
                                    value: currentItem.room_id
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCurrentKelas"] != null &&
                              typeof $steps["updateCurrentKelas"] ===
                                "object" &&
                              typeof $steps["updateCurrentKelas"].then ===
                                "function"
                            ) {
                              $steps["updateCurrentKelas"] = await $steps[
                                "updateCurrentKelas"
                              ];
                            }

                            $steps["updateCurrentKelashaSection"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["currentKelashaSection"]
                                    },
                                    operation: 0,
                                    value: "kelas"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCurrentKelashaSection"] != null &&
                              typeof $steps["updateCurrentKelashaSection"] ===
                                "object" &&
                              typeof $steps["updateCurrentKelashaSection"]
                                .then === "function"
                            ) {
                              $steps["updateCurrentKelashaSection"] =
                                await $steps["updateCurrentKelashaSection"];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vyfKj
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                  {(() => {
                    try {
                      return $state.currentKelashaSection === "kelas";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"kelas2"}
                      data-plasmic-override={overrides.kelas2}
                      className={classNames(projectcss.all, sty.kelas2)}
                    >
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__fFklw)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateCurrentKelashaSection"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["currentKelashaSection"]
                                  },
                                  operation: 0,
                                  value: "rooms"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateCurrentKelashaSection"] != null &&
                            typeof $steps["updateCurrentKelashaSection"] ===
                              "object" &&
                            typeof $steps["updateCurrentKelashaSection"]
                              .then === "function"
                          ) {
                            $steps["updateCurrentKelashaSection"] =
                              await $steps["updateCurrentKelashaSection"];
                          }
                        }}
                        role={"img"}
                      />

                      <OnlineSession
                        data-plasmic-name={"onlineSession"}
                        data-plasmic-override={overrides.onlineSession}
                        className={classNames(
                          "__wab_instance",
                          sty.onlineSession
                        )}
                        session2={(() => {
                          try {
                            return $state.session;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                  ) : null}
                </div>
                {(() => {
                  try {
                    return $state.currentPage === "Karname";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"karname"}
                    data-plasmic-override={overrides.karname}
                    className={classNames(projectcss.all, sty.karname)}
                  >
                    {(() => {
                      try {
                        return $state.currentKarnameSection == "darsha";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"darsha2"}
                        data-plasmic-override={overrides.darsha2}
                        className={classNames(projectcss.all, sty.darsha2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7M2L
                          )}
                        >
                          {"\u062f\u0631\u0633 \u0647\u0627"}
                        </div>
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.fields;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__hAsDo
                              )}
                              key={currentIndex}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateShowWall"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["showWall"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateShowWall"] != null &&
                                  typeof $steps["updateShowWall"] ===
                                    "object" &&
                                  typeof $steps["updateShowWall"].then ===
                                    "function"
                                ) {
                                  $steps["updateShowWall"] = await $steps[
                                    "updateShowWall"
                                  ];
                                }

                                $steps["updateCurrentKarnameDars"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentKarnameDars"]
                                        },
                                        operation: 0,
                                        value: currentItem.id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentKarnameDars"] != null &&
                                  typeof $steps["updateCurrentKarnameDars"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentKarnameDars"]
                                    .then === "function"
                                ) {
                                  $steps["updateCurrentKarnameDars"] =
                                    await $steps["updateCurrentKarnameDars"];
                                }

                                $steps["updateCurrentKarnameSection"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "currentKarnameSection"
                                          ]
                                        },
                                        operation: 0,
                                        value: "overview"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentKarnameSection"] !=
                                    null &&
                                  typeof $steps[
                                    "updateCurrentKarnameSection"
                                  ] === "object" &&
                                  typeof $steps["updateCurrentKarnameSection"]
                                    .then === "function"
                                ) {
                                  $steps["updateCurrentKarnameSection"] =
                                    await $steps["updateCurrentKarnameSection"];
                                }

                                $steps["httpGet"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "oFGo9etX3UbW3vpYoEjNm1",
                                          opId: "d2901f81-fa94-4482-8d8a-aabf2e2a7385",
                                          userArgs: {
                                            headers: [$state.token],

                                            params: [currentItem.dars_id]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: null,
                                          roleId: null
                                        },
                                        continueOnError: true
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["httpGet"] != null &&
                                  typeof $steps["httpGet"] === "object" &&
                                  typeof $steps["httpGet"].then === "function"
                                ) {
                                  $steps["httpGet"] = await $steps["httpGet"];
                                }

                                $steps["updateLastRequest"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["lastRequest"]
                                        },
                                        operation: 0,
                                        value: $steps.httpGet
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateLastRequest"] != null &&
                                  typeof $steps["updateLastRequest"] ===
                                    "object" &&
                                  typeof $steps["updateLastRequest"].then ===
                                    "function"
                                ) {
                                  $steps["updateLastRequest"] = await $steps[
                                    "updateLastRequest"
                                  ];
                                }

                                $steps["updateTermsOveralls"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["termsOveralls"]
                                        },
                                        operation: 0,
                                        value:
                                          $steps.httpGet.data.response.terms
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateTermsOveralls"] != null &&
                                  typeof $steps["updateTermsOveralls"] ===
                                    "object" &&
                                  typeof $steps["updateTermsOveralls"].then ===
                                    "function"
                                ) {
                                  $steps["updateTermsOveralls"] = await $steps[
                                    "updateTermsOveralls"
                                  ];
                                }

                                $steps["updateShowWall2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["showWall"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateShowWall2"] != null &&
                                  typeof $steps["updateShowWall2"] ===
                                    "object" &&
                                  typeof $steps["updateShowWall2"].then ===
                                    "function"
                                ) {
                                  $steps["updateShowWall2"] = await $steps[
                                    "updateShowWall2"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hrh7M
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $state.currentKarnameSection == "overview";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"overview"}
                        data-plasmic-override={overrides.overview}
                        className={classNames(projectcss.all, sty.overview)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hBbwu
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__diwf
                            )}
                          >
                            {"\u0645\u0639\u062f\u0644 \u06a9\u0644"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kqE7R
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.overallGrade;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kbkjL
                          )}
                        >
                          {
                            "\u0645\u0639\u062f\u0644 \u062a\u0631\u0645 \u0647\u0627"
                          }
                        </div>
                        {(() => {
                          try {
                            return $state.gradesReport.terms.length > 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                          ? (_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.gradesReport.terms;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rMrWi
                                  )}
                                  key={currentIndex}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateShowWall"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["showWall"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateShowWall"] != null &&
                                      typeof $steps["updateShowWall"] ===
                                        "object" &&
                                      typeof $steps["updateShowWall"].then ===
                                        "function"
                                    ) {
                                      $steps["updateShowWall"] = await $steps[
                                        "updateShowWall"
                                      ];
                                    }

                                    $steps["updateCurrentTerm"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["currentTerm"]
                                            },
                                            operation: 0,
                                            value: currentItem.id
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateCurrentTerm"] != null &&
                                      typeof $steps["updateCurrentTerm"] ===
                                        "object" &&
                                      typeof $steps["updateCurrentTerm"]
                                        .then === "function"
                                    ) {
                                      $steps["updateCurrentTerm"] =
                                        await $steps["updateCurrentTerm"];
                                    }

                                    $steps["updateCurrentKarnameSection"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "currentKarnameSection"
                                              ]
                                            },
                                            operation: 0,
                                            value: "term"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateCurrentKarnameSection"] !=
                                        null &&
                                      typeof $steps[
                                        "updateCurrentKarnameSection"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateCurrentKarnameSection"
                                      ].then === "function"
                                    ) {
                                      $steps["updateCurrentKarnameSection"] =
                                        await $steps[
                                          "updateCurrentKarnameSection"
                                        ];
                                    }

                                    $steps["httpGet"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "oFGo9etX3UbW3vpYoEjNm1",
                                              opId: "56372880-d3ef-4caa-92b4-a882c0985ca7",
                                              userArgs: {
                                                params: [currentItem.term_id],

                                                headers: [$state.token]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: null,
                                              roleId: null
                                            },
                                            continueOnError: true
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["httpGet"] != null &&
                                      typeof $steps["httpGet"] === "object" &&
                                      typeof $steps["httpGet"].then ===
                                        "function"
                                    ) {
                                      $steps["httpGet"] = await $steps[
                                        "httpGet"
                                      ];
                                    }

                                    $steps["updateLastRequest"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["lastRequest"]
                                            },
                                            operation: 0,
                                            value: $steps.httpGet
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateLastRequest"] != null &&
                                      typeof $steps["updateLastRequest"] ===
                                        "object" &&
                                      typeof $steps["updateLastRequest"]
                                        .then === "function"
                                    ) {
                                      $steps["updateLastRequest"] =
                                        await $steps["updateLastRequest"];
                                    }

                                    $steps["updateTermInfo"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["termInfo"]
                                            },
                                            operation: 0,
                                            value: $steps.httpGet.data.response
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateTermInfo"] != null &&
                                      typeof $steps["updateTermInfo"] ===
                                        "object" &&
                                      typeof $steps["updateTermInfo"].then ===
                                        "function"
                                    ) {
                                      $steps["updateTermInfo"] = await $steps[
                                        "updateTermInfo"
                                      ];
                                    }

                                    $steps["updateShowWall2"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["showWall"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateShowWall2"] != null &&
                                      typeof $steps["updateShowWall2"] ===
                                        "object" &&
                                      typeof $steps["updateShowWall2"].then ===
                                        "function"
                                    ) {
                                      $steps["updateShowWall2"] = await $steps[
                                        "updateShowWall2"
                                      ];
                                    }
                                  }}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__xt9Hr
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.term_text;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bZbOx
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.overall;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              );
                            })
                          : null}
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__joNdd)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateCurrentKarnameSection"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["currentKarnameSection"]
                                    },
                                    operation: 0,
                                    value: "darsha"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCurrentKarnameSection"] != null &&
                              typeof $steps["updateCurrentKarnameSection"] ===
                                "object" &&
                              typeof $steps["updateCurrentKarnameSection"]
                                .then === "function"
                            ) {
                              $steps["updateCurrentKarnameSection"] =
                                await $steps["updateCurrentKarnameSection"];
                            }
                          }}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $state.currentKarnameSection == "term";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"term"}
                        data-plasmic-override={overrides.term}
                        className={classNames(projectcss.all, sty.term)}
                      >
                        <IconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___2FzN3
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateCurrentKarnameSection"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["currentKarnameSection"]
                                    },
                                    operation: 0,
                                    value: "overview"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCurrentKarnameSection"] != null &&
                              typeof $steps["updateCurrentKarnameSection"] ===
                                "object" &&
                              typeof $steps["updateCurrentKarnameSection"]
                                .then === "function"
                            ) {
                              $steps["updateCurrentKarnameSection"] =
                                await $steps["updateCurrentKarnameSection"];
                            }
                          }}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zxgSe
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.termInfo.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__z7Txz
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aziQ6
                            )}
                          >
                            {"\u0645\u0639\u062f\u0644 \u062a\u0631\u0645: "}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hl5Kr
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    // $state.termInfo.asignments

                                    (() => {
                                      const data = [
                                        ...$state.termInfo.asignments,
                                        ...$state.termInfo.exams
                                      ];
                                      const weightedSum = data.reduce(
                                        (acc, curr) =>
                                          acc + curr.grade * curr.factor,
                                        0
                                      );
                                      const totalUnits = data.reduce(
                                        (acc, curr) => acc + curr.factor,
                                        0
                                      );
                                      const weightedAverage =
                                        weightedSum / totalUnits;
                                      return (
                                        Math.round(weightedAverage * 100) / 100
                                      );
                                    })()
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__anx2V
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zBz4S
                            )}
                          >
                            {
                              "\u0627\u0645\u062a\u062d\u0627\u0646 \u0647\u0627"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sKpsJ
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___68ESl
                              )}
                            >
                              {"\u0639\u0646\u0648\u0627\u0646"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___1Fkzu
                              )}
                            >
                              {"\u062a\u0627\u0631\u06cc\u062e"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6Ks1Y
                              )}
                            >
                              {"\u0636\u0631\u06cc\u0628"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kxZsx
                              )}
                            >
                              {"\u0646\u0645\u0631\u0647"}
                            </div>
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $state.termInfo.exams;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__tocct
                                )}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__q9Wcl
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__mqu1H
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.title;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__oOb6K
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.date;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__y1QLn
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.factor;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ry81X
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.grade;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mQsra
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__deVsc
                            )}
                          >
                            {"\u062a\u06a9\u0627\u0644\u06cc\u0641"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___860Bt
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pzqK1
                              )}
                            >
                              {"\u0639\u0646\u0648\u0627\u0646"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rGdx1
                              )}
                            >
                              {"\u062a\u0627\u0631\u06cc\u062e"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0Lxx
                              )}
                            >
                              {"\u0636\u0631\u06cc\u0628"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rkDum
                              )}
                            >
                              {"\u0646\u0645\u0631\u0647"}
                            </div>
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $state.termInfo.asignments;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__xNiUa
                                )}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___8GI9
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___3Gccx
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.title;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___677Mm
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.date;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ympY
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.factor;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__b2Aix
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.grade;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.currentPage === "Barname";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"barname"}
                    data-plasmic-override={overrides.barname}
                    className={classNames(projectcss.all, sty.barname)}
                  >
                    {(() => {
                      try {
                        return $state.currentBarnameSection == "barname";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"barname3"}
                        data-plasmic-override={overrides.barname3}
                        className={classNames(projectcss.all, sty.barname3)}
                      >
                        <div
                          data-plasmic-name={"currentWeek"}
                          data-plasmic-override={overrides.currentWeek}
                          className={classNames(
                            projectcss.all,
                            sty.currentWeek
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qmu79
                            )}
                          >
                            {
                              "\u0647\u0641\u062a\u0647 \u062c\u0627\u0631\u06cc"
                            }
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return [
                                  { per: "شنبه", day: "sat", upper: "Sat" },
                                  { per: "یکشنبه", day: "sun", upper: "Sun" },
                                  { per: "دوشنبه", day: "mon", upper: "Mon" },
                                  { per: "سه شنبه", day: "tue", upper: "Tue" },
                                  { per: "چهارشنبه", day: "wed", upper: "Wed" },
                                  { per: "پنجشنبه", day: "thu", upper: "Thu" },
                                  { per: "جمعه", day: "fri", upper: "Fri" }
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentIte = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__frYu
                                )}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__eGkba
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateCurrentBarname"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["currentBarname"]
                                            },
                                            operation: 0,
                                            value: currentIte.day
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateCurrentBarname"] != null &&
                                      typeof $steps["updateCurrentBarname"] ===
                                        "object" &&
                                      typeof $steps["updateCurrentBarname"]
                                        .then === "function"
                                    ) {
                                      $steps["updateCurrentBarname"] =
                                        await $steps["updateCurrentBarname"];
                                    }
                                  }}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentIte.per;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u0634\u0646\u0628\u0647";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                {(() => {
                                  try {
                                    return (
                                      $state.currentBarname == currentIte.day
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()
                                  ? (_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return $state.schedule.currentWeek[
                                            currentIte.upper
                                          ];
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_1, __plasmic_idx_1) => {
                                        const currentItem = __plasmic_item_1;
                                        const currentIndex = __plasmic_idx_1;
                                        return (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__tLaPb
                                            )}
                                            key={currentIndex}
                                          >
                                            <div
                                              data-plasmic-name={"taklif3"}
                                              data-plasmic-override={
                                                overrides.taklif3
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.taklif3
                                              )}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["updateCurrentPage"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "currentPage"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: "Takalif"
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps["updateCurrentPage"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateCurrentPage"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateCurrentPage"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateCurrentPage"] =
                                                    await $steps[
                                                      "updateCurrentPage"
                                                    ];
                                                }

                                                $steps["updateCurrentPage2"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "currentTaklifId"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: currentItem.id
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "updateCurrentPage2"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "updateCurrentPage2"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateCurrentPage2"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateCurrentPage2"] =
                                                    await $steps[
                                                      "updateCurrentPage2"
                                                    ];
                                                }

                                                $steps["updateCurrentPage3"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "currentTakalifSection"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: "taklif"
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "updateCurrentPage3"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "updateCurrentPage3"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateCurrentPage3"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateCurrentPage3"] =
                                                    await $steps[
                                                      "updateCurrentPage3"
                                                    ];
                                                }
                                              }}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__pQpKh
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem.time;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__j30Ye
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem.title;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </div>
                                            {(() => {
                                              try {
                                                return (
                                                  currentItem.type == "classes"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <div
                                                data-plasmic-name={"kelas4"}
                                                data-plasmic-override={
                                                  overrides.kelas4
                                                }
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.kelas4
                                                )}
                                                onClick={async event => {
                                                  const $steps = {};

                                                  $steps["updateCurrentPage"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "currentPage"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: "Kelas Ha"
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "updateCurrentPage"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateCurrentPage"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateCurrentPage"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateCurrentPage"
                                                    ] = await $steps[
                                                      "updateCurrentPage"
                                                    ];
                                                  }

                                                  $steps["updateCurrentPage2"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "currentKelashaSection"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: "kelas"
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "updateCurrentPage2"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateCurrentPage2"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateCurrentPage2"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateCurrentPage2"
                                                    ] = await $steps[
                                                      "updateCurrentPage2"
                                                    ];
                                                  }

                                                  $steps["updateCurrentPage3"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "currentKelas"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value:
                                                              currentItem.room_id
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "updateCurrentPage3"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateCurrentPage3"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateCurrentPage3"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateCurrentPage3"
                                                    ] = await $steps[
                                                      "updateCurrentPage3"
                                                    ];
                                                  }
                                                }}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___2D7FZ
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.time;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__dg15C
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.title;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            ) : null}
                                            {(() => {
                                              try {
                                                return (
                                                  currentItem.type != "classes"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <div
                                                data-plasmic-name={"general3"}
                                                data-plasmic-override={
                                                  overrides.general3
                                                }
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.general3
                                                )}
                                                onClick={async event => {
                                                  const $steps = {};

                                                  $steps[
                                                    "updateCurrrentGeneral"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "currrentGeneral"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: currentItem.id
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "updateCurrrentGeneral"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateCurrrentGeneral"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateCurrrentGeneral"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateCurrrentGeneral"
                                                    ] = await $steps[
                                                      "updateCurrrentGeneral"
                                                    ];
                                                  }

                                                  $steps[
                                                    "updateCurrentBarnameSection"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "currentBarnameSection"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: "generic"
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "updateCurrentBarnameSection"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateCurrentBarnameSection"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateCurrentBarnameSection"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateCurrentBarnameSection"
                                                    ] = await $steps[
                                                      "updateCurrentBarnameSection"
                                                    ];
                                                  }
                                                }}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__wYpPu
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.time;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__evq6Y
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.title;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            ) : null}
                                          </div>
                                        );
                                      }
                                    )
                                  : null}
                              </div>
                            );
                          })}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___6N0Ic
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qc5JP
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentBarname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentBarname"]
                                        },
                                        operation: 0,
                                        value: "sun"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentBarname"] != null &&
                                  typeof $steps["updateCurrentBarname"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentBarname"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentBarname"] = await $steps[
                                    "updateCurrentBarname"
                                  ];
                                }
                              }}
                            >
                              {"\u06cc\u06a9\u0634\u0646\u0628\u0647"}
                            </div>
                            {(() => {
                              try {
                                return $state.currentBarname == "sun";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.schedule.currentWeek.Sun;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__ocd6Z
                                      )}
                                      key={currentIndex}
                                    >
                                      <div
                                        data-plasmic-name={"taklif17"}
                                        data-plasmic-override={
                                          overrides.taklif17
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.taklif17
                                        )}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["updateCurrentPage"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "currentPage"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: "Takalif"
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateCurrentPage"] !=
                                              null &&
                                            typeof $steps[
                                              "updateCurrentPage"
                                            ] === "object" &&
                                            typeof $steps["updateCurrentPage"]
                                              .then === "function"
                                          ) {
                                            $steps["updateCurrentPage"] =
                                              await $steps["updateCurrentPage"];
                                          }

                                          $steps["updateCurrentPage2"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "currentTaklifId"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: currentItem.id
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateCurrentPage2"] !=
                                              null &&
                                            typeof $steps[
                                              "updateCurrentPage2"
                                            ] === "object" &&
                                            typeof $steps["updateCurrentPage2"]
                                              .then === "function"
                                          ) {
                                            $steps["updateCurrentPage2"] =
                                              await $steps[
                                                "updateCurrentPage2"
                                              ];
                                          }

                                          $steps["updateCurrentPage3"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "currentTakalifSection"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: "taklif"
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateCurrentPage3"] !=
                                              null &&
                                            typeof $steps[
                                              "updateCurrentPage3"
                                            ] === "object" &&
                                            typeof $steps["updateCurrentPage3"]
                                              .then === "function"
                                          ) {
                                            $steps["updateCurrentPage3"] =
                                              await $steps[
                                                "updateCurrentPage3"
                                              ];
                                          }
                                        }}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__nzu6Y
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.time;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ttCb7
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.title;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      {(() => {
                                        try {
                                          return currentItem.type == "classes";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"kelas18"}
                                          data-plasmic-override={
                                            overrides.kelas18
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.kelas18
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Kelas Ha"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelashaSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "kelas"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelas"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.room_id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__cfToW
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__rfmk8
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type != "classes";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"general17"}
                                          data-plasmic-override={
                                            overrides.general17
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.general17
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrrentGeneral"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "currrentGeneral"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem.id
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateCurrrentGeneral"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrrentGeneral"] =
                                                await $steps[
                                                  "updateCurrrentGeneral"
                                                ];
                                            }

                                            $steps[
                                              "updateCurrentBarnameSection"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentBarnameSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "generic"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] != null &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] = await $steps[
                                                "updateCurrentBarnameSection"
                                              ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___4Dt3
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__mwOjr
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  );
                                })
                              : null}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xqhw0
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kfxFf
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentBarname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentBarname"]
                                        },
                                        operation: 0,
                                        value: "sun"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentBarname"] != null &&
                                  typeof $steps["updateCurrentBarname"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentBarname"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentBarname"] = await $steps[
                                    "updateCurrentBarname"
                                  ];
                                }
                              }}
                            >
                              {"\u06cc\u06a9\u0634\u0646\u0628\u0647"}
                            </div>
                            {(() => {
                              try {
                                return $state.currentBarname == "sun";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.barname2.currentWeek.sun;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__iT8Pz
                                      )}
                                      key={currentIndex}
                                    >
                                      {(() => {
                                        try {
                                          return currentItem.type == "taklif";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"taklif4"}
                                          data-plasmic-override={
                                            overrides.taklif4
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.taklif4
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Takalif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTaklifId"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTakalifSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "taklif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__nCnpK
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___7Ow6
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "kelas";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"kelas5"}
                                          data-plasmic-override={
                                            overrides.kelas5
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.kelas5
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Kelas Ha"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelashaSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "kelas"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelas"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__acz87
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___6WBKz
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "general";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"general4"}
                                          data-plasmic-override={
                                            overrides.general4
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.general4
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrrentGeneral"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "currrentGeneral"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem.id
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateCurrrentGeneral"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrrentGeneral"] =
                                                await $steps[
                                                  "updateCurrrentGeneral"
                                                ];
                                            }

                                            $steps[
                                              "updateCurrentBarnameSection"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentBarnameSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "generic"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] != null &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] = await $steps[
                                                "updateCurrentBarnameSection"
                                              ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__hcgSy
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__u71G
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  );
                                })
                              : null}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__htGlE
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lH4WH
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentBarname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentBarname"]
                                        },
                                        operation: 0,
                                        value: "mon"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentBarname"] != null &&
                                  typeof $steps["updateCurrentBarname"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentBarname"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentBarname"] = await $steps[
                                    "updateCurrentBarname"
                                  ];
                                }
                              }}
                            >
                              {"\u062f\u0648\u0634\u0646\u0628\u0647"}
                            </div>
                            {(() => {
                              try {
                                return $state.currentBarname == "mon";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.barname2.currentWeek.mon;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___715Af
                                      )}
                                      key={currentIndex}
                                    >
                                      {(() => {
                                        try {
                                          return currentItem.type == "taklif";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"taklif5"}
                                          data-plasmic-override={
                                            overrides.taklif5
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.taklif5
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Takalif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTaklifId"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTakalifSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "taklif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__fx3Cl
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__waCrh
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "kelas";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"kelas6"}
                                          data-plasmic-override={
                                            overrides.kelas6
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.kelas6
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Kelas Ha"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelashaSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "kelas"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelas"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__hxEw
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__n4Zq
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "general";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"general5"}
                                          data-plasmic-override={
                                            overrides.general5
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.general5
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrrentGeneral"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "currrentGeneral"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem.id
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateCurrrentGeneral"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrrentGeneral"] =
                                                await $steps[
                                                  "updateCurrrentGeneral"
                                                ];
                                            }

                                            $steps[
                                              "updateCurrentBarnameSection"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentBarnameSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "generic"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] != null &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] = await $steps[
                                                "updateCurrentBarnameSection"
                                              ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__hJb
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__zz6Mb
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  );
                                })
                              : null}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"nextWeek2"}
                          data-plasmic-override={overrides.nextWeek2}
                          className={classNames(projectcss.all, sty.nextWeek2)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9E0R
                            )}
                          >
                            {
                              "\u0647\u0641\u062a\u0647 \u0622\u06cc\u0646\u062f\u0647"
                            }
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return [
                                  { per: "شنبه", day: "nsat", upper: "Sat" },
                                  { per: "یکشنبه", day: "nsun", upper: "Sun" },
                                  { per: "دوشنبه", day: "nmon", upper: "Mon" },
                                  { per: "سه شنبه", day: "ntue", upper: "Tue" },
                                  {
                                    per: "چهارشنبه",
                                    day: "nwed",
                                    upper: "Wed"
                                  },
                                  { per: "پنجشنبه", day: "nthu", upper: "Thu" },
                                  { per: "جمعه", day: "nfri", upper: "Fri" }
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentIte = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__uOO8
                                )}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__uVoBs
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateCurrentBarname"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["currentBarname"]
                                            },
                                            operation: 0,
                                            value: currentIte.day
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateCurrentBarname"] != null &&
                                      typeof $steps["updateCurrentBarname"] ===
                                        "object" &&
                                      typeof $steps["updateCurrentBarname"]
                                        .then === "function"
                                    ) {
                                      $steps["updateCurrentBarname"] =
                                        await $steps["updateCurrentBarname"];
                                    }
                                  }}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentIte.per;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u0634\u0646\u0628\u0647";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                {(() => {
                                  try {
                                    return (
                                      $state.currentBarname == currentIte.day
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()
                                  ? (_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return $state.schedule.nextWeek[
                                            currentIte.upper
                                          ];
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_1, __plasmic_idx_1) => {
                                        const currentItem = __plasmic_item_1;
                                        const currentIndex = __plasmic_idx_1;
                                        return (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__cny2L
                                            )}
                                            key={currentIndex}
                                          >
                                            <div
                                              data-plasmic-name={"taklif6"}
                                              data-plasmic-override={
                                                overrides.taklif6
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.taklif6
                                              )}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["updateCurrentPage"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "currentPage"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: "Takalif"
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps["updateCurrentPage"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateCurrentPage"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateCurrentPage"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateCurrentPage"] =
                                                    await $steps[
                                                      "updateCurrentPage"
                                                    ];
                                                }

                                                $steps["updateCurrentPage2"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "currentTaklifId"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: currentItem.id
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "updateCurrentPage2"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "updateCurrentPage2"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateCurrentPage2"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateCurrentPage2"] =
                                                    await $steps[
                                                      "updateCurrentPage2"
                                                    ];
                                                }

                                                $steps["updateCurrentPage3"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "currentTakalifSection"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: "taklif"
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "updateCurrentPage3"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "updateCurrentPage3"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateCurrentPage3"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateCurrentPage3"] =
                                                    await $steps[
                                                      "updateCurrentPage3"
                                                    ];
                                                }
                                              }}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___9BZaB
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem.time;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__oRddk
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem.title;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </div>
                                            {(() => {
                                              try {
                                                return (
                                                  currentItem.type == "classes"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <div
                                                data-plasmic-name={"kelas7"}
                                                data-plasmic-override={
                                                  overrides.kelas7
                                                }
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.kelas7
                                                )}
                                                onClick={async event => {
                                                  const $steps = {};

                                                  $steps["updateCurrentPage"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "currentPage"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: "Kelas Ha"
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "updateCurrentPage"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateCurrentPage"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateCurrentPage"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateCurrentPage"
                                                    ] = await $steps[
                                                      "updateCurrentPage"
                                                    ];
                                                  }

                                                  $steps["updateCurrentPage2"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "currentKelashaSection"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: "kelas"
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "updateCurrentPage2"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateCurrentPage2"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateCurrentPage2"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateCurrentPage2"
                                                    ] = await $steps[
                                                      "updateCurrentPage2"
                                                    ];
                                                  }

                                                  $steps["updateCurrentPage3"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "currentKelas"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value:
                                                              currentItem.room_id
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "updateCurrentPage3"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateCurrentPage3"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateCurrentPage3"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateCurrentPage3"
                                                    ] = await $steps[
                                                      "updateCurrentPage3"
                                                    ];
                                                  }
                                                }}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__j7O7F
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.time;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__mJnsc
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.title;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            ) : null}
                                            {(() => {
                                              try {
                                                return (
                                                  currentItem.type != "classes"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <div
                                                data-plasmic-name={"general6"}
                                                data-plasmic-override={
                                                  overrides.general6
                                                }
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.general6
                                                )}
                                                onClick={async event => {
                                                  const $steps = {};

                                                  $steps[
                                                    "updateCurrrentGeneral"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "currrentGeneral"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: currentItem.id
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "updateCurrrentGeneral"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateCurrrentGeneral"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateCurrrentGeneral"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateCurrrentGeneral"
                                                    ] = await $steps[
                                                      "updateCurrrentGeneral"
                                                    ];
                                                  }

                                                  $steps[
                                                    "updateCurrentBarnameSection"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "currentBarnameSection"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: "generic"
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "updateCurrentBarnameSection"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateCurrentBarnameSection"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateCurrentBarnameSection"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateCurrentBarnameSection"
                                                    ] = await $steps[
                                                      "updateCurrentBarnameSection"
                                                    ];
                                                  }
                                                }}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__iBcL
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.time;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__vkl4N
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.title;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            ) : null}
                                          </div>
                                        );
                                      }
                                    )
                                  : null}
                              </div>
                            );
                          })}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eoUj
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___1ERc
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentBarname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentBarname"]
                                        },
                                        operation: 0,
                                        value: "sun"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentBarname"] != null &&
                                  typeof $steps["updateCurrentBarname"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentBarname"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentBarname"] = await $steps[
                                    "updateCurrentBarname"
                                  ];
                                }
                              }}
                            >
                              {"\u06cc\u06a9\u0634\u0646\u0628\u0647"}
                            </div>
                            {(() => {
                              try {
                                return $state.currentBarname == "sun";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.schedule.currentWeek.Sun;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__q2LHq
                                      )}
                                      key={currentIndex}
                                    >
                                      <div
                                        data-plasmic-name={"taklif18"}
                                        data-plasmic-override={
                                          overrides.taklif18
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.taklif18
                                        )}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["updateCurrentPage"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "currentPage"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: "Takalif"
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateCurrentPage"] !=
                                              null &&
                                            typeof $steps[
                                              "updateCurrentPage"
                                            ] === "object" &&
                                            typeof $steps["updateCurrentPage"]
                                              .then === "function"
                                          ) {
                                            $steps["updateCurrentPage"] =
                                              await $steps["updateCurrentPage"];
                                          }

                                          $steps["updateCurrentPage2"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "currentTaklifId"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: currentItem.id
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateCurrentPage2"] !=
                                              null &&
                                            typeof $steps[
                                              "updateCurrentPage2"
                                            ] === "object" &&
                                            typeof $steps["updateCurrentPage2"]
                                              .then === "function"
                                          ) {
                                            $steps["updateCurrentPage2"] =
                                              await $steps[
                                                "updateCurrentPage2"
                                              ];
                                          }

                                          $steps["updateCurrentPage3"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "currentTakalifSection"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: "taklif"
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateCurrentPage3"] !=
                                              null &&
                                            typeof $steps[
                                              "updateCurrentPage3"
                                            ] === "object" &&
                                            typeof $steps["updateCurrentPage3"]
                                              .then === "function"
                                          ) {
                                            $steps["updateCurrentPage3"] =
                                              await $steps[
                                                "updateCurrentPage3"
                                              ];
                                          }
                                        }}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__zlv3A
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.time;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__limeM
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.title;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      {(() => {
                                        try {
                                          return currentItem.type == "classes";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"kelas19"}
                                          data-plasmic-override={
                                            overrides.kelas19
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.kelas19
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Kelas Ha"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelashaSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "kelas"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelas"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.room_id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ufba
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__y9IqV
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type != "classes";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"general18"}
                                          data-plasmic-override={
                                            overrides.general18
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.general18
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrrentGeneral"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "currrentGeneral"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem.id
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateCurrrentGeneral"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrrentGeneral"] =
                                                await $steps[
                                                  "updateCurrrentGeneral"
                                                ];
                                            }

                                            $steps[
                                              "updateCurrentBarnameSection"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentBarnameSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "generic"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] != null &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] = await $steps[
                                                "updateCurrentBarnameSection"
                                              ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__qrJrr
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__kuK8
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  );
                                })
                              : null}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__oThlo
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tlK2E
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentBarname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentBarname"]
                                        },
                                        operation: 0,
                                        value: "sun"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentBarname"] != null &&
                                  typeof $steps["updateCurrentBarname"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentBarname"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentBarname"] = await $steps[
                                    "updateCurrentBarname"
                                  ];
                                }
                              }}
                            >
                              {"\u06cc\u06a9\u0634\u0646\u0628\u0647"}
                            </div>
                            {(() => {
                              try {
                                return $state.currentBarname == "sun";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.barname2.currentWeek.sun;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__yI7NU
                                      )}
                                      key={currentIndex}
                                    >
                                      {(() => {
                                        try {
                                          return currentItem.type == "taklif";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"taklif7"}
                                          data-plasmic-override={
                                            overrides.taklif7
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.taklif7
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Takalif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTaklifId"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTakalifSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "taklif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___3G40H
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__jyhs5
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "kelas";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"kelas8"}
                                          data-plasmic-override={
                                            overrides.kelas8
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.kelas8
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Kelas Ha"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelashaSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "kelas"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelas"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ntzl2
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__cZepE
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "general";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"general7"}
                                          data-plasmic-override={
                                            overrides.general7
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.general7
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrrentGeneral"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "currrentGeneral"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem.id
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateCurrrentGeneral"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrrentGeneral"] =
                                                await $steps[
                                                  "updateCurrrentGeneral"
                                                ];
                                            }

                                            $steps[
                                              "updateCurrentBarnameSection"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentBarnameSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "generic"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] != null &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] = await $steps[
                                                "updateCurrentBarnameSection"
                                              ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__taroo
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__d2Mfh
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  );
                                })
                              : null}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__l8DXt
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bKi53
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentBarname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentBarname"]
                                        },
                                        operation: 0,
                                        value: "mon"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentBarname"] != null &&
                                  typeof $steps["updateCurrentBarname"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentBarname"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentBarname"] = await $steps[
                                    "updateCurrentBarname"
                                  ];
                                }
                              }}
                            >
                              {"\u062f\u0648\u0634\u0646\u0628\u0647"}
                            </div>
                            {(() => {
                              try {
                                return $state.currentBarname == "mon";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.barname2.currentWeek.mon;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__qtSNn
                                      )}
                                      key={currentIndex}
                                    >
                                      {(() => {
                                        try {
                                          return currentItem.type == "taklif";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"taklif8"}
                                          data-plasmic-override={
                                            overrides.taklif8
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.taklif8
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Takalif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTaklifId"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTakalifSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "taklif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__memQ8
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__csCnD
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "kelas";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"kelas9"}
                                          data-plasmic-override={
                                            overrides.kelas9
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.kelas9
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Kelas Ha"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelashaSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "kelas"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelas"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__cuufh
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__wHroz
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "general";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"general8"}
                                          data-plasmic-override={
                                            overrides.general8
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.general8
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrrentGeneral"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "currrentGeneral"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem.id
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateCurrrentGeneral"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrrentGeneral"] =
                                                await $steps[
                                                  "updateCurrrentGeneral"
                                                ];
                                            }

                                            $steps[
                                              "updateCurrentBarnameSection"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentBarnameSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "generic"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] != null &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] = await $steps[
                                                "updateCurrentBarnameSection"
                                              ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__byzgr
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__xQtAb
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  );
                                })
                              : null}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"nextWeek"}
                          data-plasmic-override={overrides.nextWeek}
                          className={classNames(projectcss.all, sty.nextWeek)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iJaHm
                            )}
                          >
                            {
                              "\u0647\u0641\u062a\u0647 \u0622\u06cc\u0646\u062f\u0647"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zdFr5
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2Libt
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentBarname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentBarname"]
                                        },
                                        operation: 0,
                                        value: "nsat"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentBarname"] != null &&
                                  typeof $steps["updateCurrentBarname"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentBarname"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentBarname"] = await $steps[
                                    "updateCurrentBarname"
                                  ];
                                }
                              }}
                            >
                              {"\u0634\u0646\u0628\u0647"}
                            </div>
                            {(() => {
                              try {
                                return $state.currentBarname == "nsat";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.barname2.nextWeek.sat;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__wsDaU
                                      )}
                                      key={currentIndex}
                                    >
                                      {(() => {
                                        try {
                                          return currentItem.type == "taklif";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"taklif10"}
                                          data-plasmic-override={
                                            overrides.taklif10
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.taklif10
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Takalif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTaklifId"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTakalifSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "taklif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__dgOnt
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__pzVL
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "kelas";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"kelas11"}
                                          data-plasmic-override={
                                            overrides.kelas11
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.kelas11
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Kelas Ha"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelashaSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "kelas"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelas"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___4Xojm
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__a4OyQ
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "general";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"general10"}
                                          data-plasmic-override={
                                            overrides.general10
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.general10
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrrentGeneral"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "currrentGeneral"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem.id
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateCurrrentGeneral"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrrentGeneral"] =
                                                await $steps[
                                                  "updateCurrrentGeneral"
                                                ];
                                            }

                                            $steps[
                                              "updateCurrentBarnameSection"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentBarnameSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "generic"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] != null &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] = await $steps[
                                                "updateCurrentBarnameSection"
                                              ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___3K9Rb
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___3WOht
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  );
                                })
                              : null}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pFAbs
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___1S5Xr
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentBarname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentBarname"]
                                        },
                                        operation: 0,
                                        value: "nsun"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentBarname"] != null &&
                                  typeof $steps["updateCurrentBarname"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentBarname"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentBarname"] = await $steps[
                                    "updateCurrentBarname"
                                  ];
                                }
                              }}
                            >
                              {"\u06cc\u06a9\u0634\u0646\u0628\u0647"}
                            </div>
                            {(() => {
                              try {
                                return $state.currentBarname == "nsun";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.barname2.nextWeek.sun;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__c3Pi3
                                      )}
                                      key={currentIndex}
                                    >
                                      {(() => {
                                        try {
                                          return currentItem.type == "taklif";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"taklif11"}
                                          data-plasmic-override={
                                            overrides.taklif11
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.taklif11
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Takalif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTaklifId"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTakalifSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "taklif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__jypjc
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__t6Kkq
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "kelas";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"kelas12"}
                                          data-plasmic-override={
                                            overrides.kelas12
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.kelas12
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Kelas Ha"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelashaSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "kelas"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelas"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__qsA5D
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__l3AEv
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "general";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"general11"}
                                          data-plasmic-override={
                                            overrides.general11
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.general11
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrrentGeneral"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "currrentGeneral"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem.id
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateCurrrentGeneral"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrrentGeneral"] =
                                                await $steps[
                                                  "updateCurrrentGeneral"
                                                ];
                                            }

                                            $steps[
                                              "updateCurrentBarnameSection"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentBarnameSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "generic"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] != null &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] = await $steps[
                                                "updateCurrentBarnameSection"
                                              ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__pQHml
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__zfPh
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  );
                                })
                              : null}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__o91B
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__txtmO
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentBarname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentBarname"]
                                        },
                                        operation: 0,
                                        value: "nmon"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentBarname"] != null &&
                                  typeof $steps["updateCurrentBarname"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentBarname"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentBarname"] = await $steps[
                                    "updateCurrentBarname"
                                  ];
                                }
                              }}
                            >
                              {"\u062f\u0648\u0634\u0646\u0628\u0647"}
                            </div>
                            {(() => {
                              try {
                                return $state.currentBarname == "nmon";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.barname2.nextWeek.mon;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___5VAqH
                                      )}
                                      key={currentIndex}
                                    >
                                      {(() => {
                                        try {
                                          return currentItem.type == "taklif";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"taklif12"}
                                          data-plasmic-override={
                                            overrides.taklif12
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.taklif12
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Takalif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTaklifId"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTakalifSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "taklif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__rXoa3
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___1DAGc
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "kelas";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"kelas13"}
                                          data-plasmic-override={
                                            overrides.kelas13
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.kelas13
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Kelas Ha"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelashaSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "kelas"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelas"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__wuvSd
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__svqZn
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "general";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"general12"}
                                          data-plasmic-override={
                                            overrides.general12
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.general12
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrrentGeneral"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "currrentGeneral"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem.id
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateCurrrentGeneral"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrrentGeneral"] =
                                                await $steps[
                                                  "updateCurrrentGeneral"
                                                ];
                                            }

                                            $steps[
                                              "updateCurrentBarnameSection"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentBarnameSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "generic"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] != null &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] = await $steps[
                                                "updateCurrentBarnameSection"
                                              ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__w4N7J
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__q4VH
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  );
                                })
                              : null}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hFsMd
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2U7We
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentBarname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentBarname"]
                                        },
                                        operation: 0,
                                        value: "ntue"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentBarname"] != null &&
                                  typeof $steps["updateCurrentBarname"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentBarname"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentBarname"] = await $steps[
                                    "updateCurrentBarname"
                                  ];
                                }
                              }}
                            >
                              {"\u0633\u0647\u200c\u0634\u0646\u0628\u0647"}
                            </div>
                            {(() => {
                              try {
                                return $state.currentBarname == "ntue";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.barname2.nextWeek.tue;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__xrafD
                                      )}
                                      key={currentIndex}
                                    >
                                      {(() => {
                                        try {
                                          return currentItem.type == "taklif";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"taklif13"}
                                          data-plasmic-override={
                                            overrides.taklif13
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.taklif13
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Takalif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTaklifId"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTakalifSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "taklif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ayOGv
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__esntK
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "kelas";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"kelas14"}
                                          data-plasmic-override={
                                            overrides.kelas14
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.kelas14
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Kelas Ha"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelashaSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "kelas"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelas"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___0ZXeu
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__hkjEw
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "general";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"general13"}
                                          data-plasmic-override={
                                            overrides.general13
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.general13
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrrentGeneral"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "currrentGeneral"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem.id
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateCurrrentGeneral"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrrentGeneral"] =
                                                await $steps[
                                                  "updateCurrrentGeneral"
                                                ];
                                            }

                                            $steps[
                                              "updateCurrentBarnameSection"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentBarnameSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "generic"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] != null &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] = await $steps[
                                                "updateCurrentBarnameSection"
                                              ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__rm2PX
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___8IntY
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  );
                                })
                              : null}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eTveQ
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8TEe
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentBarname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentBarname"]
                                        },
                                        operation: 0,
                                        value: "nwed"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentBarname"] != null &&
                                  typeof $steps["updateCurrentBarname"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentBarname"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentBarname"] = await $steps[
                                    "updateCurrentBarname"
                                  ];
                                }
                              }}
                            >
                              {
                                "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647"
                              }
                            </div>
                            {(() => {
                              try {
                                return $state.currentBarname == "nwed";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.barname2.nextWeek.wed;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___8U4Vf
                                      )}
                                      key={currentIndex}
                                    >
                                      {(() => {
                                        try {
                                          return currentItem.type == "taklif";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"taklif14"}
                                          data-plasmic-override={
                                            overrides.taklif14
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.taklif14
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Takalif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTaklifId"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTakalifSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "taklif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__kn5J
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__qiJmz
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "kelas";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"kelas15"}
                                          data-plasmic-override={
                                            overrides.kelas15
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.kelas15
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Kelas Ha"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelashaSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "kelas"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelas"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ww9Uu
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__bqhyT
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "general";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"general14"}
                                          data-plasmic-override={
                                            overrides.general14
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.general14
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrrentGeneral"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "currrentGeneral"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem.id
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateCurrrentGeneral"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrrentGeneral"] =
                                                await $steps[
                                                  "updateCurrrentGeneral"
                                                ];
                                            }

                                            $steps[
                                              "updateCurrentBarnameSection"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentBarnameSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "generic"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] != null &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] = await $steps[
                                                "updateCurrentBarnameSection"
                                              ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__lpr1Q
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__eBUlT
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  );
                                })
                              : null}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___8MRKq
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gGtU1
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentBarname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentBarname"]
                                        },
                                        operation: 0,
                                        value: "nthu"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentBarname"] != null &&
                                  typeof $steps["updateCurrentBarname"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentBarname"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentBarname"] = await $steps[
                                    "updateCurrentBarname"
                                  ];
                                }
                              }}
                            >
                              {"\u067e\u0646\u062c\u0634\u0646\u0628\u0647"}
                            </div>
                            {(() => {
                              try {
                                return $state.currentBarname == "nthu";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.barname2.nextWeek.thu;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__pebB
                                      )}
                                      key={currentIndex}
                                    >
                                      {(() => {
                                        try {
                                          return currentItem.type == "taklif";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"taklif15"}
                                          data-plasmic-override={
                                            overrides.taklif15
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.taklif15
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Takalif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTaklifId"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTakalifSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "taklif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__huBur
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__zUiMv
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "kelas";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"kelas16"}
                                          data-plasmic-override={
                                            overrides.kelas16
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.kelas16
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Kelas Ha"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelashaSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "kelas"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelas"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___0IvoW
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__qWqlS
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "general";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"general15"}
                                          data-plasmic-override={
                                            overrides.general15
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.general15
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrrentGeneral"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "currrentGeneral"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem.id
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateCurrrentGeneral"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrrentGeneral"] =
                                                await $steps[
                                                  "updateCurrrentGeneral"
                                                ];
                                            }

                                            $steps[
                                              "updateCurrentBarnameSection"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentBarnameSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "generic"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] != null &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] = await $steps[
                                                "updateCurrentBarnameSection"
                                              ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ug8O5
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__lFi1F
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  );
                                })
                              : null}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aTfjy
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__c1IW
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateCurrentBarname"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentBarname"]
                                        },
                                        operation: 0,
                                        value: "nfri"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentBarname"] != null &&
                                  typeof $steps["updateCurrentBarname"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentBarname"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentBarname"] = await $steps[
                                    "updateCurrentBarname"
                                  ];
                                }
                              }}
                            >
                              {"\u062c\u0645\u0639\u0647"}
                            </div>
                            {(() => {
                              try {
                                return $state.currentBarname == "nfri";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.barname2.nextWeek.fri;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__lqdd5
                                      )}
                                      key={currentIndex}
                                    >
                                      {(() => {
                                        try {
                                          return currentItem.type == "taklif";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"taklif16"}
                                          data-plasmic-override={
                                            overrides.taklif16
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.taklif16
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Takalif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTaklifId"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentTakalifSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "taklif"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__sb8Jg
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__xaqHh
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "kelas";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"kelas17"}
                                          data-plasmic-override={
                                            overrides.kelas17
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.kelas17
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrentPage"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentPage"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "Kelas Ha"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage"
                                              ] === "object" &&
                                              typeof $steps["updateCurrentPage"]
                                                .then === "function"
                                            ) {
                                              $steps["updateCurrentPage"] =
                                                await $steps[
                                                  "updateCurrentPage"
                                                ];
                                            }

                                            $steps["updateCurrentPage2"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelashaSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "kelas"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage2"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage2"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage2"] =
                                                await $steps[
                                                  "updateCurrentPage2"
                                                ];
                                            }

                                            $steps["updateCurrentPage3"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentKelas"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: currentItem.id
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateCurrentPage3"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentPage3"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrentPage3"] =
                                                await $steps[
                                                  "updateCurrentPage3"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__foWbu
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__djiZ5
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.type == "general";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"general16"}
                                          data-plasmic-override={
                                            overrides.general16
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.general16
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["updateCurrrentGeneral"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "currrentGeneral"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem.id
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateCurrrentGeneral"] !=
                                                null &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrrentGeneral"
                                              ].then === "function"
                                            ) {
                                              $steps["updateCurrrentGeneral"] =
                                                await $steps[
                                                  "updateCurrrentGeneral"
                                                ];
                                            }

                                            $steps[
                                              "updateCurrentBarnameSection"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "currentBarnameSection"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: "generic"
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] != null &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateCurrentBarnameSection"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateCurrentBarnameSection"
                                              ] = await $steps[
                                                "updateCurrentBarnameSection"
                                              ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__nWhH
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.time;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__egG49
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  );
                                })
                              : null}
                          </div>
                        </div>
                      </div>
                    ) : null}
                    <div
                      data-plasmic-name={"generic"}
                      data-plasmic-override={overrides.generic}
                      className={classNames(projectcss.all, sty.generic)}
                    >
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__pBnn)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateCurrentBarnameSection"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["currentBarnameSection"]
                                  },
                                  operation: 0,
                                  value: "barname"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateCurrentBarnameSection"] != null &&
                            typeof $steps["updateCurrentBarnameSection"] ===
                              "object" &&
                            typeof $steps["updateCurrentBarnameSection"]
                              .then === "function"
                          ) {
                            $steps["updateCurrentBarnameSection"] =
                              await $steps["updateCurrentBarnameSection"];
                          }
                        }}
                        role={"img"}
                      />

                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.querySchedule.data.response.events.find(
                              item => item.article_id == $state.currrentGeneral
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__k7Kr7
                            )}
                            key={currentIndex}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__y5Ti
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__o8Tea
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      currentItem.date + "  " + currentItem.time
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__reTIq
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.desc;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return currentItem.link;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentItem = __plasmic_item_1;
                              const currentIndex = __plasmic_idx_1;
                              return (
                                <PlasmicLink__
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.a,
                                    projectcss.__wab_text,
                                    sty.link__iqCkd
                                  )}
                                  component={Link}
                                  href={(() => {
                                    try {
                                      return currentItem;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "https://www.plasmic.app/";
                                      }
                                      throw e;
                                    }
                                  })()}
                                  key={currentIndex}
                                  platform={"nextjs"}
                                >
                                  {"Some link text"}
                                </PlasmicLink__>
                              );
                            })}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.currentPage === "Takalif";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"takalif"}
                    data-plasmic-override={overrides.takalif}
                    className={classNames(projectcss.all, sty.takalif)}
                  >
                    {(() => {
                      try {
                        return $state.currentTakalifSection == "takalif";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"listTakalif"}
                        data-plasmic-override={overrides.listTakalif}
                        className={classNames(projectcss.all, sty.listTakalif)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__emUhs
                          )}
                        >
                          {"\u062a\u06a9\u0627\u0644\u06cc\u0641"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dcwsV
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__z5Wg
                            )}
                          >
                            {"\u0639\u0646\u0648\u0627\u0646"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__d39W
                            )}
                          >
                            {"\u062a\u0627\u0631\u06cc\u062e"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lNljo
                            )}
                          >
                            {"\u0645\u0647\u0644\u062a"}
                          </div>
                        </div>
                        {(() => {
                          try {
                            return (
                              $queries.queryTakalif.data.response.takalif[0]
                                .id != undefined
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                          ? (_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.queryTakalif.data.response.takalif.sort(
                                    (a, b) =>
                                      new Date(a.deadline_at) -
                                      new Date(b.deadline_at)
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__xdOvb
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cFAx
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem[0].date;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  {(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return currentItem;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                    const currentItem = __plasmic_item_1;
                                    const currentIndex = __plasmic_idx_1;
                                    return (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__dpjMx
                                        )}
                                        key={currentIndex}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["updateShowWall"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["showWall"]
                                                  },
                                                  operation: 0,
                                                  value: true
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateShowWall"] != null &&
                                            typeof $steps["updateShowWall"] ===
                                              "object" &&
                                            typeof $steps["updateShowWall"]
                                              .then === "function"
                                          ) {
                                            $steps["updateShowWall"] =
                                              await $steps["updateShowWall"];
                                          }

                                          $steps["updateCurrentTaklifId"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "currentTaklifId"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: currentItem.id
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateCurrentTaklifId"] !=
                                              null &&
                                            typeof $steps[
                                              "updateCurrentTaklifId"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateCurrentTaklifId"
                                            ].then === "function"
                                          ) {
                                            $steps["updateCurrentTaklifId"] =
                                              await $steps[
                                                "updateCurrentTaklifId"
                                              ];
                                          }

                                          $steps[
                                            "updateCurrentTakalifSection"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "currentTakalifSection"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: "taklif"
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateCurrentTakalifSection"
                                            ] != null &&
                                            typeof $steps[
                                              "updateCurrentTakalifSection"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateCurrentTakalifSection"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateCurrentTakalifSection"
                                            ] = await $steps[
                                              "updateCurrentTakalifSection"
                                            ];
                                          }

                                          $steps["httpGet"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "oFGo9etX3UbW3vpYoEjNm1",
                                                    opId: "309d4c4e-c317-4882-b06b-178e546fa7e8",
                                                    userArgs: {
                                                      headers: [$state.token],

                                                      params: [currentItem.id]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: null,
                                                    roleId: null
                                                  },
                                                  continueOnError: true
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["httpGet"] != null &&
                                            typeof $steps["httpGet"] ===
                                              "object" &&
                                            typeof $steps["httpGet"].then ===
                                              "function"
                                          ) {
                                            $steps["httpGet"] = await $steps[
                                              "httpGet"
                                            ];
                                          }

                                          $steps["updateLastRequest"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "lastRequest"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: $steps.httpGet
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateLastRequest"] !=
                                              null &&
                                            typeof $steps[
                                              "updateLastRequest"
                                            ] === "object" &&
                                            typeof $steps["updateLastRequest"]
                                              .then === "function"
                                          ) {
                                            $steps["updateLastRequest"] =
                                              await $steps["updateLastRequest"];
                                          }

                                          $steps[
                                            "updateAsignmentComponentAsignment"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "asignmentComponent",
                                                      "asignment"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value:
                                                    $steps.httpGet.data.response
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateAsignmentComponentAsignment"
                                            ] != null &&
                                            typeof $steps[
                                              "updateAsignmentComponentAsignment"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateAsignmentComponentAsignment"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateAsignmentComponentAsignment"
                                            ] = await $steps[
                                              "updateAsignmentComponentAsignment"
                                            ];
                                          }

                                          $steps["updateShowWall2"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["showWall"]
                                                  },
                                                  operation: 0,
                                                  value: false
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateShowWall2"] != null &&
                                            typeof $steps["updateShowWall2"] ===
                                              "object" &&
                                            typeof $steps["updateShowWall2"]
                                              .then === "function"
                                          ) {
                                            $steps["updateShowWall2"] =
                                              await $steps["updateShowWall2"];
                                          }
                                        }}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__j1H2
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.title;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__aUoua
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.deadline_date;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__y08G
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (() => {
                                                  {
                                                    const timeDiffMs =
                                                      currentItem.deadline_at -
                                                      Date.now();
                                                    const timeDiffMin =
                                                      Math.floor(
                                                        timeDiffMs / (1000 * 60)
                                                      );
                                                    if (timeDiffMin > 60) {
                                                      const timeDiffHours =
                                                        Math.floor(
                                                          timeDiffMin / 60
                                                        );
                                                      if (timeDiffHours > 24) {
                                                        const timeDiffDays =
                                                          Math.floor(
                                                            timeDiffHours / 24
                                                          );
                                                        return `${timeDiffDays} روز`;
                                                      } else {
                                                        return `${timeDiffHours} ساعت`;
                                                      }
                                                    } else {
                                                      return `${timeDiffMin} دقیقه`;
                                                    }
                                                  }
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    );
                                  })}
                                </div>
                              );
                            })
                          : null}
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $state.currentTakalifSection == "taklif";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"takllif"}
                        data-plasmic-override={overrides.takllif}
                        className={classNames(projectcss.all, sty.takllif)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__f70P6
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iurZs
                            )}
                          >
                            {
                              "\u062c\u0644\u0633\u0647 \u0645\u0631\u0628\u0648\u0637\u0647:"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gpT4J
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["wallcurrentPage6"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["showWall"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["wallcurrentPage6"] != null &&
                                typeof $steps["wallcurrentPage6"] ===
                                  "object" &&
                                typeof $steps["wallcurrentPage6"].then ===
                                  "function"
                              ) {
                                $steps["wallcurrentPage6"] = await $steps[
                                  "wallcurrentPage6"
                                ];
                              }

                              $steps["updateCurrentPage5"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["currentJalase"]
                                      },
                                      operation: 0,
                                      value:
                                        $state.asignmentComponent.asignment
                                          .taklif[0].jalase_id
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateCurrentPage5"] != null &&
                                typeof $steps["updateCurrentPage5"] ===
                                  "object" &&
                                typeof $steps["updateCurrentPage5"].then ===
                                  "function"
                              ) {
                                $steps["updateCurrentPage5"] = await $steps[
                                  "updateCurrentPage5"
                                ];
                              }

                              $steps["updateCurrentPage4"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["currentMabhas"]
                                      },
                                      operation: 0,
                                      value:
                                        $state.asignmentComponent.asignment
                                          .taklif[0].mahas_id
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateCurrentPage4"] != null &&
                                typeof $steps["updateCurrentPage4"] ===
                                  "object" &&
                                typeof $steps["updateCurrentPage4"].then ===
                                  "function"
                              ) {
                                $steps["updateCurrentPage4"] = await $steps[
                                  "updateCurrentPage4"
                                ];
                              }

                              $steps["updateCurrentPage3"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["currentDars"]
                                      },
                                      operation: 0,
                                      value:
                                        $state.asignmentComponent.asignment
                                          .taklif[0].dars_id
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateCurrentPage3"] != null &&
                                typeof $steps["updateCurrentPage3"] ===
                                  "object" &&
                                typeof $steps["updateCurrentPage3"].then ===
                                  "function"
                              ) {
                                $steps["updateCurrentPage3"] = await $steps[
                                  "updateCurrentPage3"
                                ];
                              }

                              $steps["updateCurrentPage2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["currentDarsHaSection"]
                                      },
                                      operation: 0,
                                      value: "jalase"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateCurrentPage2"] != null &&
                                typeof $steps["updateCurrentPage2"] ===
                                  "object" &&
                                typeof $steps["updateCurrentPage2"].then ===
                                  "function"
                              ) {
                                $steps["updateCurrentPage2"] = await $steps[
                                  "updateCurrentPage2"
                                ];
                              }

                              $steps["updateCurrentPage"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["currentPage"]
                                      },
                                      operation: 0,
                                      value: "Dars Ha"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateCurrentPage"] != null &&
                                typeof $steps["updateCurrentPage"] ===
                                  "object" &&
                                typeof $steps["updateCurrentPage"].then ===
                                  "function"
                              ) {
                                $steps["updateCurrentPage"] = await $steps[
                                  "updateCurrentPage"
                                ];
                              }

                              $steps["httpJalase"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "oFGo9etX3UbW3vpYoEjNm1",
                                        opId: "10b4c817-61f9-472d-b203-a66747e54487",
                                        userArgs: {
                                          params: [
                                            $state.asignmentComponent.asignment
                                              .taklif[0].jalase_id
                                          ],

                                          headers: [$state.token]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: null,
                                        roleId: null
                                      },
                                      continueOnError: true
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["httpJalase"] != null &&
                                typeof $steps["httpJalase"] === "object" &&
                                typeof $steps["httpJalase"].then === "function"
                              ) {
                                $steps["httpJalase"] = await $steps[
                                  "httpJalase"
                                ];
                              }

                              $steps["lreqcurrentPage6"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["lastRequest"]
                                      },
                                      operation: 0,
                                      value: $steps.httpJalase
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["lreqcurrentPage6"] != null &&
                                typeof $steps["lreqcurrentPage6"] ===
                                  "object" &&
                                typeof $steps["lreqcurrentPage6"].then ===
                                  "function"
                              ) {
                                $steps["lreqcurrentPage6"] = await $steps[
                                  "lreqcurrentPage6"
                                ];
                              }

                              $steps["updateCurrentPage7"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["currentClassInfo"]
                                      },
                                      operation: 0,
                                      value: $steps.httpJalase.data.response
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateCurrentPage7"] != null &&
                                typeof $steps["updateCurrentPage7"] ===
                                  "object" &&
                                typeof $steps["updateCurrentPage7"].then ===
                                  "function"
                              ) {
                                $steps["updateCurrentPage7"] = await $steps[
                                  "updateCurrentPage7"
                                ];
                              }

                              $steps["wallcurrentPage8"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["showWall"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["wallcurrentPage8"] != null &&
                                typeof $steps["wallcurrentPage8"] ===
                                  "object" &&
                                typeof $steps["wallcurrentPage8"].then ===
                                  "function"
                              ) {
                                $steps["wallcurrentPage8"] = await $steps[
                                  "wallcurrentPage8"
                                ];
                              }
                            }}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.asignmentComponent.asignment
                                    .taklif[0].jalase_title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___0JRio
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["httpGet"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "oFGo9etX3UbW3vpYoEjNm1",
                                        opId: "309d4c4e-c317-4882-b06b-178e546fa7e8",
                                        userArgs: {
                                          params: [$state.currentTaklifId],

                                          headers: [$state.token]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: null,
                                        roleId: null
                                      },
                                      continueOnError: true
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["httpGet"] != null &&
                                typeof $steps["httpGet"] === "object" &&
                                typeof $steps["httpGet"].then === "function"
                              ) {
                                $steps["httpGet"] = await $steps["httpGet"];
                              }

                              $steps["updateAsignment"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["asignment"]
                                      },
                                      operation: 0,
                                      value: $steps.httpGet.data.response
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateAsignment"] != null &&
                                typeof $steps["updateAsignment"] === "object" &&
                                typeof $steps["updateAsignment"].then ===
                                  "function"
                              ) {
                                $steps["updateAsignment"] = await $steps[
                                  "updateAsignment"
                                ];
                              }
                            }}
                          >
                            <RefreshCwAlt3SvgrepoComSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ka9Ib
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                        <AsignmentComponent
                          data-plasmic-name={"asignmentComponent"}
                          data-plasmic-override={overrides.asignmentComponent}
                          answeres2={(() => {
                            try {
                              return $state.asignmentComponent.asignment
                                .javabha;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          asignment={generateStateValueProp($state, [
                            "asignmentComponent",
                            "asignment"
                          ])}
                          asignment2={(() => {
                            try {
                              return $state.asignmentComponent.asignment
                                .taklif[0];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          className={classNames(
                            "__wab_instance",
                            sty.asignmentComponent
                          )}
                          onAsignmentChange2={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "asignmentComponent",
                              "asignment"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          results={(() => {
                            try {
                              return $state.asignmentComponent.asignment
                                .natayej;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          stage={"start"}
                        />

                        <ArrowRightSvgIcon
                          className={classNames(projectcss.all, sty.svg__hDro8)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateCurrentTakalifSection"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["currentTakalifSection"]
                                    },
                                    operation: 0,
                                    value: "takalif"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCurrentTakalifSection"] != null &&
                              typeof $steps["updateCurrentTakalifSection"] ===
                                "object" &&
                              typeof $steps["updateCurrentTakalifSection"]
                                .then === "function"
                            ) {
                              $steps["updateCurrentTakalifSection"] =
                                await $steps["updateCurrentTakalifSection"];
                            }
                          }}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__uQRan)}>
              <div className={classNames(projectcss.all, sty.freeBox__aMb4T)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__bfNf)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHomepage"] = true
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mhfmf
                    )}
                  >
                    {"\u062e\u0631\u0648\u062c"}
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__pbAfQ)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["httpPut"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "oFGo9etX3UbW3vpYoEjNm1",
                              opId: "6d23d9a4-8e1c-4032-9676-b4908fe5f77d",
                              userArgs: {
                                params: [$state.highNotif],

                                headers: [$state.token]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            },
                            continueOnError: true
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["httpPut"] != null &&
                      typeof $steps["httpPut"] === "object" &&
                      typeof $steps["httpPut"].then === "function"
                    ) {
                      $steps["httpPut"] = await $steps["httpPut"];
                    }
                  }}
                >
                  <Notifications
                    data-plasmic-name={"notifications"}
                    data-plasmic-override={overrides.notifications}
                    className={classNames("__wab_instance", sty.notifications)}
                    messages={(() => {
                      try {
                        return $state.notifications;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    notifications={(() => {
                      try {
                        return { messages: $state.notifs };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
                <AntdModal
                  data-plasmic-name={"modal"}
                  data-plasmic-override={overrides.modal}
                  className={classNames("__wab_instance", sty.modal)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    styleTokensClassNames,
                    styleTokensClassNames_antd_5_hostless
                  )}
                  hideFooter={true}
                  modalContentClassName={classNames({
                    [sty["pcls_7cv6B6npj1Za"]]: true
                  })}
                  modalScopeClassName={sty["modal__modal"]}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["modal", "open"]).apply(
                      null,
                      eventArgs
                    );
                  }}
                  open={generateStateValueProp($state, ["modal", "open"])}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hPcPl
                      )}
                    >
                      {"Modal title"}
                    </div>
                  }
                  trigger={
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8Mg6D
                      )}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___8N5VP)}
                        displayHeight={"40px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"40px"}
                        height={``}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return $queries.queryStart.data.response.jwtPayload
                              .profile;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return {
                                src: "/plasmic/main_ui/images/_10336815Png.png",
                                fullWidth: 512,
                                fullHeight: 512,
                                aspectRatio: undefined
                              };
                            }
                            throw e;
                          }
                        })()}
                        width={"40px"}
                      />
                    </div>
                  }
                  wrapClassName={classNames({
                    [sty["pcls_2vHlTTpOywJp"]]: true
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oatxw)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__grMxy)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__he5Wr
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.queryStart.data.response
                                .jwtPayload.name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Modal content";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__b7Qu
                        )}
                      >
                        {"\u0646\u0627\u0645"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hqNzf)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ib8Mx
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.queryStart.data.response
                                .jwtPayload.contact;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Modal content";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xDfDj
                        )}
                      >
                        {
                          "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                        }
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox___7In2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__s5Vfv
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.queryStart.data.response
                                .jwtPayload.email;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Modal content";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n44Jh
                        )}
                      >
                        {"\u0627\u06cc\u0645\u06cc\u0644"}
                      </div>
                    </div>
                  </div>
                </AntdModal>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__m9Fqx)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return [
                      {
                        label: "درس ها",
                        value: "Dars Ha"
                      },
                      {
                        label: "برنامه",
                        value: "Barname"
                      },
                      {
                        label: "تکالیف",
                        value: "Takalif"
                      },
                      {
                        label: "کلاس ها",
                        value: "Kelas Ha"
                      }
                    ];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__beg7L)}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateCurrentPage"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["currentPage"]
                              },
                              operation: 0,
                              value: currentItem.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCurrentPage"] != null &&
                        typeof $steps["updateCurrentPage"] === "object" &&
                        typeof $steps["updateCurrentPage"].then === "function"
                      ) {
                        $steps["updateCurrentPage"] = await $steps[
                          "updateCurrentPage"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__brRvK
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.label;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                );
              })}
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.buttons;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eRvj9)}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateCurrentPage"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["currentPage"]
                              },
                              operation: 0,
                              value: currentItem.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCurrentPage"] != null &&
                        typeof $steps["updateCurrentPage"] === "object" &&
                        typeof $steps["updateCurrentPage"].then === "function"
                      ) {
                        $steps["updateCurrentPage"] = await $steps[
                          "updateCurrentPage"
                        ];
                      }
                    }}
                  >
                    <TabBar
                      data-plasmic-name={"tabBar"}
                      data-plasmic-override={overrides.tabBar}
                      currentItem={currentItem}
                      isSelected={(() => {
                        try {
                          return $state.currentPage == currentItem.value;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                );
              })}
            </div>
            {(() => {
              try {
                return $state.showWall;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"theWall"}
                data-plasmic-override={overrides.theWall}
                className={classNames(projectcss.all, sty.theWall)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xkNAl
                  )}
                >
                  {
                    "\u06a9\u0645\u06cc \u0635\u0628\u0631 \u06a9\u0646\u06cc\u062f..."
                  }
                </div>
              </div>
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "loginError",
    "button",
    "loading",
    "pageContent",
    "darsHa",
    "darsha",
    "mabahes",
    "jalasat2",
    "jalase",
    "embedHtml",
    "taklif",
    "attachments",
    "kelasHa",
    "rooms",
    "kelas2",
    "onlineSession",
    "karname",
    "darsha2",
    "overview",
    "term",
    "barname",
    "barname3",
    "currentWeek",
    "taklif3",
    "kelas4",
    "general3",
    "taklif17",
    "kelas18",
    "general17",
    "taklif4",
    "kelas5",
    "general4",
    "taklif5",
    "kelas6",
    "general5",
    "nextWeek2",
    "taklif6",
    "kelas7",
    "general6",
    "taklif18",
    "kelas19",
    "general18",
    "taklif7",
    "kelas8",
    "general7",
    "taklif8",
    "kelas9",
    "general8",
    "nextWeek",
    "taklif10",
    "kelas11",
    "general10",
    "taklif11",
    "kelas12",
    "general11",
    "taklif12",
    "kelas13",
    "general12",
    "taklif13",
    "kelas14",
    "general13",
    "taklif14",
    "kelas15",
    "general14",
    "taklif15",
    "kelas16",
    "general15",
    "taklif16",
    "kelas17",
    "general16",
    "generic",
    "takalif",
    "listTakalif",
    "takllif",
    "asignmentComponent",
    "notifications",
    "modal",
    "tabBar",
    "theWall"
  ],
  loginError: ["loginError", "button"],
  button: ["button"],
  loading: ["loading"],
  pageContent: [
    "pageContent",
    "darsHa",
    "darsha",
    "mabahes",
    "jalasat2",
    "jalase",
    "embedHtml",
    "taklif",
    "attachments",
    "kelasHa",
    "rooms",
    "kelas2",
    "onlineSession",
    "karname",
    "darsha2",
    "overview",
    "term",
    "barname",
    "barname3",
    "currentWeek",
    "taklif3",
    "kelas4",
    "general3",
    "taklif17",
    "kelas18",
    "general17",
    "taklif4",
    "kelas5",
    "general4",
    "taklif5",
    "kelas6",
    "general5",
    "nextWeek2",
    "taklif6",
    "kelas7",
    "general6",
    "taklif18",
    "kelas19",
    "general18",
    "taklif7",
    "kelas8",
    "general7",
    "taklif8",
    "kelas9",
    "general8",
    "nextWeek",
    "taklif10",
    "kelas11",
    "general10",
    "taklif11",
    "kelas12",
    "general11",
    "taklif12",
    "kelas13",
    "general12",
    "taklif13",
    "kelas14",
    "general13",
    "taklif14",
    "kelas15",
    "general14",
    "taklif15",
    "kelas16",
    "general15",
    "taklif16",
    "kelas17",
    "general16",
    "generic",
    "takalif",
    "listTakalif",
    "takllif",
    "asignmentComponent"
  ],
  darsHa: [
    "darsHa",
    "darsha",
    "mabahes",
    "jalasat2",
    "jalase",
    "embedHtml",
    "taklif",
    "attachments"
  ],
  darsha: ["darsha"],
  mabahes: ["mabahes"],
  jalasat2: ["jalasat2"],
  jalase: ["jalase", "embedHtml", "taklif", "attachments"],
  embedHtml: ["embedHtml"],
  taklif: ["taklif"],
  attachments: ["attachments"],
  kelasHa: ["kelasHa", "rooms", "kelas2", "onlineSession"],
  rooms: ["rooms"],
  kelas2: ["kelas2", "onlineSession"],
  onlineSession: ["onlineSession"],
  karname: ["karname", "darsha2", "overview", "term"],
  darsha2: ["darsha2"],
  overview: ["overview"],
  term: ["term"],
  barname: [
    "barname",
    "barname3",
    "currentWeek",
    "taklif3",
    "kelas4",
    "general3",
    "taklif17",
    "kelas18",
    "general17",
    "taklif4",
    "kelas5",
    "general4",
    "taklif5",
    "kelas6",
    "general5",
    "nextWeek2",
    "taklif6",
    "kelas7",
    "general6",
    "taklif18",
    "kelas19",
    "general18",
    "taklif7",
    "kelas8",
    "general7",
    "taklif8",
    "kelas9",
    "general8",
    "nextWeek",
    "taklif10",
    "kelas11",
    "general10",
    "taklif11",
    "kelas12",
    "general11",
    "taklif12",
    "kelas13",
    "general12",
    "taklif13",
    "kelas14",
    "general13",
    "taklif14",
    "kelas15",
    "general14",
    "taklif15",
    "kelas16",
    "general15",
    "taklif16",
    "kelas17",
    "general16",
    "generic"
  ],
  barname3: [
    "barname3",
    "currentWeek",
    "taklif3",
    "kelas4",
    "general3",
    "taklif17",
    "kelas18",
    "general17",
    "taklif4",
    "kelas5",
    "general4",
    "taklif5",
    "kelas6",
    "general5",
    "nextWeek2",
    "taklif6",
    "kelas7",
    "general6",
    "taklif18",
    "kelas19",
    "general18",
    "taklif7",
    "kelas8",
    "general7",
    "taklif8",
    "kelas9",
    "general8",
    "nextWeek",
    "taklif10",
    "kelas11",
    "general10",
    "taklif11",
    "kelas12",
    "general11",
    "taklif12",
    "kelas13",
    "general12",
    "taklif13",
    "kelas14",
    "general13",
    "taklif14",
    "kelas15",
    "general14",
    "taklif15",
    "kelas16",
    "general15",
    "taklif16",
    "kelas17",
    "general16"
  ],
  currentWeek: [
    "currentWeek",
    "taklif3",
    "kelas4",
    "general3",
    "taklif17",
    "kelas18",
    "general17",
    "taklif4",
    "kelas5",
    "general4",
    "taklif5",
    "kelas6",
    "general5"
  ],
  taklif3: ["taklif3"],
  kelas4: ["kelas4"],
  general3: ["general3"],
  taklif17: ["taklif17"],
  kelas18: ["kelas18"],
  general17: ["general17"],
  taklif4: ["taklif4"],
  kelas5: ["kelas5"],
  general4: ["general4"],
  taklif5: ["taklif5"],
  kelas6: ["kelas6"],
  general5: ["general5"],
  nextWeek2: [
    "nextWeek2",
    "taklif6",
    "kelas7",
    "general6",
    "taklif18",
    "kelas19",
    "general18",
    "taklif7",
    "kelas8",
    "general7",
    "taklif8",
    "kelas9",
    "general8"
  ],
  taklif6: ["taklif6"],
  kelas7: ["kelas7"],
  general6: ["general6"],
  taklif18: ["taklif18"],
  kelas19: ["kelas19"],
  general18: ["general18"],
  taklif7: ["taklif7"],
  kelas8: ["kelas8"],
  general7: ["general7"],
  taklif8: ["taklif8"],
  kelas9: ["kelas9"],
  general8: ["general8"],
  nextWeek: [
    "nextWeek",
    "taklif10",
    "kelas11",
    "general10",
    "taklif11",
    "kelas12",
    "general11",
    "taklif12",
    "kelas13",
    "general12",
    "taklif13",
    "kelas14",
    "general13",
    "taklif14",
    "kelas15",
    "general14",
    "taklif15",
    "kelas16",
    "general15",
    "taklif16",
    "kelas17",
    "general16"
  ],
  taklif10: ["taklif10"],
  kelas11: ["kelas11"],
  general10: ["general10"],
  taklif11: ["taklif11"],
  kelas12: ["kelas12"],
  general11: ["general11"],
  taklif12: ["taklif12"],
  kelas13: ["kelas13"],
  general12: ["general12"],
  taklif13: ["taklif13"],
  kelas14: ["kelas14"],
  general13: ["general13"],
  taklif14: ["taklif14"],
  kelas15: ["kelas15"],
  general14: ["general14"],
  taklif15: ["taklif15"],
  kelas16: ["kelas16"],
  general15: ["general15"],
  taklif16: ["taklif16"],
  kelas17: ["kelas17"],
  general16: ["general16"],
  generic: ["generic"],
  takalif: ["takalif", "listTakalif", "takllif", "asignmentComponent"],
  listTakalif: ["listTakalif"],
  takllif: ["takllif", "asignmentComponent"],
  asignmentComponent: ["asignmentComponent"],
  notifications: ["notifications"],
  modal: ["modal"],
  tabBar: ["tabBar"],
  theWall: ["theWall"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  loginError: "div";
  button: typeof Button;
  loading: "div";
  pageContent: "div";
  darsHa: "div";
  darsha: "div";
  mabahes: "div";
  jalasat2: "div";
  jalase: "div";
  embedHtml: typeof Embed;
  taklif: "div";
  attachments: "div";
  kelasHa: "div";
  rooms: "div";
  kelas2: "div";
  onlineSession: typeof OnlineSession;
  karname: "div";
  darsha2: "div";
  overview: "div";
  term: "div";
  barname: "div";
  barname3: "div";
  currentWeek: "div";
  taklif3: "div";
  kelas4: "div";
  general3: "div";
  taklif17: "div";
  kelas18: "div";
  general17: "div";
  taklif4: "div";
  kelas5: "div";
  general4: "div";
  taklif5: "div";
  kelas6: "div";
  general5: "div";
  nextWeek2: "div";
  taklif6: "div";
  kelas7: "div";
  general6: "div";
  taklif18: "div";
  kelas19: "div";
  general18: "div";
  taklif7: "div";
  kelas8: "div";
  general7: "div";
  taklif8: "div";
  kelas9: "div";
  general8: "div";
  nextWeek: "div";
  taklif10: "div";
  kelas11: "div";
  general10: "div";
  taklif11: "div";
  kelas12: "div";
  general11: "div";
  taklif12: "div";
  kelas13: "div";
  general12: "div";
  taklif13: "div";
  kelas14: "div";
  general13: "div";
  taklif14: "div";
  kelas15: "div";
  general14: "div";
  taklif15: "div";
  kelas16: "div";
  general15: "div";
  taklif16: "div";
  kelas17: "div";
  general16: "div";
  generic: "div";
  takalif: "div";
  listTakalif: "div";
  takllif: "div";
  asignmentComponent: typeof AsignmentComponent;
  notifications: typeof Notifications;
  modal: typeof AntdModal;
  tabBar: typeof TabBar;
  theWall: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStudPanel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStudPanel__VariantsArgs;
    args?: PlasmicStudPanel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStudPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStudPanel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStudPanel__ArgProps,
          internalVariantPropNames: PlasmicStudPanel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStudPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStudPanel";
  } else {
    func.displayName = `PlasmicStudPanel.${nodeName}`;
  }
  return func;
}

export const PlasmicStudPanel = Object.assign(
  // Top-level PlasmicStudPanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loginError: makeNodeComponent("loginError"),
    button: makeNodeComponent("button"),
    loading: makeNodeComponent("loading"),
    pageContent: makeNodeComponent("pageContent"),
    darsHa: makeNodeComponent("darsHa"),
    darsha: makeNodeComponent("darsha"),
    mabahes: makeNodeComponent("mabahes"),
    jalasat2: makeNodeComponent("jalasat2"),
    jalase: makeNodeComponent("jalase"),
    embedHtml: makeNodeComponent("embedHtml"),
    taklif: makeNodeComponent("taklif"),
    attachments: makeNodeComponent("attachments"),
    kelasHa: makeNodeComponent("kelasHa"),
    rooms: makeNodeComponent("rooms"),
    kelas2: makeNodeComponent("kelas2"),
    onlineSession: makeNodeComponent("onlineSession"),
    karname: makeNodeComponent("karname"),
    darsha2: makeNodeComponent("darsha2"),
    overview: makeNodeComponent("overview"),
    term: makeNodeComponent("term"),
    barname: makeNodeComponent("barname"),
    barname3: makeNodeComponent("barname3"),
    currentWeek: makeNodeComponent("currentWeek"),
    taklif3: makeNodeComponent("taklif3"),
    kelas4: makeNodeComponent("kelas4"),
    general3: makeNodeComponent("general3"),
    taklif17: makeNodeComponent("taklif17"),
    kelas18: makeNodeComponent("kelas18"),
    general17: makeNodeComponent("general17"),
    taklif4: makeNodeComponent("taklif4"),
    kelas5: makeNodeComponent("kelas5"),
    general4: makeNodeComponent("general4"),
    taklif5: makeNodeComponent("taklif5"),
    kelas6: makeNodeComponent("kelas6"),
    general5: makeNodeComponent("general5"),
    nextWeek2: makeNodeComponent("nextWeek2"),
    taklif6: makeNodeComponent("taklif6"),
    kelas7: makeNodeComponent("kelas7"),
    general6: makeNodeComponent("general6"),
    taklif18: makeNodeComponent("taklif18"),
    kelas19: makeNodeComponent("kelas19"),
    general18: makeNodeComponent("general18"),
    taklif7: makeNodeComponent("taklif7"),
    kelas8: makeNodeComponent("kelas8"),
    general7: makeNodeComponent("general7"),
    taklif8: makeNodeComponent("taklif8"),
    kelas9: makeNodeComponent("kelas9"),
    general8: makeNodeComponent("general8"),
    nextWeek: makeNodeComponent("nextWeek"),
    taklif10: makeNodeComponent("taklif10"),
    kelas11: makeNodeComponent("kelas11"),
    general10: makeNodeComponent("general10"),
    taklif11: makeNodeComponent("taklif11"),
    kelas12: makeNodeComponent("kelas12"),
    general11: makeNodeComponent("general11"),
    taklif12: makeNodeComponent("taklif12"),
    kelas13: makeNodeComponent("kelas13"),
    general12: makeNodeComponent("general12"),
    taklif13: makeNodeComponent("taklif13"),
    kelas14: makeNodeComponent("kelas14"),
    general13: makeNodeComponent("general13"),
    taklif14: makeNodeComponent("taklif14"),
    kelas15: makeNodeComponent("kelas15"),
    general14: makeNodeComponent("general14"),
    taklif15: makeNodeComponent("taklif15"),
    kelas16: makeNodeComponent("kelas16"),
    general15: makeNodeComponent("general15"),
    taklif16: makeNodeComponent("taklif16"),
    kelas17: makeNodeComponent("kelas17"),
    general16: makeNodeComponent("general16"),
    generic: makeNodeComponent("generic"),
    takalif: makeNodeComponent("takalif"),
    listTakalif: makeNodeComponent("listTakalif"),
    takllif: makeNodeComponent("takllif"),
    asignmentComponent: makeNodeComponent("asignmentComponent"),
    notifications: makeNodeComponent("notifications"),
    modal: makeNodeComponent("modal"),
    tabBar: makeNodeComponent("tabBar"),
    theWall: makeNodeComponent("theWall"),

    // Metadata about props expected for PlasmicStudPanel
    internalVariantProps: PlasmicStudPanel__VariantProps,
    internalArgProps: PlasmicStudPanel__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicStudPanel;
/* prettier-ignore-end */
