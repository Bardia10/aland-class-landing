/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: f7qPkXc8OPmj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: _MWZyCmj9Poj/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicStoryFrame2.module.css"; // plasmic-import: f7qPkXc8OPmj/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 2D7jq9Mtq-9Z/icon
import ChevronUpSvgIcon from "./icons/PlasmicIcon__ChevronUpSvg"; // plasmic-import: FGtDNcqmugkF/icon
import ChevronDownSvgIcon from "./icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: -nloqc0-FJ1X/icon

createPlasmicElementProxy;

export type PlasmicStoryFrame2__VariantMembers = {
  stage: "_1" | "_2" | "_3" | "_4";
};
export type PlasmicStoryFrame2__VariantsArgs = {
  stage?: SingleChoiceArg<"_1" | "_2" | "_3" | "_4">;
};
type VariantPropType = keyof PlasmicStoryFrame2__VariantsArgs;
export const PlasmicStoryFrame2__VariantProps = new Array<VariantPropType>(
  "stage"
);

export type PlasmicStoryFrame2__ArgsType = {
  stage2?: string;
  onStage2Change?: (val: string) => void;
};
type ArgPropType = keyof PlasmicStoryFrame2__ArgsType;
export const PlasmicStoryFrame2__ArgProps = new Array<ArgPropType>(
  "stage2",
  "onStage2Change"
);

export type PlasmicStoryFrame2__OverridesType = {
  storyFrame?: Flex__<"div">;
};

export interface DefaultStoryFrame2Props {
  stage2?: string;
  onStage2Change?: (val: string) => void;
  stage?: SingleChoiceArg<"_1" | "_2" | "_3" | "_4">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStoryFrame2__RenderFunc(props: {
  variants: PlasmicStoryFrame2__VariantsArgs;
  args: PlasmicStoryFrame2__ArgsType;
  overrides: PlasmicStoryFrame2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "stage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.stage2;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.stage
      },
      {
        path: "stage2",
        type: "writable",
        variableType: "text",

        valueProp: "stage2",
        onChangeProp: "onStage2Change"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"storyFrame"}
      data-plasmic-override={overrides.storyFrame}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.storyFrame,
        {
          [sty.storyFramestage__1]: hasVariant($state, "stage", "_1"),
          [sty.storyFramestage__2]: hasVariant($state, "stage", "_2"),
          [sty.storyFramestage__3]: hasVariant($state, "stage", "_3"),
          [sty.storyFramestage__4]: hasVariant($state, "stage", "_4")
        }
      )}
    >
      <Button
        className={classNames("__wab_instance", sty.button__eRxr, {
          [sty.buttonstage__1__eRxrW7KXt]: hasVariant($state, "stage", "_1"),
          [sty.buttonstage__4__eRxrGIwT]: hasVariant($state, "stage", "_4")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateStage2"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["stage2"]
                  },
                  operation: 0,
                  value: ($state.stage2 =
                    $state.stage2 === "_1"
                      ? $state.stage2
                      : $state.stage2.replace(
                          /_(\d+)/,
                          (_, num) => `_${parseInt(num) - 1}`
                        ))
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateStage2"] != null &&
            typeof $steps["updateStage2"] === "object" &&
            typeof $steps["updateStage2"].then === "function"
          ) {
            $steps["updateStage2"] = await $steps["updateStage2"];
          }
        }}
      />

      <div
        className={classNames(projectcss.all, sty.freeBox__vqDt4, {
          [sty.freeBoxstage__1__vqDt4W7KXt]: hasVariant($state, "stage", "_1"),
          [sty.freeBoxstage__4__vqDt4GIwT]: hasVariant($state, "stage", "_4")
        })}
      >
        <ChevronUpSvgIcon
          className={classNames(projectcss.all, sty.svg__t2M4R, {
            [sty.svgstage__1__t2M4Rw7KXt]: hasVariant($state, "stage", "_1")
          })}
          onClick={async event => {
            const $steps = {};

            $steps["updateStage2"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["stage2"]
                    },
                    operation: 0,
                    value: ($state.stage2 =
                      $state.stage2 === "_1"
                        ? $state.stage2
                        : $state.stage2.replace(
                            /_(\d+)/,
                            (_, num) => `_${parseInt(num) - 1}`
                          ))
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateStage2"] != null &&
              typeof $steps["updateStage2"] === "object" &&
              typeof $steps["updateStage2"].then === "function"
            ) {
              $steps["updateStage2"] = await $steps["updateStage2"];
            }
          }}
          role={"img"}
        />
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__z7MvT, {
          [sty.freeBoxstage__1__z7MvTw7KXt]: hasVariant($state, "stage", "_1")
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__nYt8J,
            {
              [sty.textstage__1__nYt8Jw7KXt]: hasVariant($state, "stage", "_1"),
              [sty.textstage__2__nYt8JhJdTb]: hasVariant($state, "stage", "_2"),
              [sty.textstage__3__nYt8J3QSxy]: hasVariant($state, "stage", "_3"),
              [sty.textstage__4__nYt8JGIwT]: hasVariant($state, "stage", "_4")
            }
          )}
        >
          {
            "\u062f\u0627\u0633\u062a\u0627\u0646 \u0627\u0644\u0645\u067e\u06cc\u0627\u062f"
          }
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rvzVd,
            {
              [sty.textstage__1__rvzVDw7KXt]: hasVariant($state, "stage", "_1"),
              [sty.textstage__2__rvzVDhJdTb]: hasVariant($state, "stage", "_2"),
              [sty.textstage__3__rvzVd3QSxy]: hasVariant($state, "stage", "_3"),
              [sty.textstage__4__rvzVdgIwT]: hasVariant($state, "stage", "_4")
            }
          )}
        >
          {"\u062a\u0648\u0644\u062f \u06cc\u06a9 \u0631\u0648\u06cc\u0627\n"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vYlZj,
            {
              [sty.textstage__1__vYlZJw7KXt]: hasVariant($state, "stage", "_1"),
              [sty.textstage__2__vYlZJhJdTb]: hasVariant($state, "stage", "_2"),
              [sty.textstage__3__vYlZj3QSxy]: hasVariant($state, "stage", "_3"),
              [sty.textstage__4__vYlZjgIwT]: hasVariant($state, "stage", "_4")
            }
          )}
        >
          {hasVariant($state, "stage", "_4")
            ? "\u062f\u0631 \u062a\u06cc\u0631 \u0645\u0627\u0647 \u0633\u0627\u0644 1393 \u0627\u0648\u0644\u06cc\u0646 \u0642\u062f\u0645 \u0647\u0627"
            : hasVariant($state, "stage", "_3")
            ? "\u062f\u0631 \u062a\u06cc\u0631 \u0645\u0627\u0647 \u0633\u0627\u0644 1393 \u0627\u0648\u0644\u06cc\u0646 \u0642\u062f\u0645 \u0647\u0627"
            : hasVariant($state, "stage", "_2")
            ? "\u062f\u0631 \u062a\u06cc\u0631 \u0645\u0627\u0647 \u0633\u0627\u0644 1393 \u0627\u0648\u0644\u06cc\u0646 \u0642\u062f\u0645 \u0647\u0627"
            : "\u062f\u0631 \u062a\u06cc\u0631 \u0645\u0627\u0647 \u0633\u0627\u0644 1393 \u0627\u0648\u0644\u06cc\u0646 \u0642\u062f\u0645 \u0647\u0627 ."}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__qUsN5,
            {
              [sty.textstage__1__qUsN5W7KXt]: hasVariant($state, "stage", "_1"),
              [sty.textstage__2__qUsN5HJdTb]: hasVariant($state, "stage", "_2"),
              [sty.textstage__3__qUsN53QSxy]: hasVariant($state, "stage", "_3"),
              [sty.textstage__4__qUsN5GIwT]: hasVariant($state, "stage", "_4")
            }
          )}
        >
          {
            "\n\u0628\u0631\u0627\u06cc \u0631\u0642\u0645 \u0632\u062f\u0646 \u0631\u0648\u06cc\u0627\u06cc\u06cc \u0646\u0648 \u062f\u0631 \u0634\u0647\u0631 \u0627\u06cc\u0644\u0627\u0645 \u0628\u0631\u062f\u0627\u0634\u062a\u06cc\u0645."
          }
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__m7Rl3, {
          [sty.freeBoxstage__1__m7Rl3W7KXt]: hasVariant($state, "stage", "_1"),
          [sty.freeBoxstage__4__m7Rl3GIwT]: hasVariant($state, "stage", "_4")
        })}
      >
        <ChevronDownSvgIcon
          className={classNames(projectcss.all, sty.svg___3Xutq, {
            [sty.svgstage__4___3XutqGIwT]: hasVariant($state, "stage", "_4")
          })}
          onClick={async event => {
            const $steps = {};

            $steps["updateStage2"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["stage2"]
                    },
                    operation: 0,
                    value: ($state.stage2 =
                      $state.stage2 === "_4"
                        ? $state.stage2
                        : $state.stage2.replace(
                            /_(\d+)/,
                            (_, num) => `_${parseInt(num) + 1}`
                          ))
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateStage2"] != null &&
              typeof $steps["updateStage2"] === "object" &&
              typeof $steps["updateStage2"].then === "function"
            ) {
              $steps["updateStage2"] = await $steps["updateStage2"];
            }
          }}
          role={"img"}
        />
      </div>
      <Button
        className={classNames("__wab_instance", sty.button__rbvKd, {
          [sty.buttonstage__1__rbvKDw7KXt]: hasVariant($state, "stage", "_1"),
          [sty.buttonstage__4__rbvKdgIwT]: hasVariant($state, "stage", "_4")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateStage2"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["stage2"]
                  },
                  operation: 0,
                  value: ($state.stage2 =
                    $state.stage2 === "_4"
                      ? $state.stage2
                      : $state.stage2.replace(
                          /_(\d+)/,
                          (_, num) => `_${parseInt(num) + 1}`
                        ))
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateStage2"] != null &&
            typeof $steps["updateStage2"] === "object" &&
            typeof $steps["updateStage2"].then === "function"
          ) {
            $steps["updateStage2"] = await $steps["updateStage2"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  storyFrame: ["storyFrame"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  storyFrame: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStoryFrame2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStoryFrame2__VariantsArgs;
    args?: PlasmicStoryFrame2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStoryFrame2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStoryFrame2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStoryFrame2__ArgProps,
          internalVariantPropNames: PlasmicStoryFrame2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStoryFrame2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "storyFrame") {
    func.displayName = "PlasmicStoryFrame2";
  } else {
    func.displayName = `PlasmicStoryFrame2.${nodeName}`;
  }
  return func;
}

export const PlasmicStoryFrame2 = Object.assign(
  // Top-level PlasmicStoryFrame2 renders the root element
  makeNodeComponent("storyFrame"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicStoryFrame2
    internalVariantProps: PlasmicStoryFrame2__VariantProps,
    internalArgProps: PlasmicStoryFrame2__ArgProps
  }
);

export default PlasmicStoryFrame2;
/* prettier-ignore-end */
