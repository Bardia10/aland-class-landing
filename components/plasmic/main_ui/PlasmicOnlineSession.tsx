/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: 7XZkErEnzB5a

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicOnlineSession.module.css"; // plasmic-import: 7XZkErEnzB5a/css

createPlasmicElementProxy;

export type PlasmicOnlineSession__VariantMembers = {};
export type PlasmicOnlineSession__VariantsArgs = {};
type VariantPropType = keyof PlasmicOnlineSession__VariantsArgs;
export const PlasmicOnlineSession__VariantProps = new Array<VariantPropType>();

export type PlasmicOnlineSession__ArgsType = { session2?: any };
type ArgPropType = keyof PlasmicOnlineSession__ArgsType;
export const PlasmicOnlineSession__ArgProps = new Array<ArgPropType>(
  "session2"
);

export type PlasmicOnlineSession__OverridesType = {
  root?: Flex__<"div">;
  onlineSession?: Flex__<"div">;
  sessionTitle?: Flex__<"div">;
  sessionInfo?: Flex__<"div">;
  desc?: Flex__<"div">;
  teacher?: Flex__<"div">;
  date?: Flex__<"div">;
  زمان?: Flex__<"div">;
  sessionLink?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultOnlineSessionProps {
  session2?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOnlineSession__RenderFunc(props: {
  variants: PlasmicOnlineSession__VariantsArgs;
  args: PlasmicOnlineSession__ArgsType;
  overrides: PlasmicOnlineSession__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "session",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                title: "Your Title Here",
                date: "2023-06-28",
                time: "14:00",
                desc: "Description of the event",
                link: "https://www.skyroom.online",
                teacher: "Teacher's Name"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root
      )}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $props.session2;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            data-plasmic-name={"onlineSession"}
            data-plasmic-override={overrides.onlineSession}
            className={classNames(projectcss.all, sty.onlineSession)}
            key={currentIndex}
          >
            <div
              data-plasmic-name={"sessionTitle"}
              data-plasmic-override={overrides.sessionTitle}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.sessionTitle
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"sessionInfo"}
              data-plasmic-override={overrides.sessionInfo}
              className={classNames(projectcss.all, sty.sessionInfo)}
            >
              <div
                data-plasmic-name={"desc"}
                data-plasmic-override={overrides.desc}
                className={classNames(projectcss.all, sty.desc)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cv4PA
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.desc;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"teacher"}
                data-plasmic-override={overrides.teacher}
                className={classNames(projectcss.all, sty.teacher)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qny37
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.teacher;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bigSx
                  )}
                >
                  {"\u062f\u0628\u06cc\u0631"}
                </div>
              </div>
              <div
                data-plasmic-name={"date"}
                data-plasmic-override={overrides.date}
                className={classNames(projectcss.all, sty.date)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lvFb3
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.date;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l4OmT
                  )}
                >
                  {"\u062a\u0627\u0631\u06cc\u062e"}
                </div>
              </div>
              <div
                data-plasmic-name={"\u0632\u0645\u0627\u0646"}
                data-plasmic-override={overrides.زمان}
                className={classNames(projectcss.all, sty.زمان)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hHinh
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.time;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__n638J
                  )}
                >
                  {"\u0633\u0627\u0639\u062a"}
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"sessionLink"}
              data-plasmic-override={overrides.sessionLink}
              className={classNames(projectcss.all, sty.sessionLink)}
            >
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1HWqF
                  )}
                >
                  {"\u0644\u06cc\u0646\u06a9 \u06a9\u0644\u0627\u0633:"}
                </div>
                <PlasmicLink__
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link
                  )}
                  component={Link}
                  href={(() => {
                    try {
                      return currentItem.url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  platform={"nextjs"}
                  target={"_blank"}
                  title={(() => {
                    try {
                      return currentItem.link;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  {
                    "\u0628\u0631\u0627\u06cc \u0648\u0632\u0648\u062f \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f"
                  }
                </PlasmicLink__>
              </div>
            </div>
          </div>
        );
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "onlineSession",
    "sessionTitle",
    "sessionInfo",
    "desc",
    "teacher",
    "date",
    "\u0632\u0645\u0627\u0646",
    "sessionLink",
    "freeBox",
    "link"
  ],
  onlineSession: [
    "onlineSession",
    "sessionTitle",
    "sessionInfo",
    "desc",
    "teacher",
    "date",
    "\u0632\u0645\u0627\u0646",
    "sessionLink",
    "freeBox",
    "link"
  ],
  sessionTitle: ["sessionTitle"],
  sessionInfo: [
    "sessionInfo",
    "desc",
    "teacher",
    "date",
    "\u0632\u0645\u0627\u0646"
  ],
  desc: ["desc"],
  teacher: ["teacher"],
  date: ["date"],
  زمان: ["\u0632\u0645\u0627\u0646"],
  sessionLink: ["sessionLink", "freeBox", "link"],
  freeBox: ["freeBox", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  onlineSession: "div";
  sessionTitle: "div";
  sessionInfo: "div";
  desc: "div";
  teacher: "div";
  date: "div";
  زمان: "div";
  sessionLink: "div";
  freeBox: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOnlineSession__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOnlineSession__VariantsArgs;
    args?: PlasmicOnlineSession__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOnlineSession__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOnlineSession__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOnlineSession__ArgProps,
          internalVariantPropNames: PlasmicOnlineSession__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOnlineSession__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOnlineSession";
  } else {
    func.displayName = `PlasmicOnlineSession.${nodeName}`;
  }
  return func;
}

export const PlasmicOnlineSession = Object.assign(
  // Top-level PlasmicOnlineSession renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    onlineSession: makeNodeComponent("onlineSession"),
    sessionTitle: makeNodeComponent("sessionTitle"),
    sessionInfo: makeNodeComponent("sessionInfo"),
    desc: makeNodeComponent("desc"),
    teacher: makeNodeComponent("teacher"),
    date: makeNodeComponent("date"),
    زمان: makeNodeComponent("\u0632\u0645\u0627\u0646"),
    sessionLink: makeNodeComponent("sessionLink"),
    freeBox: makeNodeComponent("freeBox"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicOnlineSession
    internalVariantProps: PlasmicOnlineSession__VariantProps,
    internalArgProps: PlasmicOnlineSession__ArgProps
  }
);

export default PlasmicOnlineSession;
/* prettier-ignore-end */
