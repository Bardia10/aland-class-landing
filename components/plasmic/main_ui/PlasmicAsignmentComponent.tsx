/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: Q97ZpLH0wHko

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Button from "../../Button"; // plasmic-import: _MWZyCmj9Poj/component
import AnswereToAsignment from "../../AnswereToAsignment"; // plasmic-import: eV0HKBbutTtb/component
import Checkbox from "../../Checkbox"; // plasmic-import: 8GCIwGzw7mQX/component
import TextInput from "../../TextInput"; // plasmic-import: WXGFD0JrVuY6/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicAsignmentComponent.module.css"; // plasmic-import: Q97ZpLH0wHko/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 2D7jq9Mtq-9Z/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: 7hHqYtt8cnP_/icon
import IconIcon from "../radix_ui/icons/PlasmicIcon__Icon"; // plasmic-import: MbDRsJU0e3bw/icon
import CloseBoldSvgrepoComSvgIcon from "./icons/PlasmicIcon__CloseBoldSvgrepoComSvg"; // plasmic-import: SJMAvzRhRhf4/icon

createPlasmicElementProxy;

export type PlasmicAsignmentComponent__VariantMembers = {
  stage: "start" | "sending" | "colapsed";
};
export type PlasmicAsignmentComponent__VariantsArgs = {
  stage?: SingleChoiceArg<"start" | "sending" | "colapsed">;
};
type VariantPropType = keyof PlasmicAsignmentComponent__VariantsArgs;
export const PlasmicAsignmentComponent__VariantProps =
  new Array<VariantPropType>("stage");

export type PlasmicAsignmentComponent__ArgsType = {
  asignment?: any;
  onAsignmentChange2?: (val: string) => void;
  asignment2?: any;
  answeres2?: any;
  results?: any;
};
type ArgPropType = keyof PlasmicAsignmentComponent__ArgsType;
export const PlasmicAsignmentComponent__ArgProps = new Array<ArgPropType>(
  "asignment",
  "onAsignmentChange2",
  "asignment2",
  "answeres2",
  "results"
);

export type PlasmicAsignmentComponent__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  answereToAsignment?: Flex__<typeof AnswereToAsignment>;
  checkbox?: Flex__<typeof Checkbox>;
  sendingForm?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  form?: Flex__<typeof FormWrapper>;
  sentCard?: Flex__<"div">;
  textInput2?: Flex__<typeof TextInput>;
};

export interface DefaultAsignmentComponentProps {
  asignment?: any;
  onAsignmentChange2?: (val: string) => void;
  asignment2?: any;
  answeres2?: any;
  results?: any;
  stage?: SingleChoiceArg<"start" | "sending" | "colapsed">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAsignmentComponent__RenderFunc(props: {
  variants: PlasmicAsignmentComponent__VariantsArgs;
  args: PlasmicAsignmentComponent__ArgsType;
  overrides: PlasmicAsignmentComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "asignment",
        type: "writable",
        variableType: "object",

        valueProp: "asignment",
        onChangeProp: "onAsignmentChange2"
      },
      {
        path: "textInput[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "textInput2[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "stage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.stage
      },
      {
        path: "answere",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editing",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "answeres",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                {
                  id: 1,
                  student: 1,
                  asignment: 1,
                  title: "answere title",
                  desc: "a longer text describing the answere",
                  link: "additionallink.com",
                  date: "2023/12/12",
                  time: "23:49",
                  result: {
                    text: "a text that is the result",
                    grade: 68,
                    type: "try again" //done or try again
                  }
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "textArea[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "form[].value",
        type: "private",
        variableType: "object",

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form[].isSubmitting",
        type: "private",
        variableType: "boolean",

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "checkbox[][].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "wall",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root,
        {
          [sty.rootstage_colapsed]: hasVariant($state, "stage", "colapsed"),
          [sty.rootstage_start]: hasVariant($state, "stage", "start")
        }
      )}
      onClick={async event => {
        const $steps = {};
      }}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $props.asignment2;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            className={classNames(projectcss.all, sty.freeBox__mYi5N, {
              [sty.freeBoxstage_colapsed__mYi5NbqMqK]: hasVariant(
                $state,
                "stage",
                "colapsed"
              ),
              [sty.freeBoxstage_sending__mYi5N9IxSj]: hasVariant(
                $state,
                "stage",
                "sending"
              ),
              [sty.freeBoxstage_start__mYi5NLwq6Q]: hasVariant(
                $state,
                "stage",
                "start"
              )
            })}
            key={currentIndex}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__bTthl, {
                [sty.freeBoxstage_colapsed__bTthlbqMqK]: hasVariant(
                  $state,
                  "stage",
                  "colapsed"
                ),
                [sty.freeBoxstage_start__bTthlLwq6Q]: hasVariant(
                  $state,
                  "stage",
                  "start"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateStage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["stage"]
                        },
                        operation: 0,
                        value: "start"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStage"] != null &&
                  typeof $steps["updateStage"] === "object" &&
                  typeof $steps["updateStage"].then === "function"
                ) {
                  $steps["updateStage"] = await $steps["updateStage"];
                }
              }}
            >
              {(() => {
                try {
                  return (
                    $state.answeres[$state.answeres.length - 1].result.grade !==
                    undefined
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sFiXq,
                    {
                      [sty.textstage_start__sFiXqlwq6Q]: hasVariant(
                        $state,
                        "stage",
                        "start"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.answeres[$state.answeres.length - 1]
                          .result.grade;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
              {(
                hasVariant($state, "stage", "colapsed")
                  ? true
                  : hasVariant($state, "stage", "sending")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__n14Py,
                    {
                      [sty.textstage_colapsed__n14PybqMqK]: hasVariant(
                        $state,
                        "stage",
                        "colapsed"
                      ),
                      [sty.textstage_sending__n14Py9IxSj]: hasVariant(
                        $state,
                        "stage",
                        "sending"
                      ),
                      [sty.textstage_start__n14PyLwq6Q]: hasVariant(
                        $state,
                        "stage",
                        "start"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.text;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Enter some text\ngoogle.com";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
              {(hasVariant($state, "stage", "colapsed") ? true : false) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kXfV6,
                    {
                      [sty.textstage_colapsed__kXfV6BqMqK]: hasVariant(
                        $state,
                        "stage",
                        "colapsed"
                      ),
                      [sty.textstage_start__kXfV6Lwq6Q]: hasVariant(
                        $state,
                        "stage",
                        "start"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9K4Cb,
                {
                  [sty.textstage_colapsed___9K4CbbqMqK]: hasVariant(
                    $state,
                    "stage",
                    "colapsed"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__e0Pwc,
                {
                  [sty.textstage_colapsed__e0PwCbqMqK]: hasVariant(
                    $state,
                    "stage",
                    "colapsed"
                  ),
                  [sty.textstage_sending__e0Pwc9IxSj]: hasVariant(
                    $state,
                    "stage",
                    "sending"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem.desc;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Enter some text\ngoogle.com";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return currentItem.url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_1, __plasmic_idx_1) => {
              const currentItem = __plasmic_item_1;
              const currentIndex = __plasmic_idx_1;
              return (
                <PlasmicLink__
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link,
                    {
                      [sty.linkstage_colapsed]: hasVariant(
                        $state,
                        "stage",
                        "colapsed"
                      ),
                      [sty.linkstage_sending]: hasVariant(
                        $state,
                        "stage",
                        "sending"
                      )
                    }
                  )}
                  component={Link}
                  href={(() => {
                    try {
                      return currentItem;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://www.plasmic.app/";
                      }
                      throw e;
                    }
                  })()}
                  key={currentIndex}
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Some link text";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </PlasmicLink__>
              );
            })}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tlrR9,
                {
                  [sty.textstage_colapsed__tlrR9BqMqK]: hasVariant(
                    $state,
                    "stage",
                    "colapsed"
                  ),
                  [sty.textstage_sending__tlrR99IxSj]: hasVariant(
                    $state,
                    "stage",
                    "sending"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.asignment2.deadline_date;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Enter some text\ngoogle.com";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rv8Tm,
                {
                  [sty.textstage_colapsed__rv8TmbqMqK]: hasVariant(
                    $state,
                    "stage",
                    "colapsed"
                  ),
                  [sty.textstage_sending__rv8Tm9IxSj]: hasVariant(
                    $state,
                    "stage",
                    "sending"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return "ددلاین " + currentItem.deadline_date;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Enter some text\ngoogle.com";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            {(
              hasVariant($state, "stage", "colapsed")
                ? true
                : hasVariant($state, "stage", "sending")
                ? true
                : hasVariant($state, "stage", "start")
                ? (() => {
                    try {
                      return currentItem.status == 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <Button
                className={classNames("__wab_instance", sty.button__lMwfe, {
                  [sty.buttonstage_colapsed__lMwfebqMqK]: hasVariant(
                    $state,
                    "stage",
                    "colapsed"
                  ),
                  [sty.buttonstage_sending__lMwfe9IxSj]: hasVariant(
                    $state,
                    "stage",
                    "sending"
                  ),
                  [sty.buttonstage_start__lMwfeLwq6Q]: hasVariant(
                    $state,
                    "stage",
                    "start"
                  )
                })}
                color={"green"}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateStage"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["stage"]
                          },
                          operation: 0,
                          value: "sending"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStage"] != null &&
                    typeof $steps["updateStage"] === "object" &&
                    typeof $steps["updateStage"].then === "function"
                  ) {
                    $steps["updateStage"] = await $steps["updateStage"];
                  }
                }}
              >
                {"\u0627\u0631\u0633\u0627\u0644 \u062c\u0648\u0627\u0628"}
              </Button>
            ) : null}
            <div
              className={classNames(projectcss.all, sty.freeBox__jnOy8, {
                [sty.freeBoxstage_sending__jnOy89IxSj]: hasVariant(
                  $state,
                  "stage",
                  "sending"
                ),
                [sty.freeBoxstage_start__jnOy8Lwq6Q]: hasVariant(
                  $state,
                  "stage",
                  "start"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zrpZn,
                  {
                    [sty.textstage_start__zrpZnLwq6Q]: hasVariant(
                      $state,
                      "stage",
                      "start"
                    )
                  }
                )}
              >
                {
                  "\u062c\u0648\u0627\u0628 \u0647\u0627\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___5TBt)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rsYnG
                  )}
                >
                  {"\u0639\u0646\u0648\u0627\u0646"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yZnFa
                  )}
                >
                  {"\u0646\u0645\u0631\u0647"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___42QRe
                  )}
                >
                  {"\u062c\u0648\u0627\u0628 \u0646\u0647\u0627\u06cc\u06cc"}
                </div>
              </div>
              {(
                hasVariant($state, "stage", "start")
                  ? (() => {
                      try {
                        return $props.answeres2[0].id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
                  : true
              )
                ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $props.answeres2;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_1, __plasmic_idx_1) => {
                    const currentItem = __plasmic_item_1;
                    const currentIndex = __plasmic_idx_1;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gJtsv,
                          {
                            [sty.freeBoxstage_start__gJtsvLwq6Q]: hasVariant(
                              $state,
                              "stage",
                              "start"
                            )
                          }
                        )}
                        key={currentIndex}
                      >
                        <AnswereToAsignment
                          data-plasmic-name={"answereToAsignment"}
                          data-plasmic-override={overrides.answereToAsignment}
                          answere={
                            hasVariant($state, "stage", "start")
                              ? (() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              : undefined
                          }
                          bar={(() => {
                            try {
                              return $props.asignment2.bar;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return 0;
                              }
                              throw e;
                            }
                          })()}
                          className={classNames(
                            "__wab_instance",
                            sty.answereToAsignment,
                            {
                              [sty.answereToAsignmentstage_colapsed]:
                                hasVariant($state, "stage", "colapsed"),
                              [sty.answereToAsignmentstage_sending]: hasVariant(
                                $state,
                                "stage",
                                "sending"
                              ),
                              [sty.answereToAsignmentstage_start]: hasVariant(
                                $state,
                                "stage",
                                "start"
                              )
                            }
                          )}
                          finalAnswere={
                            hasVariant($state, "stage", "start")
                              ? (() => {
                                  try {
                                    return $state.asignment.final_answere;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return $props.asignment2.final_answere;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                          }
                          isColapsed={
                            hasVariant($state, "stage", "start") ? true : true
                          }
                          result={(() => {
                            try {
                              return $props.results;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        {(
                          hasVariant($state, "stage", "start") ? true : false
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xXfzs,
                              {
                                [sty.textstage_start__xXfzsLwq6Q]: hasVariant(
                                  $state,
                                  "stage",
                                  "start"
                                )
                              }
                            )}
                          >
                            {"$props.answere.id"}
                          </div>
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4NmWw,
                            {
                              [sty.freeBoxstage_start___4NmWwLwq6Q]: hasVariant(
                                $state,
                                "stage",
                                "start"
                              )
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["httpPut"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "oFGo9etX3UbW3vpYoEjNm1",
                                      opId: "4a584fd4-cc5d-4fc2-8a20-01497595b331",
                                      userArgs: {
                                        headers: [
                                          localStorage.getItem("token")
                                        ],

                                        body: [
                                          $props.answeres2.map(
                                            answer => answer.id
                                          ),

                                          currentItem.id
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    },
                                    continueOnError: true
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["httpPut"] != null &&
                              typeof $steps["httpPut"] === "object" &&
                              typeof $steps["httpPut"].then === "function"
                            ) {
                              $steps["httpPut"] = await $steps["httpPut"];
                            }

                            $steps["httpGet"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "oFGo9etX3UbW3vpYoEjNm1",
                                      opId: "309d4c4e-c317-4882-b06b-178e546fa7e8",
                                      userArgs: {
                                        params: [$state.asignment.taklif[0].id],

                                        headers: [localStorage.getItem("token")]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: null,
                                      roleId: null
                                    },
                                    continueOnError: true
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["httpGet"] != null &&
                              typeof $steps["httpGet"] === "object" &&
                              typeof $steps["httpGet"].then === "function"
                            ) {
                              $steps["httpGet"] = await $steps["httpGet"];
                            }

                            $steps["updateAsignment"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["asignment"]
                                    },
                                    operation: 0,
                                    value: $steps.httpGet.data.response
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateAsignment"] != null &&
                              typeof $steps["updateAsignment"] === "object" &&
                              typeof $steps["updateAsignment"].then ===
                                "function"
                            ) {
                              $steps["updateAsignment"] = await $steps[
                                "updateAsignment"
                              ];
                            }
                          }}
                        >
                          {(hasVariant($state, "stage", "start") ? true : false)
                            ? (() => {
                                const child$Props = {
                                  children: null,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.checkbox,
                                    {
                                      [sty.checkboxstage_start]: hasVariant(
                                        $state,
                                        "stage",
                                        "start"
                                      )
                                    }
                                  ),
                                  isChecked:
                                    generateStateValueProp($state, [
                                      "checkbox",
                                      __plasmic_idx_0,
                                      __plasmic_idx_1,
                                      "isChecked"
                                    ]) ?? false,
                                  isDisabled: true,
                                  isIndeterminate: undefined,
                                  onChange: async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "checkbox",
                                        __plasmic_idx_0,
                                        __plasmic_idx_1,
                                        "isChecked"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "checkbox[][].isChecked",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.is_final == 1;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                    }
                                  ],
                                  [__plasmic_idx_0, __plasmic_idx_1]
                                );
                                return (
                                  <Checkbox
                                    data-plasmic-name={"checkbox"}
                                    data-plasmic-override={overrides.checkbox}
                                    {...child$Props}
                                  />
                                );
                              })()
                            : null}
                        </div>
                      </div>
                    );
                  })
                : null}
            </div>
            <div
              data-plasmic-name={"sendingForm"}
              data-plasmic-override={overrides.sendingForm}
              className={classNames(projectcss.all, sty.sendingForm, {
                [sty.sendingFormstage_colapsed]: hasVariant(
                  $state,
                  "stage",
                  "colapsed"
                ),
                [sty.sendingFormstage_sending]: hasVariant(
                  $state,
                  "stage",
                  "sending"
                ),
                [sty.sendingFormstage_start]: hasVariant(
                  $state,
                  "stage",
                  "start"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4Wrcz
                )}
              >
                {"\u0627\u0631\u0633\u0627\u0644 \u062c\u0648\u0627\u0628"}
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__xBZv, {
                  [sty.freeBoxstage_sending__xBZv9IxSj]: hasVariant(
                    $state,
                    "stage",
                    "sending"
                  )
                })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ni8Ie)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__axPzw
                    )}
                  >
                    {"\u0639\u0646\u0648\u0627\u0646"}
                  </div>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.textInput),
                      onChange: async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput",
                            __plasmic_idx_0,
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      type: "text",
                      value:
                        generateStateValueProp($state, [
                          "textInput",
                          __plasmic_idx_0,
                          "value"
                        ]) ?? ""
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "textInput[].value",
                          initFunc: ({ $props, $state, $queries }) => ""
                        }
                      ],
                      [__plasmic_idx_0]
                    );
                    return (
                      <TextInput
                        data-plasmic-name={"textInput"}
                        data-plasmic-override={overrides.textInput}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__zsbUg, {
                    [sty.freeBoxstage_colapsed__zsbUGbqMqK]: hasVariant(
                      $state,
                      "stage",
                      "colapsed"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wzgSp
                    )}
                  >
                    {"\u062a\u0648\u0636\u06cc\u062d\u0627\u062a"}
                  </div>
                  {(() => {
                    const child$Props = {
                      autoSize: true,
                      className: classNames("__wab_instance", sty.textArea, {
                        [sty.textAreastage_sending]: hasVariant(
                          $state,
                          "stage",
                          "sending"
                        )
                      }),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["textArea", __plasmic_idx_0, "value"],
                          AntdTextArea_Helpers
                        ).apply(null, eventArgs);
                      },
                      value: generateStateValueProp($state, [
                        "textArea",
                        __plasmic_idx_0,
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "textArea[].value"
                        }
                      ],
                      [__plasmic_idx_0],
                      AntdTextArea_Helpers ?? {},
                      child$Props
                    );
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "textArea[].value",
                          initFunc: ({ $props, $state, $queries }) => undefined
                        }
                      ],
                      [__plasmic_idx_0]
                    );
                    return (
                      <AntdTextArea
                        data-plasmic-name={"textArea"}
                        data-plasmic-override={overrides.textArea}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__om62, {
                    [sty.buttonstage_sending__om629IxSj]: hasVariant(
                      $state,
                      "stage",
                      "sending"
                    ),
                    [sty.buttonstage_start__om62Lwq6Q]: hasVariant(
                      $state,
                      "stage",
                      "start"
                    )
                  })}
                  color={"green"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateAnswere"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["answere"]
                            },
                            operation: 0,
                            value: $state.textInput[0].value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateAnswere"] != null &&
                      typeof $steps["updateAnswere"] === "object" &&
                      typeof $steps["updateAnswere"].then === "function"
                    ) {
                      $steps["updateAnswere"] = await $steps["updateAnswere"];
                    }

                    $steps["updateStage"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["stage"]
                            },
                            operation: 0,
                            value: "start"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStage"] != null &&
                      typeof $steps["updateStage"] === "object" &&
                      typeof $steps["updateStage"].then === "function"
                    ) {
                      $steps["updateStage"] = await $steps["updateStage"];
                    }
                  }}
                >
                  {"\u0627\u0631\u0633\u0627\u0644"}
                </Button>
              </div>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form, {
                    [sty.formstage_sending]: hasVariant(
                      $state,
                      "stage",
                      "sending"
                    ),
                    [sty.formstage_start]: hasVariant($state, "stage", "start")
                  }),
                  extendedOnValuesChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form", __plasmic_idx_0, "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  formItems: undefined,
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: undefined,
                  onFinish: async values => {
                    const $steps = {};

                    $steps["updateAsignment2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["wall"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateAsignment2"] != null &&
                      typeof $steps["updateAsignment2"] === "object" &&
                      typeof $steps["updateAsignment2"].then === "function"
                    ) {
                      $steps["updateAsignment2"] = await $steps[
                        "updateAsignment2"
                      ];
                    }

                    $steps["httpPost"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "oFGo9etX3UbW3vpYoEjNm1",
                              opId: "9b8b3268-7951-49a0-b613-2f01ab5f5631",
                              userArgs: {
                                body: [
                                  $state.form[0].value.title,

                                  $state.form[0].value.desc,

                                  $state.form[0].value.link,

                                  currentItem.id,

                                  $props.answeres2.map(answer => answer.id)
                                ],

                                headers: [localStorage.getItem("token")]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            },
                            continueOnError: true
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["httpPost"] != null &&
                      typeof $steps["httpPost"] === "object" &&
                      typeof $steps["httpPost"].then === "function"
                    ) {
                      $steps["httpPost"] = await $steps["httpPost"];
                    }

                    $steps["oginasignment4"] = (() => {
                      $steps.httpPost;
                      return !(
                        $steps.httpPost.data.response.status == 401 ||
                        $steps.httpPost.data.response.status == 403 ||
                        $steps.httpPost.data.statusCode == 403
                      );
                    })()
                      ? (() => {
                          const actionArgs = { destination: `/login/[from]` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["oginasignment4"] != null &&
                      typeof $steps["oginasignment4"] === "object" &&
                      typeof $steps["oginasignment4"].then === "function"
                    ) {
                      $steps["oginasignment4"] = await $steps["oginasignment4"];
                    }

                    $steps["updateStage"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["stage"]
                            },
                            operation: 0,
                            value: "start"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStage"] != null &&
                      typeof $steps["updateStage"] === "object" &&
                      typeof $steps["updateStage"].then === "function"
                    ) {
                      $steps["updateStage"] = await $steps["updateStage"];
                    }

                    $steps["httpGet"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "oFGo9etX3UbW3vpYoEjNm1",
                              opId: "309d4c4e-c317-4882-b06b-178e546fa7e8",
                              userArgs: {
                                headers: [localStorage.getItem("token")],

                                params: [currentItem.id]
                              },
                              cacheKey: null,
                              invalidatedKeys: null,
                              roleId: null
                            },
                            continueOnError: true
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["httpGet"] != null &&
                      typeof $steps["httpGet"] === "object" &&
                      typeof $steps["httpGet"].then === "function"
                    ) {
                      $steps["httpGet"] = await $steps["httpGet"];
                    }

                    $steps["updateAsignment"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["asignment"]
                            },
                            operation: 0,
                            value: $steps.httpGet.data.response
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateAsignment"] != null &&
                      typeof $steps["updateAsignment"] === "object" &&
                      typeof $steps["updateAsignment"].then === "function"
                    ) {
                      $steps["updateAsignment"] = await $steps[
                        "updateAsignment"
                      ];
                    }

                    $steps["updateAsignment3"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["wall"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateAsignment3"] != null &&
                      typeof $steps["updateAsignment3"] === "object" &&
                      typeof $steps["updateAsignment3"].then === "function"
                    ) {
                      $steps["updateAsignment3"] = await $steps[
                        "updateAsignment3"
                      ];
                    }
                  },
                  onIsSubmittingChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form", __plasmic_idx_0, "isSubmitting"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  ref: ref => {
                    $refs["form"] = ref;
                  },
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form[].value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form[].isSubmitting"
                    }
                  ],
                  [__plasmic_idx_0],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__eOi2X
                      )}
                      label={"\u0639\u0646\u0648\u0627\u0646"}
                      name={"title"}
                    >
                      <AntdInput
                        className={classNames(
                          "__wab_instance",
                          sty.input__bioHd
                        )}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__nMpda
                      )}
                      label={"\u062a\u0648\u0636\u06cc\u062d\u0627\u062a"}
                      name={"desc"}
                      rules={[{ ruleType: "required" }]}
                    >
                      <AntdTextArea
                        className={classNames(
                          "__wab_instance",
                          sty.textArea__g5QYv
                        )}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__neeJf
                      )}
                      label={
                        "\u0644\u06cc\u0646\u06a9 (\u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632)"
                      }
                      name={"link"}
                    >
                      <AntdInput
                        className={classNames(
                          "__wab_instance",
                          sty.input__dBuxT
                        )}
                      />
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__hedt,
                        {
                          [sty.buttonstage_sending__hedt9IxSj]: hasVariant(
                            $state,
                            "stage",
                            "sending"
                          )
                        }
                      )}
                      submitsForm={true}
                      type={
                        hasVariant($state, "stage", "sending")
                          ? "primary"
                          : "primary"
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___34SYi,
                          {
                            [sty.textstage_sending___34SYi9IxSj]: hasVariant(
                              $state,
                              "stage",
                              "sending"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stage", "sending")
                          ? "\u0627\u0631\u0633\u0627\u0644"
                          : "Submit"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
            </div>
            {(
              hasVariant($state, "stage", "colapsed")
                ? true
                : hasVariant($state, "stage", "sending")
                ? true
                : hasVariant($state, "stage", "start")
                ? (() => {
                    try {
                      return $state.answere !== "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"sentCard"}
                data-plasmic-override={overrides.sentCard}
                className={classNames(projectcss.all, sty.sentCard, {
                  [sty.sentCardstage_colapsed]: hasVariant(
                    $state,
                    "stage",
                    "colapsed"
                  ),
                  [sty.sentCardstage_sending]: hasVariant(
                    $state,
                    "stage",
                    "sending"
                  ),
                  [sty.sentCardstage_start]: hasVariant(
                    $state,
                    "stage",
                    "start"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uM6E0
                  )}
                >
                  {"Enter some text"}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__d1Ktt, {
                    [sty.freeBoxstage_start__d1Kttlwq6Q]: hasVariant(
                      $state,
                      "stage",
                      "start"
                    )
                  })}
                >
                  {(
                    hasVariant($state, "stage", "start")
                      ? (() => {
                          try {
                            return $state.editing;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  )
                    ? (() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.textInput2,
                            {
                              [sty.textInput2stage_start]: hasVariant(
                                $state,
                                "stage",
                                "start"
                              )
                            }
                          ),
                          onChange: async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "textInput2",
                                __plasmic_idx_0,
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          placeholder: ``,
                          value:
                            generateStateValueProp($state, [
                              "textInput2",
                              __plasmic_idx_0,
                              "value"
                            ]) ?? ""
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "textInput2[].value",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return $state.answere;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <TextInput
                            data-plasmic-name={"textInput2"}
                            data-plasmic-override={overrides.textInput2}
                            {...child$Props}
                          />
                        );
                      })()
                    : null}
                  {(
                    hasVariant($state, "stage", "start")
                      ? (() => {
                          try {
                            return $state.editing;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__vUkj,
                        {
                          [sty.buttonstage_start__vUkjLwq6Q]: hasVariant(
                            $state,
                            "stage",
                            "start"
                          )
                        }
                      )}
                      color={"green"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateAnswere"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["answere"]
                                },
                                operation: 0,
                                value: $state.textInput2[0].value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateAnswere"] != null &&
                          typeof $steps["updateAnswere"] === "object" &&
                          typeof $steps["updateAnswere"].then === "function"
                        ) {
                          $steps["updateAnswere"] = await $steps[
                            "updateAnswere"
                          ];
                        }

                        $steps["updateEditing"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["editing"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateEditing"] != null &&
                          typeof $steps["updateEditing"] === "object" &&
                          typeof $steps["updateEditing"].then === "function"
                        ) {
                          $steps["updateEditing"] = await $steps[
                            "updateEditing"
                          ];
                        }
                      }}
                    />
                  ) : null}
                  {(
                    hasVariant($state, "stage", "start")
                      ? (() => {
                          try {
                            return !$state.editing;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lPmOy,
                        {
                          [sty.textstage_start__lPmOyLwq6Q]: hasVariant(
                            $state,
                            "stage",
                            "start"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.answere;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "stage", "start")
                      ? (() => {
                          try {
                            return !$state.editing;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___5MtdV,
                        {
                          [sty.buttonstage_start___5MtdVlwq6Q]: hasVariant(
                            $state,
                            "stage",
                            "start"
                          )
                        }
                      )}
                      color={"yellow"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateEditing"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["editing"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateEditing"] != null &&
                          typeof $steps["updateEditing"] === "object" &&
                          typeof $steps["updateEditing"].then === "function"
                        ) {
                          $steps["updateEditing"] = await $steps[
                            "updateEditing"
                          ];
                        }
                      }}
                    />
                  ) : null}
                </div>
              </div>
            ) : null}
            <IconIcon
              className={classNames(projectcss.all, sty.svg__dXcwl, {
                [sty.svgstage_colapsed__dXcwlbqMqK]: hasVariant(
                  $state,
                  "stage",
                  "colapsed"
                ),
                [sty.svgstage_start__dXcwlLwq6Q]: hasVariant(
                  $state,
                  "stage",
                  "start"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateStage"] =
                  $state.stage === "sending"
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["stage"]
                          },
                          operation: 0,
                          value: "start"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateStage"] != null &&
                  typeof $steps["updateStage"] === "object" &&
                  typeof $steps["updateStage"].then === "function"
                ) {
                  $steps["updateStage"] = await $steps["updateStage"];
                }

                $steps["updateStage2"] =
                  $state.stage === "edit"
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["stage"]
                          },
                          operation: 0,
                          value: "after"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateStage2"] != null &&
                  typeof $steps["updateStage2"] === "object" &&
                  typeof $steps["updateStage2"].then === "function"
                ) {
                  $steps["updateStage2"] = await $steps["updateStage2"];
                }
              }}
              role={"img"}
            />

            <CloseBoldSvgrepoComSvgIcon
              className={classNames(projectcss.all, sty.svg__njAxb, {
                [sty.svgstage_start__njAxblwq6Q]: hasVariant(
                  $state,
                  "stage",
                  "start"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateStage"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "stage",
                        operation: 0,
                        value: "colapsed"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStage"] != null &&
                  typeof $steps["updateStage"] === "object" &&
                  typeof $steps["updateStage"].then === "function"
                ) {
                  $steps["updateStage"] = await $steps["updateStage"];
                }
              }}
              role={"img"}
            />
          </div>
        );
      })}
      {(() => {
        try {
          return $state.wall;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__u7NpC, {
            [sty.freeBoxstage_sending__u7NpC9IxSj]: hasVariant(
              $state,
              "stage",
              "sending"
            )
          })}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "link",
    "answereToAsignment",
    "checkbox",
    "sendingForm",
    "textInput",
    "textArea",
    "form",
    "sentCard",
    "textInput2"
  ],
  link: ["link"],
  answereToAsignment: ["answereToAsignment"],
  checkbox: ["checkbox"],
  sendingForm: ["sendingForm", "textInput", "textArea", "form"],
  textInput: ["textInput"],
  textArea: ["textArea"],
  form: ["form"],
  sentCard: ["sentCard", "textInput2"],
  textInput2: ["textInput2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  answereToAsignment: typeof AnswereToAsignment;
  checkbox: typeof Checkbox;
  sendingForm: "div";
  textInput: typeof TextInput;
  textArea: typeof AntdTextArea;
  form: typeof FormWrapper;
  sentCard: "div";
  textInput2: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAsignmentComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAsignmentComponent__VariantsArgs;
    args?: PlasmicAsignmentComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAsignmentComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAsignmentComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAsignmentComponent__ArgProps,
          internalVariantPropNames: PlasmicAsignmentComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAsignmentComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAsignmentComponent";
  } else {
    func.displayName = `PlasmicAsignmentComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicAsignmentComponent = Object.assign(
  // Top-level PlasmicAsignmentComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    answereToAsignment: makeNodeComponent("answereToAsignment"),
    checkbox: makeNodeComponent("checkbox"),
    sendingForm: makeNodeComponent("sendingForm"),
    textInput: makeNodeComponent("textInput"),
    textArea: makeNodeComponent("textArea"),
    form: makeNodeComponent("form"),
    sentCard: makeNodeComponent("sentCard"),
    textInput2: makeNodeComponent("textInput2"),

    // Metadata about props expected for PlasmicAsignmentComponent
    internalVariantProps: PlasmicAsignmentComponent__VariantProps,
    internalArgProps: PlasmicAsignmentComponent__ArgProps
  }
);

export default PlasmicAsignmentComponent;
/* prettier-ignore-end */
