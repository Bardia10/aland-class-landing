/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: 8xToqxWNlbq1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: _MWZyCmj9Poj/component
import TextInput from "../../TextInput"; // plasmic-import: WXGFD0JrVuY6/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicProfileSetting.module.css"; // plasmic-import: 8xToqxWNlbq1/css

import EditSvgrepoComSvgIcon from "./icons/PlasmicIcon__EditSvgrepoComSvg"; // plasmic-import: 1MC-27rquP4O/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 2D7jq9Mtq-9Z/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: 7hHqYtt8cnP_/icon

createPlasmicElementProxy;

export type PlasmicProfileSetting__VariantMembers = {};
export type PlasmicProfileSetting__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfileSetting__VariantsArgs;
export const PlasmicProfileSetting__VariantProps = new Array<VariantPropType>();

export type PlasmicProfileSetting__ArgsType = {
  onProfileInfoChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicProfileSetting__ArgsType;
export const PlasmicProfileSetting__ArgProps = new Array<ArgPropType>(
  "onProfileInfoChange"
);

export type PlasmicProfileSetting__OverridesType = {
  root?: Flex__<"div">;
  name2?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  ssn?: Flex__<"div">;
  textInput2?: Flex__<typeof TextInput>;
  bday?: Flex__<"div">;
  textInput3?: Flex__<typeof TextInput>;
};

export interface DefaultProfileSettingProps {
  onProfileInfoChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfileSetting__RenderFunc(props: {
  variants: PlasmicProfileSetting__VariantsArgs;
  args: PlasmicProfileSetting__ArgsType;
  overrides: PlasmicProfileSetting__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editing",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "profileInfo",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                name: "esme user",
                ssn: 42442719,
                bday: "1386-11-19"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })(),

        onChangeProp: "onProfileInfoChange"
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"name2"}
        data-plasmic-override={overrides.name2}
        className={classNames(projectcss.all, sty.name2)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___4TkV8)}>
          {(() => {
            try {
              return $state.editing !== "name";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox___0KcrF)}>
              <EditSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__k41F)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateEditing"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["editing"]
                          },
                          operation: 0,
                          value: "name"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateEditing"] != null &&
                    typeof $steps["updateEditing"] === "object" &&
                    typeof $steps["updateEditing"].then === "function"
                  ) {
                    $steps["updateEditing"] = await $steps["updateEditing"];
                  }
                }}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ivI88
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.profileInfo.name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aoEeh
                )}
              >
                {"\u0646\u0627\u0645"}
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return $state.editing == "name";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__bt4Hv)}>
              <Button
                className={classNames("__wab_instance", sty.button__hh0Jt)}
                color={"green"}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateProfileInfoName"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["profileInfo", "name"]
                          },
                          operation: 0,
                          value: $state.textInput.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateProfileInfoName"] != null &&
                    typeof $steps["updateProfileInfoName"] === "object" &&
                    typeof $steps["updateProfileInfoName"].then === "function"
                  ) {
                    $steps["updateProfileInfoName"] = await $steps[
                      "updateProfileInfoName"
                    ];
                  }

                  $steps["updateEditing"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["editing"]
                          },
                          operation: 0,
                          value: ""
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateEditing"] != null &&
                    typeof $steps["updateEditing"] === "object" &&
                    typeof $steps["updateEditing"].then === "function"
                  ) {
                    $steps["updateEditing"] = await $steps["updateEditing"];
                  }
                }}
              />

              <TextInput
                data-plasmic-name={"textInput"}
                data-plasmic-override={overrides.textInput}
                className={classNames("__wab_instance", sty.textInput)}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["textInput", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                value={
                  generateStateValueProp($state, ["textInput", "value"]) ?? ""
                }
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eoze8
                )}
              >
                {"\u0646\u0627\u0645"}
              </div>
            </div>
          ) : null}
        </div>
      </div>
      <div
        data-plasmic-name={"ssn"}
        data-plasmic-override={overrides.ssn}
        className={classNames(projectcss.all, sty.ssn)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__ry0Vr)}>
          {(() => {
            try {
              return $state.editing !== "ssn";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__ge1Et)}>
              <EditSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__ohhws)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateEditing"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["editing"]
                          },
                          operation: 0,
                          value: "ssn"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateEditing"] != null &&
                    typeof $steps["updateEditing"] === "object" &&
                    typeof $steps["updateEditing"].then === "function"
                  ) {
                    $steps["updateEditing"] = await $steps["updateEditing"];
                  }
                }}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ce6W
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.profileInfo.ssn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ngsFb
                )}
              >
                {"\u06af\u062f \u0645\u0644\u06cc"}
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return $state.editing == "ssn";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__fUdO)}>
              <Button
                className={classNames("__wab_instance", sty.button__yYpeR)}
                color={"green"}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateProfileInfoSsn"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["profileInfo", "ssn"]
                          },
                          operation: 0,
                          value: $state.textInput2.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateProfileInfoSsn"] != null &&
                    typeof $steps["updateProfileInfoSsn"] === "object" &&
                    typeof $steps["updateProfileInfoSsn"].then === "function"
                  ) {
                    $steps["updateProfileInfoSsn"] = await $steps[
                      "updateProfileInfoSsn"
                    ];
                  }

                  $steps["updateEditing"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["editing"]
                          },
                          operation: 0,
                          value: ""
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateEditing"] != null &&
                    typeof $steps["updateEditing"] === "object" &&
                    typeof $steps["updateEditing"].then === "function"
                  ) {
                    $steps["updateEditing"] = await $steps["updateEditing"];
                  }
                }}
              />

              <TextInput
                data-plasmic-name={"textInput2"}
                data-plasmic-override={overrides.textInput2}
                className={classNames("__wab_instance", sty.textInput2)}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["textInput2", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                value={
                  generateStateValueProp($state, ["textInput2", "value"]) ?? ""
                }
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4IEWp
                )}
              >
                {"\u06a9\u062f \u0645\u0644\u06cc"}
              </div>
            </div>
          ) : null}
        </div>
      </div>
      <div
        data-plasmic-name={"bday"}
        data-plasmic-override={overrides.bday}
        className={classNames(projectcss.all, sty.bday)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__jgfHw)}>
          {(() => {
            try {
              return $state.editing !== "bday";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__cuUuk)}>
              <EditSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__p3T3R)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateEditing"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["editing"]
                          },
                          operation: 0,
                          value: "bday"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateEditing"] != null &&
                    typeof $steps["updateEditing"] === "object" &&
                    typeof $steps["updateEditing"].then === "function"
                  ) {
                    $steps["updateEditing"] = await $steps["updateEditing"];
                  }
                }}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__thKdn
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.profileInfo.bday;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iobh9
                )}
              >
                {"\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"}
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return $state.editing == "bday";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__dMxzZ)}>
              <Button
                className={classNames("__wab_instance", sty.button__bVMfk)}
                color={"green"}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateProfileInfoBday"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["profileInfo", "bday"]
                          },
                          operation: 0,
                          value: $state.textInput3.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateProfileInfoBday"] != null &&
                    typeof $steps["updateProfileInfoBday"] === "object" &&
                    typeof $steps["updateProfileInfoBday"].then === "function"
                  ) {
                    $steps["updateProfileInfoBday"] = await $steps[
                      "updateProfileInfoBday"
                    ];
                  }

                  $steps["updateEditing"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["editing"]
                          },
                          operation: 0,
                          value: ""
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateEditing"] != null &&
                    typeof $steps["updateEditing"] === "object" &&
                    typeof $steps["updateEditing"].then === "function"
                  ) {
                    $steps["updateEditing"] = await $steps["updateEditing"];
                  }
                }}
              />

              <TextInput
                data-plasmic-name={"textInput3"}
                data-plasmic-override={overrides.textInput3}
                className={classNames("__wab_instance", sty.textInput3)}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["textInput3", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                value={
                  generateStateValueProp($state, ["textInput3", "value"]) ?? ""
                }
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vf9OD
                )}
              >
                {"\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"}
              </div>
            </div>
          ) : null}
        </div>
      </div>
      {(() => {
        try {
          return $state.editing !== "";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__dalYj)}
          onClick={async event => {
            const $steps = {};

            $steps["updateEditing"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["editing"]
                    },
                    operation: 0,
                    value: ""
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateEditing"] != null &&
              typeof $steps["updateEditing"] === "object" &&
              typeof $steps["updateEditing"].then === "function"
            ) {
              $steps["updateEditing"] = await $steps["updateEditing"];
            }
          }}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "name2",
    "textInput",
    "ssn",
    "textInput2",
    "bday",
    "textInput3"
  ],
  name2: ["name2", "textInput"],
  textInput: ["textInput"],
  ssn: ["ssn", "textInput2"],
  textInput2: ["textInput2"],
  bday: ["bday", "textInput3"],
  textInput3: ["textInput3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  name2: "div";
  textInput: typeof TextInput;
  ssn: "div";
  textInput2: typeof TextInput;
  bday: "div";
  textInput3: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfileSetting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfileSetting__VariantsArgs;
    args?: PlasmicProfileSetting__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfileSetting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfileSetting__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfileSetting__ArgProps,
          internalVariantPropNames: PlasmicProfileSetting__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfileSetting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfileSetting";
  } else {
    func.displayName = `PlasmicProfileSetting.${nodeName}`;
  }
  return func;
}

export const PlasmicProfileSetting = Object.assign(
  // Top-level PlasmicProfileSetting renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    name2: makeNodeComponent("name2"),
    textInput: makeNodeComponent("textInput"),
    ssn: makeNodeComponent("ssn"),
    textInput2: makeNodeComponent("textInput2"),
    bday: makeNodeComponent("bday"),
    textInput3: makeNodeComponent("textInput3"),

    // Metadata about props expected for PlasmicProfileSetting
    internalVariantProps: PlasmicProfileSetting__VariantProps,
    internalArgProps: PlasmicProfileSetting__ArgProps
  }
);

export default PlasmicProfileSetting;
/* prettier-ignore-end */
