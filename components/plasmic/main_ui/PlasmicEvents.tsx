/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: sZSNi3fqiUe_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import HeaderLanding from "../../HeaderLanding"; // plasmic-import: ITWOroSFH7VT/component
import HumbergerMenu from "../../HumbergerMenu"; // plasmic-import: 1LzZIhJKqT7B/component
import Footer from "../../Footer"; // plasmic-import: LLPl5wc7oCu-/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicEvents.module.css"; // plasmic-import: sZSNi3fqiUe_/css

createPlasmicElementProxy;

export type PlasmicEvents__VariantMembers = {};
export type PlasmicEvents__VariantsArgs = {};
type VariantPropType = keyof PlasmicEvents__VariantsArgs;
export const PlasmicEvents__VariantProps = new Array<VariantPropType>();

export type PlasmicEvents__ArgsType = {};
type ArgPropType = keyof PlasmicEvents__ArgsType;
export const PlasmicEvents__ArgProps = new Array<ArgPropType>();

export type PlasmicEvents__OverridesType = {
  root?: Flex__<"div">;
  headerLanding?: Flex__<typeof HeaderLanding>;
  humbergerMenu?: Flex__<typeof HumbergerMenu>;
  img?: Flex__<typeof PlasmicImg__>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultEventsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEvents__RenderFunc(props: {
  variants: PlasmicEvents__VariantsArgs;
  args: PlasmicEvents__ArgsType;
  overrides: PlasmicEvents__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "events",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                {
                  title: "دوست علمی",
                  date: "1396/08/11",
                  desc: "\u200fطرح دوست علمی سلول‌های بنیادی به همت گروه المپیاد ایلام برای دانش‌آموزان مستعد برگزار شد و شامل مباحث تخصصی زیست‌شناسی، روش‌های نوین درمانی و کاربردهای سلول‌های بنیادی بود.",
                  fulldesc:
                    "\u200fتیم آلند (المپیاد ایلام) ایلام با هدف پاسخگویی به نیازهای صاحبان استعدادهای‌ برتر در ابعاد علمی و معنوی، مرحله مقدماتی طرح دوست علمی سلول‌های بنیادی را برگزار کرد. مرحله مقدماتی این طرح به همت بنیاد نخبگان استان ایلام و با همکاری اداره‌کل آموزش‌وپرورش استان در راستای پاسخگویی به نیازهای دانش‌آموزان مستعد‌برتر در ابعاد علمی و معنوی و ارضای روح جستجوگر و ذهن خلاق و نقاد آنان در روزهای یازدهم و دوازدهم آبان ماه در محل دبیرستان فرزانگان برگزار گردید. \n\nدر این طرح که با حضور دانش‌آموزان دختر پایه‌های اول و دوم مقطع متوسطه دوم برگزار شد، مباحث علمی تخصصی گیاه‌شناسی، سلولی - مولکولی، فیزیولوژی زیستی و سلول‌های بنیادی ارائه شد. در این دوره دانش‌آموزان با برخی از جدیدترین روش‌های درمان بیماری‌های قلبی عروقی، کلیوی، کبدی با استفاده از روش‌های نوین داربست‌های طبیعی در درمان این بیماری‌ها، همچنین استفاده از برخی زباله‌های زیستی نظیر پرده جنینی و پری‌کارد قلب برای ساخت این داربست‌های زیستی آشنا شدند. \n\nتشریح روش‌های درمان بیماری‌های ژنتیکی و لاعلاج، روش هدفمندسازی داروها با استفاده از ژن‌ها، استفاده از تراشه‌های الکترونیکی، بهره‌گیری از بدن حیوانات به عنوان یک بستر جایگزین انسانی برای کشف روش‌های درمانی و استفاده از نانوذرات برای دانش‌آموزان از دیگر بخش‌های این طرح بود. \n\nاز مهم‌ترین اهداف طرح دوست علمی استان ایلام می‌توان به ایجاد تعامل علمی و فرهنگی بین دانش‌آموزان مناطق مختلف و تشکیل حلقه‌های دوستان علمی، ایجاد انگیزه و تمرین برای انجام کارهای گروهی، تقویت انگیزه دانش‌آموزان مستعد به کسب موفقیت‌های علمی اشاره کرد. ارتقای سطح تفکر دانش‌آموزان و ترغیب آنان به ارائه ایده‌های خلاقانه، ایجاد بستر مناسب برای ارتقای سطح علمی-فرهنگی محیط‌های آموزشی دانش‌آموزان، خصوصاً در مناطق کم‌برخوردار، و همچنین آشنایی با نخبگان و صاحبان استعدادهای‌ برتر مورد حمایت بنیاد ملی نخبگان، از دیگر اهداف برگزاری این طرح است. \n\nدر این برنامه یک جلسه به موضوع خلاقیت و کارآفرینی به‌منظور آشنایی دانش‌آموزان مستعد استان با زمینه‌های کاربردی زیست‌شناسی و سلول‌های بنیادی اختصاص یافت.",
                  image:
                    "https://i.postimg.cc/RVVK6V6z/ezgif-882cfc47672ef0.jpg"
                },

                {
                  title: "جشن مدال سال 1397",
                  date: "",
                  desc: "\u200fمراسم تجلیل از دانش‌آموزان مدال‌آور ایلامی در المپیادهای علمی کشور با حضور مدیرکل آموزش و پرورش، تیم المپیاد ایلام و دکتر میثم ملکی، مدیر المپیاد استان، برگزار شد. در این مراسم، ضمن تأکید بر اهمیت المپیادهای علمی و موفقیت‌های استان، از برگزیدگان رشته‌های ریاضی، شیمی و سلول‌های بنیادی تقدیر به عمل آمد.",
                  fulldesc:
                    "\u200fمراسم تجلیل از دانش‌آموزان ایلامی حائز مدال‌های نقره و برنز المپیادهای علمی کشور با حضور مدیرکل آموزش و پرورش، فرهنگیان، تیم المپیاد ایلام و دکتر میثم ملکی، مدیر المپیاد استان، در سالن اجتماعات امور تربیتی برگزار شد.  \n\nدر این مراسم که جمعی از دانش‌آموزان و اولیاء آنان نیز حضور داشتند، اسفندیار رستم‌زاد، مدیرکل آموزش و پرورش استان، پیرامون اهمیت دانش و دانایی و نقش آموزش و پرورش در توسعه کشور سخنرانی کرد. وی همچنین به مزایای المپیادهای علمی و تاریخچه شکل‌گیری آن در دنیا اشاره نمود.  \n\nسپس فردین بساطی، رئیس اداره استعدادهای درخشان استان، درباره تاریخچه المپیاد در ایلام، نحوه شکل‌گیری آن و نتایج حاصله طی چهار سال گذشته توضیحاتی ارائه داد. وی با ذکر آمار و ارقام، روند رو به رشد و موفقیت‌های حاصل‌شده در این حوزه را تشریح کرد.  \n\nبساطی در ادامه نتایج ۳۲ استان را در سه رشته ریاضی، شیمی و سلول‌های بنیادی تحلیل کرد و جایگاه مناسب استان ایلام را یک موفقیت بزرگ و تاریخی دانست. او از زحمات تمامی افراد و نهادهایی که در این مسیر کمک کرده‌اند، از جمله بنیاد نخبگان استان ایلام، مدیران و عوامل آموزشی مراکز تیزهوشان، تیم المپیاد ایلام و به‌ویژه دکتر میثم ملکی، مدیر المپیاد استان، تقدیر و تشکر کرد.  \n\nدر پایان از دانش‌آموزان فرنوش فرشچیان (برنده مدال برنز شیمی از مرکز فرزانگان)، پانیذ قاسمی (برنده مدال نقره المپیاد سلول‌های بنیادی از مرکز فرزانگان) و محمد چراغی (برنده مدال نقره ریاضی از مرکز شهید بهشتی) تجلیل به عمل آمد.",
                  image:
                    "https://didehbanelmiran.ir/wp-content/uploads/2019/02/olympiad-Copy-2-e1551005267417.jpg"
                },

                {
                  title: "سلول‌های بنیادی برای همه",
                  date: "2023-06-30",
                  desc: "\u200fدر همایش المپیادهای علمی، دکتر بهاروند، پدر علم سلول‌های بنیادی و رئیس پژوهشگاه رویان، با دانش‌آموزان المپیادی به گفت‌وگو نشست. این جلسات شامل تبادل نظر درباره آخرین دستاوردهای علمی، تحقیقات سلول‌های بنیادی و آینده علوم زیستی بود. در کنار این برنامه، دوره بین‌رشته‌ای و هوش مصنوعی نیز برگزار شد که فرصتی برای آشنایی دانش‌آموزان با کاربردهای فناوری در علوم زیستی فراهم کرد.",
                  fulldesc:
                    "\u200fدر جریان همایش المپیادهای علمی، دکتر حسین بهاروند، پدر علم سلول‌های بنیادی ایران و رئیس پژوهشگاه رویان، به همراه تیمی از پژوهشگران برجسته، با دانش‌آموزان المپیادی دیدار و گفت‌وگو کرد. در این جلسات، موضوعاتی همچون آخرین پیشرفت‌های علم سلول‌های بنیادی، نقش فناوری‌های نوین در توسعه پزشکی بازساختی و مسیرهای پژوهشی آینده مورد بررسی قرار گرفت. دانش‌آموزان فرصت یافتند تا سؤالات خود را مستقیماً با یکی از چهره‌های برجسته علمی کشور مطرح کرده و از تجربیات او بهره‌مند شوند.\n\nعلاوه بر این، در حاشیه این همایش، یک دوره بین‌رشته‌ای و تخصصی در حوزه هوش مصنوعی برگزار شد که به بررسی کاربردهای هوش مصنوعی در علوم زیستی و پزشکی اختصاص داشت. این دوره فرصتی بی‌نظیر برای دانش‌آموزان ایجاد کرد تا با مفاهیم پیشرفته این حوزه آشنا شوند و ارتباط میان علوم زیستی و فناوری‌های نوین را بهتر درک کنند.\n\nاین رویداد علمی، با مشارکت پژوهشگران، دانش‌آموزان و اساتید برجسته، نقش مهمی در توسعه علمی و افزایش انگیزه دانش‌آموزان برای فعالیت‌های پژوهشی ایفا کرد.",
                  image:
                    "https://media.imna.ir/d/2022/12/13/3/1831927.jpg?ts=1670908119000"
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            sty.root
          )}
          dir={"rtl"}
        >
          <HeaderLanding
            data-plasmic-name={"headerLanding"}
            data-plasmic-override={overrides.headerLanding}
            className={classNames("__wab_instance", sty.headerLanding)}
          />

          <HumbergerMenu
            data-plasmic-name={"humbergerMenu"}
            data-plasmic-override={overrides.humbergerMenu}
            className={classNames("__wab_instance", sty.humbergerMenu)}
          />

          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.events[parseInt($ctx.pagePath.split("/").pop())];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__mcLoG)}
                key={currentIndex}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___3CmxB)}
                >
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "300px"
                        : "400px"
                    }
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return currentItem.image;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return {
                            src: "/plasmic/main_ui/images/img8620Jpg.jpg",
                            fullWidth: 3456,
                            fullHeight: 2304,
                            aspectRatio: undefined
                          };
                        }
                        throw e;
                      }
                    })()}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__n4LDb)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Lq7N
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2NvIv
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lkYJc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dZldn
                          )}
                        >
                          {
                            "\u062a\u0627\u0631\u06cc\u062e \u0628\u0631\u06af\u0632\u0627\u0631\u06cc "
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eVe96
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.date;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2Cuvi
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.desc;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yxJm
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.fulldesc;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            );
          })}
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "headerLanding", "humbergerMenu", "img", "footer"],
  headerLanding: ["headerLanding"],
  humbergerMenu: ["humbergerMenu"],
  img: ["img"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLanding: typeof HeaderLanding;
  humbergerMenu: typeof HumbergerMenu;
  img: typeof PlasmicImg__;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEvents__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEvents__VariantsArgs;
    args?: PlasmicEvents__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEvents__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEvents__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEvents__ArgProps,
          internalVariantPropNames: PlasmicEvents__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEvents__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEvents";
  } else {
    func.displayName = `PlasmicEvents.${nodeName}`;
  }
  return func;
}

export const PlasmicEvents = Object.assign(
  // Top-level PlasmicEvents renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerLanding: makeNodeComponent("headerLanding"),
    humbergerMenu: makeNodeComponent("humbergerMenu"),
    img: makeNodeComponent("img"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicEvents
    internalVariantProps: PlasmicEvents__VariantProps,
    internalArgProps: PlasmicEvents__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEvents;
/* prettier-ignore-end */
