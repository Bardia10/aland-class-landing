/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: 1LzZIhJKqT7B

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Button from "../../Button"; // plasmic-import: _MWZyCmj9Poj/component
import Tilt from "@plasmicpkgs/react-parallax-tilt";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicHumbergerMenu.module.css"; // plasmic-import: 1LzZIhJKqT7B/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 2D7jq9Mtq-9Z/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: eFpQ8H1LttJF/icon

createPlasmicElementProxy;

export type PlasmicHumbergerMenu__VariantMembers = {};
export type PlasmicHumbergerMenu__VariantsArgs = {};
type VariantPropType = keyof PlasmicHumbergerMenu__VariantsArgs;
export const PlasmicHumbergerMenu__VariantProps = new Array<VariantPropType>();

export type PlasmicHumbergerMenu__ArgsType = {};
type ArgPropType = keyof PlasmicHumbergerMenu__ArgsType;
export const PlasmicHumbergerMenu__ArgProps = new Array<ArgPropType>();

export type PlasmicHumbergerMenu__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  button?: Flex__<typeof Button>;
  tilt?: Flex__<typeof Tilt>;
  خانه?: Flex__<"a"> & Partial<LinkProps>;
  ورود?: Flex__<"a"> & Partial<LinkProps>;
  داستانما?: Flex__<"a"> & Partial<LinkProps>;
  رویدادها?: Flex__<"a"> & Partial<LinkProps>;
  افتخارات?: Flex__<"a"> & Partial<LinkProps>;
  تماسباما?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultHumbergerMenuProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHumbergerMenu__RenderFunc(props: {
  variants: PlasmicHumbergerMenu__VariantsArgs;
  args: PlasmicHumbergerMenu__ArgsType;
  overrides: PlasmicHumbergerMenu__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root
      )}
    >
      <NavigationBar
        data-plasmic-name={"navigationBar"}
        data-plasmic-override={overrides.navigationBar}
        brand={
          <div className={classNames(projectcss.all, sty.freeBox__hcLes)}>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__ezTxT
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__jjUC)}
                displayHeight={"60px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"60px"}
                src={{
                  src: "/plasmic/main_ui/images/untitledDesignSvg2.svg",
                  fullWidth: 375,
                  fullHeight: 375,
                  aspectRatio: 1
                }}
              />
            </PlasmicLink__>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={"green"}
              shape={undefined}
            >
              <Tilt
                data-plasmic-name={"tilt"}
                data-plasmic-override={overrides.tilt}
                className={classNames("__wab_instance", sty.tilt)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__v44Nj
                  )}
                >
                  {"\u0648\u0631\u0648\u062f"}
                </div>
              </Tilt>
            </Button>
          </div>
        }
        className={classNames("__wab_instance", sty.navigationBar)}
        closeButton={
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__thcnB)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            src={"https://static1.plasmic.app/close.svg"}
          />
        }
        forceOpenMenu={
          hasVariant(globalVariants, "screen", "mobileOnly") ? true : undefined
        }
        itemsGap={hasVariant(globalVariants, "screen", "mobileOnly") ? 0 : 8}
        menuItems={
          <React.Fragment>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__o6Mtl
              )}
              component={Link}
              href={"/"}
              platform={"nextjs"}
            >
              {"\u062e\u0627\u0646\u0647"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___7DVu1
              )}
              component={Link}
              href={"/"}
              platform={"nextjs"}
            >
              {"\u0622\u0645\u0648\u0632\u0634\u200c\u0647\u0627"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__fmXT
              )}
              component={Link}
              href={"/"}
              platform={"nextjs"}
            >
              {"\u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0627"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__dGUwm
              )}
              component={Link}
              href={"/"}
              platform={"nextjs"}
            >
              {"\u062a\u0645\u0627\u0633 \u0628\u0627 \u0645\u0627"}
            </PlasmicLink__>
            <div className={classNames(projectcss.all, sty.freeBox__x2Ic9)}>
              <PlasmicLink__
                data-plasmic-name={"\u062e\u0627\u0646\u0647"}
                data-plasmic-override={overrides.خانه}
                className={classNames(projectcss.all, projectcss.a, sty.خانه)}
                component={Link}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHomepage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHomepage"] != null &&
                    typeof $steps["goToHomepage"] === "object" &&
                    typeof $steps["goToHomepage"].then === "function"
                  ) {
                    $steps["goToHomepage"] = await $steps["goToHomepage"];
                  }
                }}
                platform={"nextjs"}
              >
                {false ? (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__uug8)}
                    role={"img"}
                  />
                ) : null}
                {false ? (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__nl64N)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__u0GqU
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u062e\u0627\u0646\u0647"
                    : "\u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0627"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                data-plasmic-name={"\u0648\u0631\u0648\u062f"}
                data-plasmic-override={overrides.ورود}
                className={classNames(projectcss.all, projectcss.a, sty.ورود)}
                component={Link}
                href={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "https://panel.alandclass.com/"
                    : undefined
                }
                onClick={async event => {
                  const $steps = {};
                }}
                platform={"nextjs"}
                target={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "_blank"
                    : undefined
                }
              >
                {false ? (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__gLqth)}
                    role={"img"}
                  />
                ) : null}
                {false ? (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg___8Rakk)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6Ua05
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u0648\u0631\u0648\u062f"
                    : "\u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0627"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                data-plasmic-name={
                  "\u062f\u0627\u0633\u062a\u0627\u0646\u0645\u0627"
                }
                data-plasmic-override={overrides.داستانما}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.داستانما
                )}
                component={Link}
                href={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? `/about-us`
                    : undefined
                }
                platform={"nextjs"}
              >
                {false ? (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg___4XO07)}
                    role={"img"}
                  />
                ) : null}
                {false ? (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__ynV2P)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hwPn
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u062f\u0627\u0633\u062a\u0627\u0646 \u0645\u0627"
                    : "\u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0627"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                data-plasmic-name={
                  "\u0631\u0648\u06cc\u062f\u0627\u062f\u0647\u0627"
                }
                data-plasmic-override={overrides.رویدادها}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.رویدادها
                )}
                component={Link}
                href={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? `/events/${""}`
                    : undefined
                }
                platform={"nextjs"}
              >
                {false ? (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__qxgFf)}
                    role={"img"}
                  />
                ) : null}
                {false ? (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__g0TvN)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__idw8
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u0631\u0648\u06cc\u062f\u0627\u062f\u0647\u0627"
                    : "\u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0627"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                data-plasmic-name={
                  "\u0627\u0641\u062a\u062e\u0627\u0631\u0627\u062a"
                }
                data-plasmic-override={overrides.افتخارات}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.افتخارات
                )}
                component={Link}
                href={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? `/medallists`
                    : undefined
                }
                platform={"nextjs"}
              >
                {false ? (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__eIzcl)}
                    role={"img"}
                  />
                ) : null}
                {false ? (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__qbDe6)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rAtvk
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u0627\u0641\u062a\u062e\u0627\u0631\u0627\u062a"
                    : "\u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0627"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                data-plasmic-name={
                  "\u062a\u0645\u0627\u0633\u0628\u0627\u0645\u0627"
                }
                data-plasmic-override={overrides.تماسباما}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.تماسباما
                )}
                component={Link}
                href={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? `/contact`
                    : undefined
                }
                platform={"nextjs"}
              >
                {false ? (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__ldAzu)}
                    role={"img"}
                  />
                ) : null}
                {false ? (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__h4DC)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6QShv
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u062a\u0645\u0627\u0633 \u0628\u0627 \u0645\u0627"
                    : "\u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0627"}
                </div>
              </PlasmicLink__>
            </div>
          </React.Fragment>
        }
        openButton={
          <div className={classNames(projectcss.all, sty.freeBox__chzZp)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___0M8Zm)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              src={"https://static1.plasmic.app/menu.svg"}
              width={"30"}
            />
          </div>
        }
        responsiveBreakpoint={768}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "button",
    "tilt",
    "\u062e\u0627\u0646\u0647",
    "\u0648\u0631\u0648\u062f",
    "\u062f\u0627\u0633\u062a\u0627\u0646\u0645\u0627",
    "\u0631\u0648\u06cc\u062f\u0627\u062f\u0647\u0627",
    "\u0627\u0641\u062a\u062e\u0627\u0631\u0627\u062a",
    "\u062a\u0645\u0627\u0633\u0628\u0627\u0645\u0627"
  ],
  navigationBar: [
    "navigationBar",
    "button",
    "tilt",
    "\u062e\u0627\u0646\u0647",
    "\u0648\u0631\u0648\u062f",
    "\u062f\u0627\u0633\u062a\u0627\u0646\u0645\u0627",
    "\u0631\u0648\u06cc\u062f\u0627\u062f\u0647\u0627",
    "\u0627\u0641\u062a\u062e\u0627\u0631\u0627\u062a",
    "\u062a\u0645\u0627\u0633\u0628\u0627\u0645\u0627"
  ],
  button: ["button", "tilt"],
  tilt: ["tilt"],
  خانه: ["\u062e\u0627\u0646\u0647"],
  ورود: ["\u0648\u0631\u0648\u062f"],
  داستانما: ["\u062f\u0627\u0633\u062a\u0627\u0646\u0645\u0627"],
  رویدادها: ["\u0631\u0648\u06cc\u062f\u0627\u062f\u0647\u0627"],
  افتخارات: ["\u0627\u0641\u062a\u062e\u0627\u0631\u0627\u062a"],
  تماسباما: ["\u062a\u0645\u0627\u0633\u0628\u0627\u0645\u0627"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  button: typeof Button;
  tilt: typeof Tilt;
  خانه: "a";
  ورود: "a";
  داستانما: "a";
  رویدادها: "a";
  افتخارات: "a";
  تماسباما: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHumbergerMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHumbergerMenu__VariantsArgs;
    args?: PlasmicHumbergerMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHumbergerMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHumbergerMenu__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHumbergerMenu__ArgProps,
          internalVariantPropNames: PlasmicHumbergerMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHumbergerMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHumbergerMenu";
  } else {
    func.displayName = `PlasmicHumbergerMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicHumbergerMenu = Object.assign(
  // Top-level PlasmicHumbergerMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    button: makeNodeComponent("button"),
    tilt: makeNodeComponent("tilt"),
    خانه: makeNodeComponent("\u062e\u0627\u0646\u0647"),
    ورود: makeNodeComponent("\u0648\u0631\u0648\u062f"),
    داستانما: makeNodeComponent(
      "\u062f\u0627\u0633\u062a\u0627\u0646\u0645\u0627"
    ),
    رویدادها: makeNodeComponent(
      "\u0631\u0648\u06cc\u062f\u0627\u062f\u0647\u0627"
    ),
    افتخارات: makeNodeComponent(
      "\u0627\u0641\u062a\u062e\u0627\u0631\u0627\u062a"
    ),
    تماسباما: makeNodeComponent(
      "\u062a\u0645\u0627\u0633\u0628\u0627\u0645\u0627"
    ),

    // Metadata about props expected for PlasmicHumbergerMenu
    internalVariantProps: PlasmicHumbergerMenu__VariantProps,
    internalArgProps: PlasmicHumbergerMenu__ArgProps
  }
);

export default PlasmicHumbergerMenu;
/* prettier-ignore-end */
