/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: xjB-u-wyg1N3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: _MWZyCmj9Poj/component
import TextInput from "../../TextInput"; // plasmic-import: WXGFD0JrVuY6/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicTextInput2.module.css"; // plasmic-import: xjB-u-wyg1N3/css

import EditSvgrepoComSvgIcon from "./icons/PlasmicIcon__EditSvgrepoComSvg"; // plasmic-import: 1MC-27rquP4O/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 2D7jq9Mtq-9Z/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: 7hHqYtt8cnP_/icon

createPlasmicElementProxy;

export type PlasmicTextInput2__VariantMembers = {
  editing: "editing";
};
export type PlasmicTextInput2__VariantsArgs = {
  editing?: SingleBooleanChoiceArg<"editing">;
};
type VariantPropType = keyof PlasmicTextInput2__VariantsArgs;
export const PlasmicTextInput2__VariantProps = new Array<VariantPropType>(
  "editing"
);

export type PlasmicTextInput2__ArgsType = {
  value?: string;
  onTextInputFieldChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicTextInput2__ArgsType;
export const PlasmicTextInput2__ArgProps = new Array<ArgPropType>(
  "value",
  "onTextInputFieldChange"
);

export type PlasmicTextInput2__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
  text?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  textInput?: Flex__<typeof TextInput>;
};

export interface DefaultTextInput2Props {
  value?: string;
  onTextInputFieldChange?: (val: string) => void;
  editing?: SingleBooleanChoiceArg<"editing">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTextInput2__RenderFunc(props: {
  variants: PlasmicTextInput2__VariantsArgs;
  args: PlasmicTextInput2__ArgsType;
  overrides: PlasmicTextInput2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "editing",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.editing
      },
      {
        path: "textInputField",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onChangeProp: "onTextInputFieldChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isSvgHover, triggerSvgHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_svg: isSvgHover
  };

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root,
        { [sty.rootediting]: hasVariant($state, "editing", "editing") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__jzYg3, {
          [sty.freeBoxediting__jzYg3TBqpM]: hasVariant(
            $state,
            "editing",
            "editing"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateEditing"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "editing",
                  operation: 4,
                  value: "editing"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, true);
                  return true;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateEditing"] != null &&
            typeof $steps["updateEditing"] === "object" &&
            typeof $steps["updateEditing"].then === "function"
          ) {
            $steps["updateEditing"] = await $steps["updateEditing"];
          }
        }}
      >
        <EditSvgrepoComSvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
          data-plasmic-trigger-props={[triggerSvgHoverProps]}
        />

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            { [sty.textediting]: hasVariant($state, "editing", "editing") }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.value;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__naeef, {
          [sty.freeBoxediting__naeeFtBqpM]: hasVariant(
            $state,
            "editing",
            "editing"
          )
        })}
      >
        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
          color={"green"}
          onClick={async event => {
            const $steps = {};

            $steps["updateEditing"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: "editing",
                    operation: 6,
                    value: "editing"
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, false);
                    return false;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateEditing"] != null &&
              typeof $steps["updateEditing"] === "object" &&
              typeof $steps["updateEditing"].then === "function"
            ) {
              $steps["updateEditing"] = await $steps["updateEditing"];
            }

            $steps["updateTextInputValue"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["textInput", "value"]
                    },
                    operation: 0
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateTextInputValue"] != null &&
              typeof $steps["updateTextInputValue"] === "object" &&
              typeof $steps["updateTextInputValue"].then === "function"
            ) {
              $steps["updateTextInputValue"] = await $steps[
                "updateTextInputValue"
              ];
            }

            $steps["updateTextInputValue2"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["textInputField"]
                    },
                    operation: 0,
                    value: $state.textInput.value
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateTextInputValue2"] != null &&
              typeof $steps["updateTextInputValue2"] === "object" &&
              typeof $steps["updateTextInputValue2"].then === "function"
            ) {
              $steps["updateTextInputValue2"] = await $steps[
                "updateTextInputValue2"
              ];
            }
          }}
        />

        <TextInput
          data-plasmic-name={"textInput"}
          data-plasmic-override={overrides.textInput}
          className={classNames("__wab_instance", sty.textInput, {
            [sty.textInputediting]: hasVariant($state, "editing", "editing")
          })}
          onChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["textInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }

            (async event => {
              const $steps = {};

              $steps["updateTextInputValue"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["textInput", "value"]
                      },
                      operation: 0,
                      value: $props.value
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTextInputValue"] != null &&
                typeof $steps["updateTextInputValue"] === "object" &&
                typeof $steps["updateTextInputValue"].then === "function"
              ) {
                $steps["updateTextInputValue"] = await $steps[
                  "updateTextInputValue"
                ];
              }
            }).apply(null, eventArgs);
          }}
          placeholder={``}
          value={generateStateValueProp($state, ["textInput", "value"]) ?? ""}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "text", "button", "textInput"],
  svg: ["svg"],
  text: ["text"],
  button: ["button"],
  textInput: ["textInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  text: "div";
  button: typeof Button;
  textInput: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTextInput2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTextInput2__VariantsArgs;
    args?: PlasmicTextInput2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTextInput2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTextInput2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTextInput2__ArgProps,
          internalVariantPropNames: PlasmicTextInput2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTextInput2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTextInput2";
  } else {
    func.displayName = `PlasmicTextInput2.${nodeName}`;
  }
  return func;
}

export const PlasmicTextInput2 = Object.assign(
  // Top-level PlasmicTextInput2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    button: makeNodeComponent("button"),
    textInput: makeNodeComponent("textInput"),

    // Metadata about props expected for PlasmicTextInput2
    internalVariantProps: PlasmicTextInput2__VariantProps,
    internalArgProps: PlasmicTextInput2__ArgProps
  }
);

export default PlasmicTextInput2;
/* prettier-ignore-end */
