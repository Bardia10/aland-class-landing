/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: hUtB9mA7O5QJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: _MWZyCmj9Poj/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicBlogPosts.module.css"; // plasmic-import: hUtB9mA7O5QJ/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 2D7jq9Mtq-9Z/icon

createPlasmicElementProxy;

export type PlasmicBlogPosts__VariantMembers = {};
export type PlasmicBlogPosts__VariantsArgs = {};
type VariantPropType = keyof PlasmicBlogPosts__VariantsArgs;
export const PlasmicBlogPosts__VariantProps = new Array<VariantPropType>();

export type PlasmicBlogPosts__ArgsType = {
  eventsList?: any;
  onEventsListChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicBlogPosts__ArgsType;
export const PlasmicBlogPosts__ArgProps = new Array<ArgPropType>(
  "eventsList",
  "onEventsListChange"
);

export type PlasmicBlogPosts__OverridesType = {
  root?: Flex__<"section">;
  h2?: Flex__<"h2">;
  img?: Flex__<typeof PlasmicImg__>;
  h4?: Flex__<"h4">;
};

export interface DefaultBlogPostsProps {
  eventsList?: any;
  onEventsListChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBlogPosts__RenderFunc(props: {
  variants: PlasmicBlogPosts__VariantsArgs;
  args: PlasmicBlogPosts__ArgsType;
  overrides: PlasmicBlogPosts__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "eventsList",
        type: "writable",
        variableType: "object",

        valueProp: "eventsList",
        onChangeProp: "onEventsListChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.column__pqAnr)}>
        <h2
          data-plasmic-name={"h2"}
          data-plasmic-override={overrides.h2}
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2
          )}
        >
          {
            "\u0631\u0648\u06cc\u062f\u0627\u062f\u0647\u0627\u06cc \u0622\u0644\u0646\u062f"
          }
        </h2>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lGabA
          )}
        >
          {
            "\u0627\u062a\u0641\u0627\u0642\u0627\u062a \u0645\u0647\u0645  \u0622\u0644\u0646\u062f \u0627\u06cc\u0646\u200c\u062c\u0627 \u0642\u0631\u0627\u0631 \u0645\u06cc\u200c\u06af\u06cc\u0631\u0647"
          }
        </div>
        <div className={classNames(projectcss.all, sty.columns__gpWnP)}>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.eventsList;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.column__a0EsV)}
                key={currentIndex}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"178px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"300px"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return currentItem.image;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return {
                          src: "/plasmic/main_ui/images/img8620Jpg.jpg",
                          fullWidth: 3456,
                          fullHeight: 2304,
                          aspectRatio: undefined
                        };
                      }
                      throw e;
                    }
                  })()}
                  width={``}
                />

                <div className={classNames(projectcss.all, sty.columns__fzCjl)}>
                  <div
                    className={classNames(projectcss.all, sty.column__sxhvO)}
                  >
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062a\u062c\u0644\u06cc\u0644 \u0627\u0632 \u0645\u062f\u0627\u0644 \u0622\u0648\u0631\u0627\u0646 \u0627\u0644\u0645\u067e\u06cc\u0627\u062f";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h4>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__wEJfw
                      )}
                      color={"green"}
                      endIcon={null}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToEvents"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/events/${(() => {
                                  try {
                                    return currentIndex;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToEvents"] != null &&
                          typeof $steps["goToEvents"] === "object" &&
                          typeof $steps["goToEvents"].then === "function"
                        ) {
                          $steps["goToEvents"] = await $steps["goToEvents"];
                        }
                      }}
                      shape={"rounded"}
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__brqHl
                        )}
                      >
                        {
                          "\u0627\u062f\u0627\u0645\u0647 \u0645\u0637\u0644\u0628"
                        }
                      </div>
                    </Button>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
        <Button
          className={classNames("__wab_instance", sty.button__vdVj8)}
          color={"blue"}
          onClick={async event => {
            const $steps = {};

            $steps["goToEventsList"] = true
              ? (() => {
                  const actionArgs = { destination: `/events` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToEventsList"] != null &&
              typeof $steps["goToEventsList"] === "object" &&
              typeof $steps["goToEventsList"].then === "function"
            ) {
              $steps["goToEventsList"] = await $steps["goToEventsList"];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__idZ4U
            )}
          >
            {"\u0646\u0645\u0627\u06cc\u0634 \u0647\u0645\u0647"}
          </div>
        </Button>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h2", "img", "h4"],
  h2: ["h2"],
  img: ["img"],
  h4: ["h4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  h2: "h2";
  img: typeof PlasmicImg__;
  h4: "h4";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBlogPosts__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBlogPosts__VariantsArgs;
    args?: PlasmicBlogPosts__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBlogPosts__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBlogPosts__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBlogPosts__ArgProps,
          internalVariantPropNames: PlasmicBlogPosts__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBlogPosts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlogPosts";
  } else {
    func.displayName = `PlasmicBlogPosts.${nodeName}`;
  }
  return func;
}

export const PlasmicBlogPosts = Object.assign(
  // Top-level PlasmicBlogPosts renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    img: makeNodeComponent("img"),
    h4: makeNodeComponent("h4"),

    // Metadata about props expected for PlasmicBlogPosts
    internalVariantProps: PlasmicBlogPosts__VariantProps,
    internalArgProps: PlasmicBlogPosts__ArgProps
  }
);

export default PlasmicBlogPosts;
/* prettier-ignore-end */
