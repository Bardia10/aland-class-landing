/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: g6CcMWX_lL1M

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: _MWZyCmj9Poj/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicAsignmentWindow.module.css"; // plasmic-import: g6CcMWX_lL1M/css

import ChevronDownSvgIcon from "./icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: -nloqc0-FJ1X/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 2D7jq9Mtq-9Z/icon

createPlasmicElementProxy;

export type PlasmicAsignmentWindow__VariantMembers = {
  dontShowMore: "dontShowMore";
};
export type PlasmicAsignmentWindow__VariantsArgs = {
  dontShowMore?: SingleBooleanChoiceArg<"dontShowMore">;
};
type VariantPropType = keyof PlasmicAsignmentWindow__VariantsArgs;
export const PlasmicAsignmentWindow__VariantProps = new Array<VariantPropType>(
  "dontShowMore"
);

export type PlasmicAsignmentWindow__ArgsType = {};
type ArgPropType = keyof PlasmicAsignmentWindow__ArgsType;
export const PlasmicAsignmentWindow__ArgProps = new Array<ArgPropType>();

export type PlasmicAsignmentWindow__OverridesType = {
  root?: Flex__<"div">;
  asignmentBox?: Flex__<"div">;
  asignmentContent?: Flex__<"div">;
  attachedImage?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  showMoreButton?: Flex__<"div">;
  svg?: Flex__<"svg">;
  button?: Flex__<typeof Button>;
};

export interface DefaultAsignmentWindowProps {
  dontShowMore?: SingleBooleanChoiceArg<"dontShowMore">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAsignmentWindow__RenderFunc(props: {
  variants: PlasmicAsignmentWindow__VariantsArgs;
  args: PlasmicAsignmentWindow__ArgsType;
  overrides: PlasmicAsignmentWindow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "asignment",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                title: "Math Assignment",
                date: "2023-06-30",
                deadline: "2023-07-07",
                text: "Coomplete the exercises on pagesmpletoomplete the exercises on pagesmpletoomplete the exercises on pagesmplet",
                teacher: "Mr. Smith",
                class: "Mathematics",
                images: [
                  "https://karatadris.com/wp-content/uploads/2021/06/file-20180226-140213-yox11e.jpg",
                  "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSeYzauNtbvQNz0xEZU5eCaJjktaD943Aw6tw&s"
                ]
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "dontShowMore",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.showLess;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.dontShowMore
      },
      {
        path: "showLess",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root
      )}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $state.asignment;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            className={classNames(projectcss.all, sty.freeBox__qTzsf)}
            key={currentIndex}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mlUjs
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"asignmentBox"}
              data-plasmic-override={overrides.asignmentBox}
              className={classNames(projectcss.all, sty.asignmentBox)}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__wm0Cx, {
                  [sty.freeBoxdontShowMore__wm0CxYozbC]: hasVariant(
                    $state,
                    "dontShowMore",
                    "dontShowMore"
                  )
                })}
              >
                <div
                  data-plasmic-name={"asignmentContent"}
                  data-plasmic-override={overrides.asignmentContent}
                  className={classNames(projectcss.all, sty.asignmentContent)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__esTzw
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.text;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return currentItem.images;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_1, __plasmic_idx_1) => {
                    const currentItem = __plasmic_item_1;
                    const currentIndex = __plasmic_idx_1;
                    return (
                      <div
                        data-plasmic-name={"attachedImage"}
                        data-plasmic-override={overrides.attachedImage}
                        className={classNames(
                          projectcss.all,
                          sty.attachedImage
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ce5Ix
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return "عکس شماره " + (currentIndex + 1);
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <PlasmicImg__
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img, {
                            [sty.imgdontShowMore]: hasVariant(
                              $state,
                              "dontShowMore",
                              "dontShowMore"
                            )
                          })}
                          displayHeight={"300px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                    );
                  })}
                </div>
              </div>
              <div
                data-plasmic-name={"showMoreButton"}
                data-plasmic-override={overrides.showMoreButton}
                className={classNames(projectcss.all, sty.showMoreButton, {
                  [sty.showMoreButtondontShowMore]: hasVariant(
                    $state,
                    "dontShowMore",
                    "dontShowMore"
                  )
                })}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateShowLess"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["showLess"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateShowLess"] != null &&
                    typeof $steps["updateShowLess"] === "object" &&
                    typeof $steps["updateShowLess"].then === "function"
                  ) {
                    $steps["updateShowLess"] = await $steps["updateShowLess"];
                  }
                }}
              >
                <ChevronDownSvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg, {
                    [sty.svgdontShowMore]: hasVariant(
                      $state,
                      "dontShowMore",
                      "dontShowMore"
                    )
                  })}
                  role={"img"}
                />
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zQaw
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem.date;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___45Yv0
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem.deadline;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={"green"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zQsJp
                )}
              >
                {
                  "\u0627\u0631\u0633\u0627\u0644 \u062c\u0648\u0627\u0628 \u062a\u06a9\u0644\u06cc\u0641"
                }
              </div>
            </Button>
          </div>
        );
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "asignmentBox",
    "asignmentContent",
    "attachedImage",
    "img",
    "showMoreButton",
    "svg",
    "button"
  ],
  asignmentBox: [
    "asignmentBox",
    "asignmentContent",
    "attachedImage",
    "img",
    "showMoreButton",
    "svg"
  ],
  asignmentContent: ["asignmentContent", "attachedImage", "img"],
  attachedImage: ["attachedImage", "img"],
  img: ["img"],
  showMoreButton: ["showMoreButton", "svg"],
  svg: ["svg"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  asignmentBox: "div";
  asignmentContent: "div";
  attachedImage: "div";
  img: typeof PlasmicImg__;
  showMoreButton: "div";
  svg: "svg";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAsignmentWindow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAsignmentWindow__VariantsArgs;
    args?: PlasmicAsignmentWindow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAsignmentWindow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAsignmentWindow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAsignmentWindow__ArgProps,
          internalVariantPropNames: PlasmicAsignmentWindow__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAsignmentWindow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAsignmentWindow";
  } else {
    func.displayName = `PlasmicAsignmentWindow.${nodeName}`;
  }
  return func;
}

export const PlasmicAsignmentWindow = Object.assign(
  // Top-level PlasmicAsignmentWindow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    asignmentBox: makeNodeComponent("asignmentBox"),
    asignmentContent: makeNodeComponent("asignmentContent"),
    attachedImage: makeNodeComponent("attachedImage"),
    img: makeNodeComponent("img"),
    showMoreButton: makeNodeComponent("showMoreButton"),
    svg: makeNodeComponent("svg"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicAsignmentWindow
    internalVariantProps: PlasmicAsignmentWindow__VariantProps,
    internalArgProps: PlasmicAsignmentWindow__ArgProps
  }
);

export default PlasmicAsignmentWindow;
/* prettier-ignore-end */
