/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: Cf0omqPvfiVb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicResultForAnswere.module.css"; // plasmic-import: Cf0omqPvfiVb/css

import CloseBoldSvgrepoComSvgIcon from "./icons/PlasmicIcon__CloseBoldSvgrepoComSvg"; // plasmic-import: SJMAvzRhRhf4/icon

createPlasmicElementProxy;

export type PlasmicResultForAnswere__VariantMembers = {
  stage: "start" | "sending" | "colapsed";
  isCollapsed: "isCollapsed";
};
export type PlasmicResultForAnswere__VariantsArgs = {
  stage?: SingleChoiceArg<"start" | "sending" | "colapsed">;
  isCollapsed?: SingleBooleanChoiceArg<"isCollapsed">;
};
type VariantPropType = keyof PlasmicResultForAnswere__VariantsArgs;
export const PlasmicResultForAnswere__VariantProps = new Array<VariantPropType>(
  "stage",
  "isCollapsed"
);

export type PlasmicResultForAnswere__ArgsType = { result?: any };
type ArgPropType = keyof PlasmicResultForAnswere__ArgsType;
export const PlasmicResultForAnswere__ArgProps = new Array<ArgPropType>(
  "result"
);

export type PlasmicResultForAnswere__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultResultForAnswereProps {
  result?: any;
  stage?: SingleChoiceArg<"start" | "sending" | "colapsed">;
  isCollapsed?: SingleBooleanChoiceArg<"isCollapsed">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicResultForAnswere__RenderFunc(props: {
  variants: PlasmicResultForAnswere__VariantsArgs;
  args: PlasmicResultForAnswere__ArgsType;
  overrides: PlasmicResultForAnswere__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "stage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.stage
      },
      {
        path: "isCollapsed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isCollapsed
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root,
        {
          [sty.rootisCollapsed]: hasVariant(
            $state,
            "isCollapsed",
            "isCollapsed"
          ),
          [sty.rootstage_start]: hasVariant($state, "stage", "start")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__eegAr, {
          [sty.freeBoxisCollapsed__eegArlo1AT]: hasVariant(
            $state,
            "isCollapsed",
            "isCollapsed"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateIsCollapsed"] = true
            ? (() => {
                const actionArgs = { vgroup: "isCollapsed", operation: 6 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, false);
                  return false;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsCollapsed"] != null &&
            typeof $steps["updateIsCollapsed"] === "object" &&
            typeof $steps["updateIsCollapsed"].then === "function"
          ) {
            $steps["updateIsCollapsed"] = await $steps["updateIsCollapsed"];
          }
        }}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jkReD,
            {
              [sty.textisCollapsed__jkReDlo1AT]: hasVariant(
                $state,
                "isCollapsed",
                "isCollapsed"
              ),
              [sty.textstage_start__jkReD6QIwR]: hasVariant(
                $state,
                "stage",
                "start"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.result.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__eqaGk,
            {
              [sty.textisCollapsed__eqaGklo1AT]: hasVariant(
                $state,
                "isCollapsed",
                "isCollapsed"
              ),
              [sty.textstage_start__eqaGk6QIwR]: hasVariant(
                $state,
                "stage",
                "start"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.result.grade;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__gIpSf, {
          [sty.freeBoxisCollapsed__gIpSfLo1AT]: hasVariant(
            $state,
            "isCollapsed",
            "isCollapsed"
          )
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__sr2NH,
            {
              [sty.textisCollapsed__sr2NHlo1AT]: hasVariant(
                $state,
                "isCollapsed",
                "isCollapsed"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.result.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mNiVk,
            {
              [sty.textisCollapsed__mNiVkLo1AT]: hasVariant(
                $state,
                "isCollapsed",
                "isCollapsed"
              ),
              [sty.textstage_start__mNiVk6QIwR]: hasVariant(
                $state,
                "stage",
                "start"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.result.desc;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___91Eaf
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.result.grade;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <CloseBoldSvgrepoComSvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgisCollapsed]: hasVariant(
              $state,
              "isCollapsed",
              "isCollapsed"
            )
          })}
          onClick={async event => {
            const $steps = {};

            $steps["updateIsCollapsed"] = true
              ? (() => {
                  const actionArgs = { vgroup: "isCollapsed", operation: 4 };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, true);
                    return true;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateIsCollapsed"] != null &&
              typeof $steps["updateIsCollapsed"] === "object" &&
              typeof $steps["updateIsCollapsed"].then === "function"
            ) {
              $steps["updateIsCollapsed"] = await $steps["updateIsCollapsed"];
            }
          }}
          role={"img"}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicResultForAnswere__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicResultForAnswere__VariantsArgs;
    args?: PlasmicResultForAnswere__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicResultForAnswere__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicResultForAnswere__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicResultForAnswere__ArgProps,
          internalVariantPropNames: PlasmicResultForAnswere__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicResultForAnswere__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResultForAnswere";
  } else {
    func.displayName = `PlasmicResultForAnswere.${nodeName}`;
  }
  return func;
}

export const PlasmicResultForAnswere = Object.assign(
  // Top-level PlasmicResultForAnswere renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicResultForAnswere
    internalVariantProps: PlasmicResultForAnswere__VariantProps,
    internalArgProps: PlasmicResultForAnswere__ArgProps
  }
);

export default PlasmicResultForAnswere;
/* prettier-ignore-end */
