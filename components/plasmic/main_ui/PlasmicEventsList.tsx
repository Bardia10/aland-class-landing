/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: ki2HnNAeA7Zh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import HumbergerMenu from "../../HumbergerMenu"; // plasmic-import: 1LzZIhJKqT7B/component
import HeaderLanding from "../../HeaderLanding"; // plasmic-import: ITWOroSFH7VT/component
import Footer from "../../Footer"; // plasmic-import: LLPl5wc7oCu-/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicEventsList.module.css"; // plasmic-import: ki2HnNAeA7Zh/css

createPlasmicElementProxy;

export type PlasmicEventsList__VariantMembers = {};
export type PlasmicEventsList__VariantsArgs = {};
type VariantPropType = keyof PlasmicEventsList__VariantsArgs;
export const PlasmicEventsList__VariantProps = new Array<VariantPropType>();

export type PlasmicEventsList__ArgsType = {};
type ArgPropType = keyof PlasmicEventsList__ArgsType;
export const PlasmicEventsList__ArgProps = new Array<ArgPropType>();

export type PlasmicEventsList__OverridesType = {
  root?: Flex__<"div">;
  humbergerMenu?: Flex__<typeof HumbergerMenu>;
  headerLanding?: Flex__<typeof HeaderLanding>;
  listOfEvents?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultEventsListProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEventsList__RenderFunc(props: {
  variants: PlasmicEventsList__VariantsArgs;
  args: PlasmicEventsList__ArgsType;
  overrides: PlasmicEventsList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "events",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                {
                  title: "دوست علمی",
                  date: "1396/08/11",
                  desc: "",
                  fulldesc: "",
                  image:
                    "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrMrgY_njLiji-wxD1ADKCW1DTH7KtOo9rDg&s"
                },
                {
                  title: "جشن مدال سال 1397",
                  date: "",
                  desc: "",
                  fulldesc: "",
                  image:
                    "https://didehbanelmiran.ir/wp-content/uploads/2019/02/olympiad-Copy-2-e1551005267417.jpg"
                },
                {
                  title: "سلول‌های بنیادی برای همه",
                  date: "2023-06-30",
                  desc: "This is the third story",
                  fulldesc: "",
                  image:
                    "https://media.imna.ir/d/2022/12/13/3/1831927.jpg?ts=1670908119000"
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            sty.root
          )}
          dir={"rtl"}
        >
          <div className={classNames(projectcss.all, sty.freeBox__wtAuB)}>
            <HumbergerMenu
              data-plasmic-name={"humbergerMenu"}
              data-plasmic-override={overrides.humbergerMenu}
              className={classNames("__wab_instance", sty.humbergerMenu)}
            />

            <HeaderLanding
              data-plasmic-name={"headerLanding"}
              data-plasmic-override={overrides.headerLanding}
              className={classNames("__wab_instance", sty.headerLanding)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xZuLc
              )}
            >
              {"\u0631\u0648\u06cc\u062f\u0627\u062f\u0647\u0627"}
            </div>
            <div
              data-plasmic-name={"listOfEvents"}
              data-plasmic-override={overrides.listOfEvents}
              className={classNames(projectcss.all, sty.listOfEvents)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.events;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wcG)}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToEvents"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/events/${(() => {
                                try {
                                  return currentIndex;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToEvents"] != null &&
                        typeof $steps["goToEvents"] === "object" &&
                        typeof $steps["goToEvents"].then === "function"
                      ) {
                        $steps["goToEvents"] = await $steps["goToEvents"];
                      }
                    }}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      height={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "100"
                          : "160"
                      }
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return currentItem.image;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      width={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "100"
                          : "200"
                      }
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__iSde)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iNx7R
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hbzP
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.date;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "humbergerMenu",
    "headerLanding",
    "listOfEvents",
    "img",
    "footer"
  ],
  humbergerMenu: ["humbergerMenu"],
  headerLanding: ["headerLanding"],
  listOfEvents: ["listOfEvents", "img"],
  img: ["img"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  humbergerMenu: typeof HumbergerMenu;
  headerLanding: typeof HeaderLanding;
  listOfEvents: "div";
  img: typeof PlasmicImg__;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEventsList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEventsList__VariantsArgs;
    args?: PlasmicEventsList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEventsList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEventsList__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEventsList__ArgProps,
          internalVariantPropNames: PlasmicEventsList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEventsList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEventsList";
  } else {
    func.displayName = `PlasmicEventsList.${nodeName}`;
  }
  return func;
}

export const PlasmicEventsList = Object.assign(
  // Top-level PlasmicEventsList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    humbergerMenu: makeNodeComponent("humbergerMenu"),
    headerLanding: makeNodeComponent("headerLanding"),
    listOfEvents: makeNodeComponent("listOfEvents"),
    img: makeNodeComponent("img"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicEventsList
    internalVariantProps: PlasmicEventsList__VariantProps,
    internalArgProps: PlasmicEventsList__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEventsList;
/* prettier-ignore-end */
