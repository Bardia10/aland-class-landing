/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: kJS6KRqQlIeh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import HeaderLanding from "../../HeaderLanding"; // plasmic-import: ITWOroSFH7VT/component
import HumbergerMenu from "../../HumbergerMenu"; // plasmic-import: 1LzZIhJKqT7B/component
import Medalist from "../../Medalist"; // plasmic-import: WCscH0b-XY5W/component
import Footer from "../../Footer"; // plasmic-import: LLPl5wc7oCu-/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicMedallists2.module.css"; // plasmic-import: kJS6KRqQlIeh/css

createPlasmicElementProxy;

export type PlasmicMedallists2__VariantMembers = {};
export type PlasmicMedallists2__VariantsArgs = {};
type VariantPropType = keyof PlasmicMedallists2__VariantsArgs;
export const PlasmicMedallists2__VariantProps = new Array<VariantPropType>();

export type PlasmicMedallists2__ArgsType = {};
type ArgPropType = keyof PlasmicMedallists2__ArgsType;
export const PlasmicMedallists2__ArgProps = new Array<ArgPropType>();

export type PlasmicMedallists2__OverridesType = {
  root?: Flex__<"div">;
  headerLanding?: Flex__<typeof HeaderLanding>;
  humbergerMenu?: Flex__<typeof HumbergerMenu>;
  text?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  medalist?: Flex__<typeof Medalist>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultMedallists2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMedallists2__RenderFunc(props: {
  variants: PlasmicMedallists2__VariantsArgs;
  args: PlasmicMedallists2__ArgsType;
  overrides: PlasmicMedallists2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "medallists",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                {
                  name: "پانیذ قاسمی",
                  accomplishment:
                    "مدال نقره المپیاد سلول‌های بنیادی سال 1396-1397",
                  story: "داستان مدال آور",
                  profile:
                    "https://i.postimg.cc/66P5m2XT/IMG-20250212-034652-641.jpg",
                  type: "نقره"
                },
                {
                  name: "فرنوش فرشچیان",
                  accomplishment: "مدال برنز المپیاد شیمی سال 1396-1397",
                  story: "داستان مدال آور",
                  profile:
                    "https://i.postimg.cc/KzM3Sd6z/IMG-20250212-041032-911.jpg",
                  type: "برنز"
                },
                {
                  name: "پارسا بازدار",
                  accomplishment:
                    "مدال نقره المپیاد سلول های بنیادی سال 1394-1395",
                  story: "2داستان مدال آور",
                  profile:
                    "https://i.postimg.cc/j2YwsMTh/IMG-20250212-041033-187.jpg",
                  type: "نقره"
                },
                {
                  name: "مریم توحیدی",
                  accomplishment: "مدال طلا المپیاد کارآفرینی سال 1398 - 1399",
                  story: "داستان مدال آور",
                  profile:
                    "https://i.postimg.cc/7YgcYh31/IMG-20250212-041033-395.jpg",
                  type: "طلا"
                },
                {
                  name: "محمد چراغی",
                  accomplishment: "مدال نقره المپیاد ریاضی سال 1396 - 1397",
                  story: "داستان مدال آور",
                  profile:
                    "https://i.postimg.cc/nc65n79h/IMG-20250212-041033-337.jpg",
                  type: "نقره"
                },
                {
                  name: "زهرا نوری",
                  accomplishment: "مدال طلای سلوال های بنیادی سال 1397 - 1398",
                  story: "داستان مدال آور",
                  profile: "https://i.postimg.cc/vZnk4PQ1/photo17041247156.jpg",
                  type: "طلا"
                },
                {
                  name: "آریا نصرت الهی",
                  accomplishment: "مدال نقره المپیاد شیمی سال 1398 - 1399",
                  story: "داستان مدال آور",
                  profile:
                    "https://i.postimg.cc/PrG9jYwr/IMG-20250212-041033-609.jpg",
                  type: "نقره"
                },
                {
                  name: "رضا زمانی",
                  accomplishment: "مدال برنز المپیاد شیمی سال 1399 - 1400",
                  story: "داستان مدال آور",
                  profile:
                    "https://i.postimg.cc/HkwSHNC6/IMG-20250212-041033-157.jpg",
                  type: "برنز"
                },
                {
                  name: "محمدمهدی بارانی",
                  accomplishment: "مدال برنز المپیاد شیمی سال 1400-1401",
                  story: "داستان مدال آور",
                  profile:
                    "https://i.postimg.cc/657gsz3P/IMG-20250212-041033-894.jpg",
                  type: "برنز"
                },
                {
                  name: "طنین نصرتی",
                  accomplishment: "مدال برنز المپیاد ریاضی سال 1401-1402",
                  story: "داستان مدال آور",
                  profile:
                    "https://i.postimg.cc/tR1Gy9vD/IMG-20250212-041034-065.jpg",
                  type: "برنز"
                },
                {
                  name: "شایان شعاعی",
                  accomplishment: "مدال نقره المپیاد شیمی سال 1402-1403",
                  story: "داستان مدال آور",
                  profile:
                    "https://i.postimg.cc/GtDfDhZC/IMG-20250212-041034-029.jpg",
                  type: "نقره"
                },
                {
                  name: "پارسا صادقیان",
                  accomplishment: " مدال نقره المپیاد شیمی سال1402-1403",
                  story: "داستان مدال آور",
                  profile:
                    "https://i.postimg.cc/Ss35jz1d/IMG-20250212-041033-159.jpg",
                  type: "نقره"
                },
                {
                  name: "سجاد کهزادی",
                  accomplishment: "مدال برنز المپیاد شیمی سال 1402-1403",
                  story: "داستان مدال آور",
                  profile:
                    "https://i.postimg.cc/q7GZc5bN/IMG-20250212-041033-190.jpg",
                  type: "برنز"
                },
                {
                  name: "آیناز تابانی",
                  accomplishment: "مدال برنز المپیاد علوم زمین سال 1402-1403",
                  story: "داستان مدال آور",
                  profile:
                    "https://i.postimg.cc/xC0hW2JG/IMG-20250212-041033-956.jpg",
                  type: "برنز"
                },
                {
                  name: "زهرا شمالی پور",
                  accomplishment: "مدال برنز سلول های بنیادی سال 1402-1403",
                  story: "داستان مدال آور",
                  profile:
                    "https://i.postimg.cc/Nfmh9pcH/IMG-20250212-041033-782.jpg",
                  type: "برنز"
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            sty.root
          )}
        >
          <HeaderLanding
            data-plasmic-name={"headerLanding"}
            data-plasmic-override={overrides.headerLanding}
            className={classNames("__wab_instance", sty.headerLanding)}
          />

          <HumbergerMenu
            data-plasmic-name={"humbergerMenu"}
            data-plasmic-override={overrides.humbergerMenu}
            className={classNames("__wab_instance", sty.humbergerMenu)}
          />

          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {
              "\u0645\u062f\u0627\u0644 \u0622\u0648\u0631\u0627\u0646 \u0648 \u0631\u062a\u0628\u0647 \u0647\u0627\u06cc \u0628\u0631\u062a\u0631"
            }
          </div>
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.medallists;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <Medalist
                  data-plasmic-name={"medalist"}
                  data-plasmic-override={overrides.medalist}
                  className={classNames("__wab_instance", sty.medalist)}
                  key={currentIndex}
                  medallist={(() => {
                    try {
                      return currentItem;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  scale={"small"}
                />
              );
            })}
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLanding",
    "humbergerMenu",
    "text",
    "freeBox",
    "medalist",
    "footer"
  ],
  headerLanding: ["headerLanding"],
  humbergerMenu: ["humbergerMenu"],
  text: ["text"],
  freeBox: ["freeBox", "medalist"],
  medalist: ["medalist"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLanding: typeof HeaderLanding;
  humbergerMenu: typeof HumbergerMenu;
  text: "div";
  freeBox: "div";
  medalist: typeof Medalist;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMedallists2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMedallists2__VariantsArgs;
    args?: PlasmicMedallists2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMedallists2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMedallists2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMedallists2__ArgProps,
          internalVariantPropNames: PlasmicMedallists2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMedallists2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMedallists2";
  } else {
    func.displayName = `PlasmicMedallists2.${nodeName}`;
  }
  return func;
}

export const PlasmicMedallists2 = Object.assign(
  // Top-level PlasmicMedallists2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerLanding: makeNodeComponent("headerLanding"),
    humbergerMenu: makeNodeComponent("humbergerMenu"),
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),
    medalist: makeNodeComponent("medalist"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicMedallists2
    internalVariantProps: PlasmicMedallists2__VariantProps,
    internalArgProps: PlasmicMedallists2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMedallists2;
/* prettier-ignore-end */
