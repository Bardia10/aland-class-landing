/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: aHqxJIgozron

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import ProfileSetting from "../../ProfileSetting"; // plasmic-import: 8xToqxWNlbq1/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicProfileButton.module.css"; // plasmic-import: aHqxJIgozron/css

import GithubIconSvgIcon from "./icons/PlasmicIcon__GithubIconSvg"; // plasmic-import: l_mko3EazaII/icon

createPlasmicElementProxy;

export type PlasmicProfileButton__VariantMembers = {};
export type PlasmicProfileButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfileButton__VariantsArgs;
export const PlasmicProfileButton__VariantProps = new Array<VariantPropType>();

export type PlasmicProfileButton__ArgsType = {};
type ArgPropType = keyof PlasmicProfileButton__ArgsType;
export const PlasmicProfileButton__ArgProps = new Array<ArgPropType>();

export type PlasmicProfileButton__OverridesType = {
  modal2?: Flex__<typeof AntdModal>;
  profileSetting2?: Flex__<typeof ProfileSetting>;
  svg?: Flex__<"svg">;
};

export interface DefaultProfileButtonProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfileButton__RenderFunc(props: {
  variants: PlasmicProfileButton__VariantsArgs;
  args: PlasmicProfileButton__ArgsType;
  overrides: PlasmicProfileButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "profileSetting2.profileInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <AntdModal
      data-plasmic-name={"modal2"}
      data-plasmic-override={overrides.modal2}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.modal2
      )}
      defaultStylesClassName={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless
      )}
      hideFooter={true}
      modalScopeClassName={sty["modal2__modal"]}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["modal2", "open"]).apply(
          null,
          eventArgs
        );
      }}
      open={generateStateValueProp($state, ["modal2", "open"])}
      title={"Modal title"}
      trigger={
        <GithubIconSvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      }
    >
      <ProfileSetting
        data-plasmic-name={"profileSetting2"}
        data-plasmic-override={overrides.profileSetting2}
        className={classNames("__wab_instance", sty.profileSetting2)}
        onProfileInfoChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "profileSetting2",
            "profileInfo"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
      />
    </AntdModal>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  modal2: ["modal2", "profileSetting2", "svg"],
  profileSetting2: ["profileSetting2"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  modal2: typeof AntdModal;
  profileSetting2: typeof ProfileSetting;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfileButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfileButton__VariantsArgs;
    args?: PlasmicProfileButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfileButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfileButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfileButton__ArgProps,
          internalVariantPropNames: PlasmicProfileButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfileButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "modal2") {
    func.displayName = "PlasmicProfileButton";
  } else {
    func.displayName = `PlasmicProfileButton.${nodeName}`;
  }
  return func;
}

export const PlasmicProfileButton = Object.assign(
  // Top-level PlasmicProfileButton renders the root element
  makeNodeComponent("modal2"),
  {
    // Helper components rendering sub-elements
    profileSetting2: makeNodeComponent("profileSetting2"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicProfileButton
    internalVariantProps: PlasmicProfileButton__VariantProps,
    internalArgProps: PlasmicProfileButton__ArgProps
  }
);

export default PlasmicProfileButton;
/* prettier-ignore-end */
