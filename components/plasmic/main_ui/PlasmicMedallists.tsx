/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Q2kKTTfJ4NHrVPwfjBiGV
// Component: hP0FtLhVuQB7

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import Medalist from "../../Medalist"; // plasmic-import: WCscH0b-XY5W/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7Q2kKTTfJ4NHrVPwfjBiGV/projectcss
import sty from "./PlasmicMedallists.module.css"; // plasmic-import: hP0FtLhVuQB7/css

createPlasmicElementProxy;

export type PlasmicMedallists__VariantMembers = {};
export type PlasmicMedallists__VariantsArgs = {};
type VariantPropType = keyof PlasmicMedallists__VariantsArgs;
export const PlasmicMedallists__VariantProps = new Array<VariantPropType>();

export type PlasmicMedallists__ArgsType = { medallistsList?: any };
type ArgPropType = keyof PlasmicMedallists__ArgsType;
export const PlasmicMedallists__ArgProps = new Array<ArgPropType>(
  "medallistsList"
);

export type PlasmicMedallists__OverridesType = {
  root?: Flex__<"div">;
  sliderCarousel2?: Flex__<typeof SliderWrapper>;
  medalist?: Flex__<typeof Medalist>;
};

export interface DefaultMedallistsProps {
  medallistsList?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMedallists__RenderFunc(props: {
  variants: PlasmicMedallists__VariantsArgs;
  args: PlasmicMedallists__ArgsType;
  overrides: PlasmicMedallists__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          medallistsList: [
            {
              name: "\u0646\u0627\u0645 \u0645\u062f\u0627\u0644 \u0622\u0648\u0631",
              accomplishment:
                "\u0627\u0641\u062a\u062e\u0627\u0631\u0627\u062a \u06a9\u0633\u0628 \u0634\u062f\u0647",
              story:
                "\u062f\u0627\u0633\u062a\u0627\u0646 \u0645\u062f\u0627\u0644 \u0622\u0648\u0631",
              profile:
                "https://img.freepik.com/premium-vector/man-professional-business-casual-young-avatar-icon-illustration_1277826-623.jpg"
            },
            {
              name: "\u0646\u0627\u0645 \u0645\u062f\u0627\u0644 \u0622\u0648\u0631",
              accomplishment:
                "\u0627\u0641\u062a\u062e\u0627\u0631\u0627\u062a \u06a9\u0633\u0628 \u0634\u062f\u0647",
              story:
                "\u062f\u0627\u0633\u062a\u0627\u0646 \u0645\u062f\u0627\u0644 \u0622\u0648\u0631",
              profile:
                "https://img.freepik.com/premium-vector/man-professional-business-casual-young-avatar-icon-illustration_1277826-623.jpg"
            },
            {
              name: "\u0646\u0627\u0645 \u0645\u062f\u0627\u0644 \u0622\u0648\u0631",
              accomplishment:
                "\u0627\u0641\u062a\u062e\u0627\u0631\u0627\u062a \u06a9\u0633\u0628 \u0634\u062f\u0647",
              story:
                "\u062f\u0627\u0633\u062a\u0627\u0646 \u0645\u062f\u0627\u0644 \u0622\u0648\u0631",
              profile:
                "https://img.freepik.com/premium-vector/man-professional-business-casual-young-avatar-icon-illustration_1277826-623.jpg"
            }
          ]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel2.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel2",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__vVnZm)}>
        {(() => {
          const child$Props = {
            arrows: false,
            autoplay: true,
            autoplaySpeed: 0,
            beforeChange: async (...eventArgs: any) => {
              generateStateOnChangePropForCodeComponents(
                $state,
                "currentSlide",
                ["sliderCarousel2", "currentSlide"],
                SliderWrapper_Helpers
              ).apply(null, eventArgs);
            },
            centerMode: true,
            centerPadding: "50",
            className: classNames("__wab_instance", sty.sliderCarousel2),
            cssEase: "linear",
            focusOnSelect: false,
            initialSlide: generateStateValueProp($state, [
              "sliderCarousel2",
              "currentSlide"
            ]),
            pauseOnHover: false,
            ref: ref => {
              $refs["sliderCarousel2"] = ref;
            },
            sliderScopeClassName: sty["sliderCarousel2__slider"],
            slidesToShow: 4,
            speed: 10000,
            swipe: true,
            swipeToSlide: false
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "currentSlide",
                plasmicStateName: "sliderCarousel2.currentSlide"
              }
            ],
            [],
            SliderWrapper_Helpers ?? {},
            child$Props
          );

          return (
            <SliderWrapper
              data-plasmic-name={"sliderCarousel2"}
              data-plasmic-override={overrides.sliderCarousel2}
              {...child$Props}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $props.medallistsList;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zdHae)}
                    key={currentIndex}
                  >
                    <Medalist
                      data-plasmic-name={"medalist"}
                      data-plasmic-override={overrides.medalist}
                      className={classNames("__wab_instance", sty.medalist)}
                      medallist={(() => {
                        try {
                          return currentItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      scale={"small"}
                      story={(() => {
                        try {
                          return currentIndex;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                );
              })}
            </SliderWrapper>
          );
        })()}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sliderCarousel2", "medalist"],
  sliderCarousel2: ["sliderCarousel2", "medalist"],
  medalist: ["medalist"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sliderCarousel2: typeof SliderWrapper;
  medalist: typeof Medalist;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMedallists__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMedallists__VariantsArgs;
    args?: PlasmicMedallists__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMedallists__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMedallists__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMedallists__ArgProps,
          internalVariantPropNames: PlasmicMedallists__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMedallists__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMedallists";
  } else {
    func.displayName = `PlasmicMedallists.${nodeName}`;
  }
  return func;
}

export const PlasmicMedallists = Object.assign(
  // Top-level PlasmicMedallists renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sliderCarousel2: makeNodeComponent("sliderCarousel2"),
    medalist: makeNodeComponent("medalist"),

    // Metadata about props expected for PlasmicMedallists
    internalVariantProps: PlasmicMedallists__VariantProps,
    internalArgProps: PlasmicMedallists__ArgProps
  }
);

export default PlasmicMedallists;
/* prettier-ignore-end */
